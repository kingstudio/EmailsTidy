<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Aspose.Network</name>
    </assembly>
    <members>
        <member name="T:Aspose.Network.Logging.SimpleFormatter">
            <summary>
            Represents the default implementation of IFormatter interface.
            </summary>
        </member>
        <member name="T:Aspose.Network.Logging.Formatter">
            <summary>
            Represents the interface for formatting log entry messsages.
            </summary>
        </member>
        <member name="T:Aspose.Network.Logging.IFormatter">
            <summary>
            Represents the interface for formatting log entry messsages.
            </summary>
        </member>
        <member name="M:Aspose.Network.Logging.IFormatter.Format(Aspose.Network.Logging.LogEntry)">
            <summary>
            Formats a log entry and return a string to be outputted.
            </summary>
            <param name="entry">The Log entry to format.</param>
            <returns>String representing the log entry.</returns>
        </member>
        <member name="M:Aspose.Network.Logging.IFormatter.Format(System.DateTime)">
            <summary>
            Formats a datetime and return a string to be outputted.
            </summary>
            <param name="datatime">The datetime.</param>
        </member>
        <member name="P:Aspose.Network.Logging.IFormatter.Header">
            <summary>
            Gets the header string.
            </summary>
        </member>
        <member name="P:Aspose.Network.Logging.IFormatter.Footer">
            <summary>
            Gest the footer string.
            </summary>
        </member>
        <member name="M:Aspose.Network.Logging.Formatter.#ctor">
            <summary>
            Creates an instance of Formatter.
            </summary>
        </member>
        <member name="M:Aspose.Network.Logging.Formatter.Format(Aspose.Network.Logging.LogEntry)">
            <summary>
            Formats a log entry and return a string to be outputted.
            </summary>
            <param name="entry">Log entry to format.</param>
            <returns>String representing the log entry.</returns>
        </member>
        <member name="M:Aspose.Network.Logging.Formatter.Format(System.DateTime)">
            <summary>
            Formats a datetime and return a string to be outputted.
            </summary>
            <param name="date">The datetime.</param>
        </member>
        <member name="P:Aspose.Network.Logging.Formatter.Header">
            <summary>
            Gets or sets the header.
            </summary>
        </member>
        <member name="P:Aspose.Network.Logging.Formatter.Footer">
            <summary>
            Gets or sets the footer.
            </summary>
        </member>
        <member name="M:Aspose.Network.Logging.SimpleFormatter.#ctor">
            <summary>
            Creates a new SimpleFormatter instance.
            </summary>
        </member>
        <member name="M:Aspose.Network.Logging.SimpleFormatter.#ctor(System.String,System.String)">
            <summary>
            Creates a new SimpleFormatter instance.
            </summary>
            <param name="header">The header.</param>
            <param name="footer">The footer.</param>
        </member>
        <member name="M:Aspose.Network.Logging.SimpleFormatter.Format(Aspose.Network.Logging.LogEntry)">
            <summary>
            Formats a log entry and return a string to be outputted.
            </summary>
            <param name="entry">Log entry to format.</param>
            <returns>String representing the log entry.</returns>
        </member>
        <member name="M:Aspose.Network.Logging.SimpleFormatter.Format(System.DateTime)">
            <summary>
            Formats a datetime and return a string to be outputted.
            </summary>
            <param name="date">The datetime.</param>
        </member>
        <member name="T:Aspose.Network.Dns.WKSResourceRecord">
            <summary>
            Represents a WKS DNS resource record
            </summary>
        </member>
        <member name="T:Aspose.Network.Dns.ResourceRecord">
            <summary>
            Represents the general resource record object in RFC 1035.
            </summary>
            <remarks>Provides a general resource record object in RFC 1035. </remarks>
        </member>
        <member name="M:Aspose.Network.Dns.ResourceRecord.#ctor">
            <summary>
            Initialize a new instance of the class <see cref="T:Aspose.Network.Dns.ResourceRecord">ResourceRecord</see>.
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.ResourceRecord.DataLength">
            <summary>
            Gets or sets the length of data
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.ResourceRecord.Name">
            <summary>
            Gets or sets the name
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.ResourceRecord.Class">
            <summary>
            Gets or sets the class of query
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.ResourceRecord.Type">
            <summary>
            Gets or sets the type of query.
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.ResourceRecord.DataBlock">
            <summary>
            Gets or sets the data block
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.ResourceRecord.TTL">
            <summary>
            Gets or sets the time to live.
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.WKSResourceRecord.#ctor">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.WKSResourceRecord">WKSResourceRecord</see>.
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.WKSResourceRecord.#ctor(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.WKSResourceRecord">WKSResourceRecord</see>.
            </summary>
            <param name="buffer">The arry of unsigned bytes from which to create.</param>
            <param name="index">The index into buffer at which this resource record begins</param>
            <param name="count">The length of the bytes to create this resource record</param>
        </member>
        <member name="P:Aspose.Network.Dns.WKSResourceRecord.BitMap">
            <summary>
            Gets or sets the Bit map
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.WKSResourceRecord.Address">
            <summary>
            Gets or sets the address
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.WKSResourceRecord.Protocol">
            <summary>
            Gets or sets the protocol
            </summary>
        </member>
        <member name="T:Aspose.Network.Security.Authentication.InvalidCredentialException">
            <summary>
            The exception that is thrown when authentication fails for an authentication stream and cannot be retried
            </summary>
        </member>
        <member name="T:Aspose.Network.Security.Authentication.AuthenticationException">
            <summary>
            The exception that is thrown when authentication fails for an authentication stream.
            </summary>
        </member>
        <member name="M:Aspose.Network.Security.Authentication.AuthenticationException.#ctor">
            <summary>
            Initializes a new instance of the AuthenticationException class with no message.
            </summary>
        </member>
        <member name="M:Aspose.Network.Security.Authentication.AuthenticationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AuthenticationException class with the specified message.
            </summary>
            <param name="message">A String that describes the authentication failure.</param>
        </member>
        <member name="M:Aspose.Network.Security.Authentication.AuthenticationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the AuthenticationException class with the specified message and inner exception.
            </summary>
            <param name="message">A String that describes the authentication failure.</param>
            <param name="inner">The Exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Aspose.Network.Security.Authentication.InvalidCredentialException.#ctor">
            <summary>
            Initializes a new instance of the InvalidCredentialException class with no message. 
            </summary>
        </member>
        <member name="M:Aspose.Network.Security.Authentication.InvalidCredentialException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the InvalidCredentialException class with the specified message.
            </summary>
            <param name="message">A String that describes the authentication failure.</param>
        </member>
        <member name="M:Aspose.Network.Security.Authentication.InvalidCredentialException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the InvalidCredentialException class with the specified message and inner exception.
            </summary>
            <param name="message">A String that describes the authentication failure.</param>
            <param name="innerException">The Exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Aspose.Network.Logging.NullAppender">
            <summary>
            Represents a do-nothing appender.
            </summary>
        </member>
        <member name="T:Aspose.Network.Logging.Appender">
            <summary>
            Represents the base class for Appender.
            </summary>
        </member>
        <member name="T:Aspose.Network.Logging.IAppender">
            <summary>
            Implement this interface for your own strategies for printing log entries. 
            </summary>
        </member>
        <member name="M:Aspose.Network.Logging.IAppender.Append(Aspose.Network.Logging.LogEntry)">
            <summary>
            Log the specified log entry in Appender specific way. 
            </summary>
            <param name="entry"></param>
        </member>
        <member name="P:Aspose.Network.Logging.IAppender.Formatter">
            <summary>
            Gets or sets the IFormatter.
            </summary>
        </member>
        <member name="M:Aspose.Network.Logging.Appender.#ctor">
            <summary>
            Inistializes a new instance of Appender class.
            </summary>
        </member>
        <member name="M:Aspose.Network.Logging.Appender.#ctor(Aspose.Network.Logging.IFormatter)">
            <summary>
            Inistializes a new instance of Appender class.
            </summary>
            <param name="formatter">The IFormatter.</param>
        </member>
        <member name="M:Aspose.Network.Logging.Appender.Append(Aspose.Network.Logging.LogEntry)">
            <summary>
            Appends the specified log entry to the appender.
            </summary>
            <param name="entry">The log entry.</param>
        </member>
        <member name="M:Aspose.Network.Logging.Appender.Close">
            <summary>
            Closes the appender.
            </summary>
        </member>
        <member name="M:Aspose.Network.Logging.Appender.Initialize">
            <summary>
            Initializes the appender instance.
            </summary>
        </member>
        <member name="M:Aspose.Network.Logging.Appender.Dispose">
            <summary>
            Releases the unmanaged resources used by the Appender.
            </summary>
        </member>
        <member name="M:Aspose.Network.Logging.Appender.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Appender, and optionally disposes of the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to releases only unmanaged resources.</param>
        </member>
        <member name="M:Aspose.Network.Logging.Appender.Finalize">
            <summary>
            Frees resources used by the Appender class.
            </summary>
        </member>
        <member name="P:Aspose.Network.Logging.Appender.Initialized">
            <summary>
            Indicates whether an Appender is initialized.
            </summary>
        </member>
        <member name="P:Aspose.Network.Logging.Appender.Closed">
            <summary>
            Indicates whether an Appender is closed.
            </summary>
        </member>
        <member name="P:Aspose.Network.Logging.Appender.Formatter">
            <summary>
            Gets or sets the formatter.
            </summary>
        </member>
        <member name="M:Aspose.Network.Logging.NullAppender.#ctor">
            <summary>
            Creates a new instace of NullAppender.
            </summary>
        </member>
        <member name="M:Aspose.Network.Logging.NullAppender.Append(Aspose.Network.Logging.LogEntry)">
            <summary>
            Appends a log entry to NullAppender.
            </summary>
            <param name="entry">The entry need to log.</param>
        </member>
        <member name="F:Aspose.Network.Logging.Win32FileAttributes.Readonly">
            <summary>
            Read-only
            </summary>
        </member>
        <member name="F:Aspose.Network.Logging.Win32FileAttributes.Hidden">
            <summary>
            Hidden
            </summary>
        </member>
        <member name="F:Aspose.Network.Logging.Win32FileAttributes.System">
            <summary>
            System
            </summary>
        </member>
        <member name="F:Aspose.Network.Logging.Win32FileAttributes.Archive">
            <summary>
            File should be archived.
            </summary>
        </member>
        <member name="F:Aspose.Network.Logging.Win32FileAttributes.Device">
            <summary>
            Device
            </summary>
        </member>
        <member name="F:Aspose.Network.Logging.Win32FileAttributes.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:Aspose.Network.Logging.Win32FileAttributes.Temporary">
            <summary>
            File is temporary (should be kept in cache and not 
            written to disk if possible)
            </summary>
        </member>
        <member name="F:Aspose.Network.Logging.Win32FileAttributes.SparseFile">
            <summary>
            Sparse file.
            </summary>
        </member>
        <member name="F:Aspose.Network.Logging.Win32FileAttributes.ReparsePoint">
            <summary>
            Reparse point.
            </summary>
        </member>
        <member name="F:Aspose.Network.Logging.Win32FileAttributes.Compressed">
            <summary>
            Compress file contents.
            </summary>
        </member>
        <member name="F:Aspose.Network.Logging.Win32FileAttributes.NotContentIndexed">
            <summary>
            File should not be indexed by the content indexing service. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Logging.Win32FileAttributes.Encrypted">
            <summary>
            Encrypt file.
            </summary>
        </member>
        <member name="F:Aspose.Network.Logging.Win32FileAttributes.WriteThrough">
            <summary>
            The system writes through any intermediate cache and goes directly to disk. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Logging.Win32FileAttributes.NoBuffering">
            <summary>
            The system opens a file with no system caching
            </summary>
        </member>
        <member name="F:Aspose.Network.Logging.Win32FileAttributes.DeleteOnClose">
            <summary>
            Delete file after it is closed.
            </summary>
        </member>
        <member name="F:Aspose.Network.Logging.Win32FileAttributes.PosixSemantics">
            <summary>
            A file is accessed according to POSIX rules.
            </summary>
        </member>
        <member name="T:Aspose.Network.Ftp.TransferProgressEventArgs">
            <summary>
            Represents the event in the progress of transfering.
            </summary>
        </member>
        <member name="P:Aspose.Network.Ftp.TransferProgressEventArgs.TransferingBytes">
            <summary>
            Gets the number of bytes transfering.
            </summary>
        </member>
        <member name="P:Aspose.Network.Ftp.TransferProgressEventArgs.TotalTransferedBytes">
            <summary>
            Gets the total number of bytes transfered.
            </summary>
        </member>
        <member name="P:Aspose.Network.Ftp.TransferProgressEventArgs.TransferStatus">
            <summary>
            Gets the transfer status of the event.
            </summary>
        </member>
        <member name="T:Aspose.Network.Dns.RPResourceRecord">
            <summary>
            Represents a RP DNS resource record
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.RPResourceRecord.#ctor">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.RPResourceRecord">RPResourceRecord</see>.
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.RPResourceRecord.#ctor(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.RPResourceRecord">RPResourceRecord</see>.
            </summary>
            <param name="buffer">The arry of unsigned bytes from which to create.</param>
            <param name="index">The index into buffer at which this resource record begins</param>
            <param name="count">The length of the bytes to create this resource record</param>
        </member>
        <member name="P:Aspose.Network.Dns.RPResourceRecord.Text">
            <summary>
            Gets or sets the text
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.RPResourceRecord.ResponsiblePerson">
            <summary>
            Gets or sets the responsible persion
            </summary>
        </member>
        <member name="T:Aspose.Network.Dns.QueryType">
            <summary>
            Specifies the type of the <seealso cref="T:Aspose.Network.Dns.Question">Question</seealso> to query. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.QueryType.A">
            <summary>
            A host address query.
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.QueryType.A6">
            <summary>
            A 128 bit IPv6 address query.
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.QueryType.AAAA">
            <summary>
            A single 128 bit IPv6 address query. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.QueryType.AFSDB">
            <summary>
            An AFS database location query. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.QueryType.ALL">
            <summary>
            All types of resource records available.
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.QueryType.CNAME">
            <summary>
            Canonical name for an alias. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.QueryType.GPOS">
            <summary>
            Geographical location. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.QueryType.HINFO">
            <summary>
            Host information. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.QueryType.ISDN">
            <summary>
            ISDN address. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.QueryType.KEY">
            <summary>
            
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.QueryType.LOC">
            <summary>
            Location information. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.QueryType.MB">
            <summary>
            Experimental. (Mail box domain name) 
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.QueryType.MD">
            <summary>
            Obsolete - Mail destination. Use MX instead. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.QueryType.MF">
            <summary>
            Obsolete - Mail forwarder. Use MX instead. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.QueryType.MG">
            <summary>
            Experimental. (Mail group member) 
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.QueryType.MINFO">
            <summary>
            Mail box or mail list information. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.QueryType.MR">
            <summary>
            Experimental. (Mail rename domain member) 
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.QueryType.MX">
            <summary>
            Mail exchange server responsible for handling email addresses that belong to the domain in question. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.QueryType.NS">
            <summary>
            Authoritative name server for the domain in question. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.QueryType.NSAP">
            <summary>
            Network service access protocol. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.QueryType.NSAPPTR">
            <summary>
            Pointer for network service access protocol similar to the PTR record for an IP address.  
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.QueryType.NULL">
            <summary>
            Experimental. (Null) 
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.QueryType.NXT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.QueryType.PTR">
            <summary>
            Domain name pointer. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.QueryType.PX">
            <summary>
            Pointer to X.400/Rfc822 mapping information. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.QueryType.RP">
            <summary>
            Responsible person. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.QueryType.RT">
            <summary>
            Route through. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.QueryType.SIG">
            <summary>
            
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.QueryType.SOA">
            <summary>
            Start of Authority. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.QueryType.SRV">
            <summary>
            Service record to specify the location of the server(s) for a specific protocol and domain.
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.QueryType.TXT">
            <summary>
            Text strings. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.QueryType.UnKnown">
            <summary>
            Unknown query type. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.QueryType.WKS">
            <summary>
            Well known service description. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.QueryType.X25">
            <summary>
            X25 address. 
            </summary>
        </member>
        <member name="T:Aspose.Network.Dns.OptionCode">
            <summary>
            Represents the kind of query in the message. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.OptionCode.Standard">
            <summary>
            Standard query
            </summary>		
        </member>
        <member name="F:Aspose.Network.Dns.OptionCode.Inverse">
            <summary>
            Inverse query
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.OptionCode.Notify">
            <summary>
            Notify query
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.OptionCode.Status">
            <summary>
            Server status request
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.OptionCode.Update">
            <summary>
            Update request
            </summary>
        </member>
        <member name="T:Aspose.Network.Pop3.Pop3Authentication">
            <summary>
            Pop3 Authentication method
            </summary>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Authentication.Equals(System.Object)">
            <summary>
            Overrided.
            </summary>        
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Authentication.GetHashCode">
            <summary>
            Overrided.
            </summary>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Authentication.ToString">
            <summary>
            Overrided.
            </summary>
        </member>
        <member name="P:Aspose.Network.Pop3.Pop3Authentication.CramMD5">
            <summary>
            RFC 2195 CRAM-MD5 authentication
            </summary>
        </member>
        <member name="P:Aspose.Network.Pop3.Pop3Authentication.DigestMD5">
            <summary>
            RFC 2831 DIGEST-MD5 authentication
            </summary>
        </member>
        <member name="P:Aspose.Network.Pop3.Pop3Authentication.Plain">
            <summary>
            RFC 2595 TLS plaintext authentication
            </summary>
        </member>
        <member name="P:Aspose.Network.Pop3.Pop3Authentication.Login">
            <summary>
            Login authentication
            </summary>
        </member>
        <member name="P:Aspose.Network.Pop3.Pop3Authentication.ClearText">
            <summary>
            Clear text USER/PASS login
            </summary>
        </member>
        <member name="P:Aspose.Network.Pop3.Pop3Authentication.Auto">
            <summary>
            Auto detects the authentication methods.
            </summary>
        </member>
        <member name="T:Aspose.Network.Mail.InstantiateCompletedEventArgs">
            <summary>
            Represents the event for tempalte instantiation optioni completed.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.InstantiateCompletedEventArgs.AsyncResult">
            <summary>
            Gets the result of the asynchronous operation requested.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.InstantiateCompletedEventArgs.Messages">
            <summary>
            The E-Mail messages created from the template.
            </summary>
        </member>
        <member name="T:Aspose.Network.Mail.TemplateRoutine">
            <summary>
            Represents the routine used in the template file.
            </summary>
        </member>
        <member name="T:Aspose.Network.Mail.InstantiateCompletedEventHandler">
            <summary>
            Event handler for instantiating a template.
            </summary>
        </member>
        <member name="T:Aspose.Network.Mail.TemplateEngine">
             <summary>
             This class uses specified template to construct E-Mail messages.
            </summary>
            <remarks>
             
            </remarks>
             <example>
             <p>The example demonstrates how to use TemplateEngine to contruct E-Mail messages.</p>
             [C#]
             <code>
                static object GetSignature(object[] args)
                {
                    return "John Smith&lt;br&gt;Product Lead&lt;br&gt;Aspose Ltd.&lt;br&gt;" + DateTime.Now.ToShortDateString();
                }
                static void Main(string[] args)
                {
                    //create a new MailMessage instance as a template
                    MailMessage template = new MailMessage();
             
                    //add template field to subject
                    template.Subject = "Hello, #FirstName#";
                    template.From = "sale@aspose.com";
             
                    //add template field to receipt
                    template.To.Add(new MailAddress("#Receipt#", true));
             
                    //add template field to html body
                    //use GetSignment as the template routine, which will provide the same signment.
                    template.HtmlBody = "Dear #FirstName# #LastName#, &lt;br&gt;&lt;br&gt;Thank you for your interest in &lt;STRONG&gt;Aspose.Network&lt;/STRONG&gt;.&lt;br&gt;&lt;br&gt;Have fun with it.&lt;br&gt;&lt;br&gt;#GetSignature()#";
                    
                    //create a new TemplateEngine with the template message.
                    TemplateEngine engine = new TemplateEngine(template);
             
                    //register the GetSignment as a templet routine, for we use it in the template.
                    engine.RegisterRoutine("GetSignature", new TemplateRoutine(GetSignature));
            
                    //fill a DataTable as data source
                    DataTable dt = new DataTable();                        
                    dt.Columns.Add("Receipt", typeof(string));
                    dt.Columns.Add("FirstName", typeof(string));
                    dt.Columns.Add("LastName", typeof(string));          
            
                    DataRow dr;
                    dr = dt.NewRow();
                    dr["Receipt"] = "Nancy.Davolio&lt;Nancy@somedomain.com&gt;";
                    dr["FirstName"] = "Nancy";
                    dr["LastName"] = "Davolio";
                    dt.Rows.Add(dr);
                    dr = dt.NewRow();
                    dr["Receipt"] = "Andrew.Fuller&lt;Andrew@somedomain.com&gt;";
                    dr["FirstName"] = "Andrew";
                    dr["LastName"] = "Fuller";
                    dt.Rows.Add(dr);
                    dr = dt.NewRow();
                    dr["Receipt"] = "Janet.Leverling&lt;Janet@somedomain.com&gt;";
                    dr["FirstName"] = "Janet";
                    dr["LastName"] = "Leverling";          
                     dt.Rows.Add(dr);
             
                     MailMessageCollection messages;
                     try
                     {
                        //create the messages from the template and datasource.
                          messages= engine.Instantiate(dt);
                     }
                     catch (MailException ex)
                     {
                         System.Diagnostics.Debug.Write(ex.ToString());
                    }
                }
             </code>
             [VB]
             <code>
                Shared Function GetSignature(ByVal args() As Object) As Object
                    Return "John Smith&lt;br&gt;Product Lead&lt;br&gt;Aspose Ltd.&lt;br&gt;" + DateTime.Now.ToShortDateString()
                End Function
            
                Shared  Sub Main(ByVal args() As String)
                    'create a new MailMessage instance as a template
                    Dim template As MailMessage =  New MailMessage() 
             
                    'add template field to subject
                    template.Subject = "Hello, #FirstName#"
                    template.From = "sale@aspose.com"
            
                    'add template field to receipt
                    template.To.Add(New MailAddress("#Receipt#",true))
             
                    'add template field to html body
                    'use GetSignment as the template routine, which will provide the same signment.
                    template.HtmlBody = "Dear #FirstName# #LastName#, &lt;br&gt;&lt;br&gt;Thank you for your interest in <STRONG>Aspose.Network</STRONG>.&lt;br&gt;&lt;br&gt;Have fun with it.&lt;br&gt;&lt;br&gt;#GetSignature()#";
                    'create a new TemplateEngine with the template message.
                    Dim engine As TemplateEngine =  New TemplateEngine(template) 
             
                    'register the GetSignment as a templet routine, for we use it in the template.
                    engine.RegisterRoutine("GetSignature",New TemplateRoutine(GetSignature))
            
                    'fill a DataTable as data source
                     Dim dt As DataTable =  New DataTable() 
                    dt.Columns.Add("Receipt", Type.GetType(String))
                    dt.Columns.Add("FirstName", Type.GetType(String))
                    dt.Columns.Add("LastName", Type.GetType(String))          
             
                    Dim dr As DataRow
                    dr = dt.NewRow()
                     dr["Receipt"] = "Nancy.Davolio&lt;Nancy@somedomain.com&gt;"
                    dr("FirstName") = "Nancy"
                    dr("LastName") = "Davolio"
                    dt.Rows.Add(dr)
                    dr = dt.NewRow()
                    dr["Receipt"] = "Andrew.Fuller&lt;Andrew@somedomain.com&gt;"
                    dr("FirstName") = "Andrew"
                    dr("LastName") = "Fuller"
                    dt.Rows.Add(dr)
                    dr = dt.NewRow()
                    dr["Receipt"] = "Janet.Leverling&lt;Janet@somedomain.com&gt;"
                    dr("FirstName") = "Janet"
                    dr("LastName") = "Leverling"          
                     dt.Rows.Add(dr)
            
                     Dim messages As MailMessageCollection
                     Try
                        'create the messages from the template and datasource.
                          messages= engine.Instantiate(dt)
                     Catch ex As MailException
                         System.Diagnostics.Debug.Write(ex.ToString())
                     End Try
                End Sub
             </code>
             </example>
        </member>
        <member name="M:Aspose.Network.Mail.TemplateEngine.#ctor(System.String)">
            <summary>
            Creates a new instance for the class TemplateMessage with the eml format file.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.TemplateEngine.#ctor(Aspose.Network.Mail.MailMessage)">
            <summary>
            Creates a new instance for the class TemplateMessage with the specified MailMessage instance.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.TemplateEngine.RegisterRoutine(System.String,Aspose.Network.Mail.TemplateRoutine)">
            <summary>
            Registers the template routine to the temaplate engine.
            </summary>
            <example>
            [C#]
            <code>
            //Defined a function for processing your field(s)
            public object ToUpper(object[] args)
            {
            		string name = (string)args[0];
            		return name.ToUpper();
            }
             
            ...
            msg.TextBody = "Dear #FirstName#,#ToUpper(LastName)#  Hello #LastName#. Thanks";
            ...
            TemplateEngine engine = new TemplateEngine(msg);
            //Register your routine to templateengine
            engine.RegisterRoutine("ToUpper", new TemplateRoutine(ToUpper));
            
            </code>
            [VB]
            <code>
            'Defined a function for processing your field(s)
            Public Function ToPropertyName(ByVal args As Object()) As Object
            	Dim name As String = CStr(args(0))
            	Return name.ToUpper()
            End Function
            'Set up the template  ...
            msg.TextBody = "Dear #FirstName#,#ToUpper(LastName)#  Hello #LastName#. Thanks"
            '...
            TemplateEngine engine = new TemplateEngine(msg);
            'Register your routine to templateengine
            engine.RegisterRoutine("ToUpper", new TemplateRoutine(ToUpper));
            '...
            </code>
            </example>
            <param name="name">The name of the funciton.</param>
            <param name="routine">Delegate processing the data</param>
        </member>
        <member name="M:Aspose.Network.Mail.TemplateEngine.IsRoutineRegistered(System.String)">
            <summary>
            Determines if a name of template routine is registered in the template engine.
            </summary>
            <param name="name">The name that is used to register the template routine.</param>
            <returns>Returns True if the name is registered in the template engine, otherwise returns False.</returns>
        </member>
        <member name="M:Aspose.Network.Mail.TemplateEngine.UnregisterRoutine(System.String)">
            <summary>
            Unregister the template routine from the template engine by name.
            </summary>
            <param name="name">The name that is used to unregister the template routine.</param>
        </member>
        <member name="M:Aspose.Network.Mail.TemplateEngine.Merge(Aspose.Network.Mail.MailMessage)">
             <summary>
             Merge a source MailMessage with the template
             </summary>
             <example>
             The following exmaple demonstrates how to create e-mail message.
             [C#]
             <code>
                //create template messages
                MailMessage template = new MailMessage();
                template.From = "sale@aspose.com";
                //add template field for HtmlBody and with signature.
                template.HtmlBody = "#HtmlBody#&lt;br&gt;&lt;br&gt;John Smith&lt;br&gt;Product Lead&lt;br&gt;Aspose Ltd.&lt;br&gt;";
            
                //create E-Mail message
                MailMessage message = new MailMessage();
                message.To = "Nancy.Davolio&lt;Nancy@somedomain.com&gt;";
                message.HtmlBody = "Hello, Nancy,&lt;br&gt;&lt;br&gt;Nice to see you.";
            
                //create template engine
                TemplateEngine engine = new TemplateEngine(template);
             
                //merge the message with the template
                MailMessage result = engine.Merge(message);
                
                result.Save(@"merge.eml");
             </code>
             [VB.NET]
             <code>
                'create template messages
                Dim template As MailMessage =  New MailMessage() 
                template.From = "sale@aspose.com"
                'add template field for HtmlBody and with signature.
                template.HtmlBody = "#HtmlBody#&lt;br&gt;&lt;br&gt;John Smith&lt;br&gt;Product Lead&lt;br&gt;Aspose Ltd.&lt;br&gt;"
            
                'create E-Mail message
                Dim message As MailMessage =  New MailMessage() 
                message.To ="Nancy.Davolio&lt;Nancy@somedomain.com&gt;"
                message.HtmlBody = "Hello, Nancy,&lt;br&gt;&lt;br&gt;Nice to see you."
            
                'create template engine
                Dim engine As TemplateEngine =  New TemplateEngine(template) 
            
                'merge the message with the template
                result.Save(@"merge.eml")
             </code>
             </example>
             <param name="source">The source MailMessage</param>
             <returns>The MailMessage merged with template</returns>
        </member>
        <member name="M:Aspose.Network.Mail.TemplateEngine.Reset">
            <summary>
            Reset.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.TemplateEngine.Instantiate(System.Data.DataTable,System.Data.Common.DataColumnMappingCollection)">
            <summary>
            Instantiates the template with a DataTable as datasource.
            </summary>
            <param name="table">The DataTable, which contains the source data to instantiate the template.</param>
            <param name="mappings">The DataColumnMappingCollection, which represents the mapping between the source column in DataTable and target field in template</param>
            <returns>A MailMessageCollection that generated by the template and the datasource.</returns>
        </member>
        <member name="M:Aspose.Network.Mail.TemplateEngine.InstantiateAsync(System.Data.DataTable,System.Data.Common.DataColumnMappingCollection,System.Object)">
            <summary>
            Asynchronously instantiates the template with a DataTable as datasource.
            </summary>
            <param name="table">The DataTable, which contains the source data to instantiate the template.</param>
            <param name="mappings">The DataColumnMappingCollection, which represents the mapping between the source column in DataTable and target field in template</param>
            <param name="userToken">The user token for the asynchronous operation.</param>
        </member>
        <member name="M:Aspose.Network.Mail.TemplateEngine.Instantiate(System.Data.DataTable)">
            <summary>
            Instantiates the template with a DataTable as datasource.
            </summary>
            <param name="table">The DataTable, which contains the source data to instantiate the template.</param>
            <returns>A MailMessageCollection that generated by the template and the datasource.</returns>
        </member>
        <member name="M:Aspose.Network.Mail.TemplateEngine.InstantiateAsync(System.Data.DataTable,System.Object)">
            <summary>
            Asynchronously instantiates the template with a DataTable as datasource.
            </summary>
            <param name="table">The DataTable, which contains the source data to instantiate the template.</param>
            <param name="userToken">The user token for the asynchronous operation.</param>
        </member>
        <member name="M:Aspose.Network.Mail.TemplateEngine.Instantiate(System.Data.DataRowCollection,System.Data.Common.DataColumnMappingCollection)">
            <summary>
            Instantiates the template with a DataRowCollection as datasource.
            </summary>
            <param name="rows">The DataRowCollection, which contains the source data to instantiate the template.</param>
            <param name="mappings">The DataColumnMappingCollection, which represents the mapping between the source column in data source and target field in template</param>
            <returns>A MailMessageCollection that generated by the template and the datasource.</returns>
        </member>
        <member name="M:Aspose.Network.Mail.TemplateEngine.InstantiateAsync(System.Data.DataRowCollection,System.Object)">
            <summary>
            Instantiates the template with a DataRowCollection as datasource.
            </summary>
            <param name="rows">The DataRowCollection, which contains the source data to instantiate the template.</param>
            <param name="userToken">The user token for the asynchronous operation.</param>
        </member>
        <member name="M:Aspose.Network.Mail.TemplateEngine.InstantiateAsync(System.Data.DataRowCollection,System.Data.Common.DataColumnMappingCollection,System.Object)">
            <summary>
            Instantiates the template with a DataRowCollection as datasource.
            </summary>
            <param name="rows">The DataRowCollection, which contains the source data to instantiate the template.</param>
            <param name="mappings">The DataColumnMappingCollection, which represents the mapping between the source column in data source and target field in template</param>
            <param name="userToken">The user token for the asynchronous operation.</param>
        </member>
        <member name="M:Aspose.Network.Mail.TemplateEngine.Instantiate(System.Data.DataRowCollection)">
            <summary>
            Instantiates the template with a DataRowCollection as datasource.
            </summary>
            <param name="rows">The DataRowCollection, which contains the source data to instantiate the template.</param>
            <returns>A MailMessageCollection that generated by the template and the datasource.</returns>
        </member>
        <member name="M:Aspose.Network.Mail.TemplateEngine.Instantiate(System.Data.IDataReader)">
            <summary>
            Instantiates the template with a IDataReader as datasource.
            </summary>
            <param name="reader">The IDataReader, which will provide the source data to instantiate the template.</param>
            <returns>A MailMessageCollection that generated by the template and the datasource.</returns>
        </member>
        <member name="M:Aspose.Network.Mail.TemplateEngine.InstantiateAsync(System.Data.IDataReader,System.Data.Common.DataColumnMappingCollection,System.Object)">
            <summary>
            Instantiates the template with a IDataReader as datasource.
            </summary>
            <param name="reader">The IDataReader, which will provide the source data to instantiate the template.</param>
            <param name="mappings">The DataColumnMappingCollection, which represents the mapping between the source column in data source and target field in template</param>
            <param name="userToken">The user token for the asynchronous operation.</param>
        </member>
        <member name="M:Aspose.Network.Mail.TemplateEngine.Instantiate(System.Data.IDataReader,System.Data.Common.DataColumnMappingCollection)">
            <summary>
            Instantiates the template with a IDataReader as datasource.
            </summary>
            <param name="reader">The IDataReader, which will provide the source data to instantiate the template.</param>
            <param name="mappings">The DataColumnMappingCollection, which represents the mapping between the source column in data source and target field in template</param>
            <returns>A MailMessageCollection that generated by the template and the datasource.</returns>
        </member>
        <member name="M:Aspose.Network.Mail.TemplateEngine.InstantiateAsync(System.Data.IDataReader,System.Object)">
            <summary>
            Instantiates the template with a IDataReader as datasource.
            </summary>
            <param name="reader">The IDataReader, which will provide the source data to instantiate the template.</param>
            <param name="userToken">The user token for the asynchronous operation.</param>
        </member>
        <member name="M:Aspose.Network.Mail.TemplateEngine.EndInstantiate(System.IAsyncResult)">
            <summary>
            Completes the specified asynchronous instantiation operation.
            </summary>
            <param name="asyncResult">The IAsyncResult that identifies the asynchronous receive operation to finish, and from which to retrieve an end result.</param>
            <returns>The MailMessage collection generated by the instantiation operation.</returns>
        </member>
        <member name="M:Aspose.Network.Mail.TemplateEngine.BeginInstantiate(System.Data.DataTable,System.Data.Common.DataColumnMappingCollection,System.AsyncCallback,System.Object)">
             <summary>
             Initiates an asynchronous Instantiate operation with a DataTable as datasource.
             </summary>
             <param name="table">The DataTable, which contains the source data to instantiate the template.</param>
             <param name="mappings">The DataColumnMappingCollection, which represents the mapping between the source column in DataTable and target field in template</param>
             <param name="callback">The AsyncCallback that will receive the notification of the asynchronous operation completion. </param>
             <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Mail.TemplateEngine.BeginInstantiate(System.Data.DataTable,System.AsyncCallback,System.Object)">
             <summary>
             Initiates an asynchronous Instantiate operation with a DataTable as datasource.
             </summary>
             <param name="table">The DataTable, which contains the source data to instantiate the template.</param>
             <param name="callback">The AsyncCallback that will receive the notification of the asynchronous operation completion. </param>
             <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Mail.TemplateEngine.BeginInstantiate(System.Data.DataRowCollection,System.Data.Common.DataColumnMappingCollection,System.AsyncCallback,System.Object)">
             <summary>
             Initiates an asynchronous Instantiate operation with a DataRowCollection as datasource.
             </summary>
             <param name="rows">The DataRowCollection, which contains the source data to instantiate the template.</param>
             <param name="mappings">The DataColumnMappingCollection, which represents the mapping between the source column in data source and target field in template</param>
             <param name="callback">The AsyncCallback that will receive the notification of the asynchronous operation completion. </param>
             <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Mail.TemplateEngine.BeginInstantiate(System.Data.DataRowCollection,System.AsyncCallback,System.Object)">
             <summary>
             Initiates an asynchronous Instantiate operation with a DataRowCollection as datasource.
             </summary>
             <param name="rows">The DataRowCollection, which contains the source data to instantiate the template.</param>
             <param name="callback">The AsyncCallback that will receive the notification of the asynchronous operation completion. </param>
             <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Mail.TemplateEngine.BeginInstantiate(System.Data.IDataReader,System.Data.Common.DataColumnMappingCollection,System.AsyncCallback,System.Object)">
             <summary>
             Initiates an asynchronous Instantiate operation with a IDataReader as datasource.
             </summary>
             <param name="reader">The IDataReader, which will provide the source data to instantiate the template.</param>
             <param name="mappings">The DataColumnMappingCollection, which represents the mapping between the source column in data source and target field in template</param>
             <param name="callback">The AsyncCallback that will receive the notification of the asynchronous operation completion. </param>
             <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Mail.TemplateEngine.BeginInstantiate(System.Data.IDataReader,System.AsyncCallback,System.Object)">
             <summary>
             Initiates an asynchronous Instantiate operation with a IDataReader as datasource.
             </summary>
             <param name="reader">The IDataReader, which will provide the source data to instantiate the template.</param>
             <param name="callback">The AsyncCallback that will receive the notification of the asynchronous operation completion. </param>
             <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="P:Aspose.Network.Mail.TemplateEngine.TemplateMessage">
            <summary>
            Gets the template message.
            </summary>
        </member>
        <member name="E:Aspose.Network.Mail.TemplateEngine.InstantiateCompleted">
            <summary>
            Occurs if the an asynchronous Instantiate operation is completed.
            </summary>
        </member>
        <member name="T:Aspose.Network.Mail.Calendaring.CalendarMonth">
            <summary>
            Represents the month of calendar.
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.Calendaring.CalendarMonth.April">
            <summary>
            April.
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.Calendaring.CalendarMonth.August">
            <summary>
            Auguest.
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.Calendaring.CalendarMonth.December">
            <summary>
            December.
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.Calendaring.CalendarMonth.February">
            <summary>
            February.
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.Calendaring.CalendarMonth.January">
            <summary>
            January.
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.Calendaring.CalendarMonth.July">
            <summary>
            July.
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.Calendaring.CalendarMonth.June">
            <summary>
            June.
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.Calendaring.CalendarMonth.March">
            <summary>
            March.
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.Calendaring.CalendarMonth.May">
            <summary>
            May.
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.Calendaring.CalendarMonth.Novemeber">
            <summary>
            Novemeber.
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.Calendaring.CalendarMonth.October">
            <summary>
            October.
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.Calendaring.CalendarMonth.September">
            <summary>
            September.
            </summary>
        </member>
        <member name="T:Aspose.Network.Mail.AttachmentCollection">
            <summary>
            Stores attachments to be sent as part of an e-mail message.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.AttachmentCollection.#ctor">
            <summary>
            Initializes a new instance of AttachmentCollection class.
            </summary>
        </member>
        <member name="T:Aspose.Network.Security.Cryptography.X509Certificates.X509KeyUsageFlags">
            <summary>
            Defines how the certificate key can be used. If this value is not defined, the key can be used for any purpose.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509KeyUsageFlags.CrlSign">
            <summary>
            The key can be used to sign a certificate revocation list (CRL).
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509KeyUsageFlags.DataEncipherment">
            <summary>
            The key can be used for data encryption.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509KeyUsageFlags.DecipherOnly">
            <summary>
            The key can be used for decryption only.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509KeyUsageFlags.DigitalSignature">
            <summary>
            The key can be used as a digital signature.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509KeyUsageFlags.EncipherOnly">
            <summary>
            The key can be used for encryption only.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509KeyUsageFlags.KeyAgreement">
            <summary>
            The key can be used to determine key agreement, such as a key created using the Diffie-Hellman key agreement algorithm.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509KeyUsageFlags.KeyCertSign">
            <summary>
            The key can be used to sign certificates.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509KeyUsageFlags.KeyEncipherment">
            <summary>
            The key can be used for key encryption.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509KeyUsageFlags.NonRepudiation">
            <summary>
            The key can be used for authentication.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509KeyUsageFlags.None">
            <summary>
            No key usage parameters.
            </summary>
        </member>
        <member name="T:Aspose.Network.Security.Cryptography.X509Certificates.X509Certificate2Collection">
            <summary>
            Represents a collection of X509Certificate2 objects. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Aspose.Network.Security.Cryptography.X509Certificates.X509Certificate2Collection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies a range of elements.
            </summary>
            <param name="array">The target array.</param>
            <param name="index">The zero-based index from the source.</param>
        </member>
        <member name="M:Aspose.Network.Security.Cryptography.X509Certificates.X509Certificate2Collection.GetEnumerator">
            <summary>
            Gets an Enumerator of the colleciton.
            </summary>
            <returns>An Enumerator.</returns>
        </member>
        <member name="M:Aspose.Network.Security.Cryptography.X509Certificates.X509Certificate2Collection.#ctor">
            <summary>
            Initializes a new instance of the X509Certificate2Collection class without any X509Certificate2 information.
            </summary>
        </member>
        <member name="M:Aspose.Network.Security.Cryptography.X509Certificates.X509Certificate2Collection.Add(Aspose.Network.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Adds an object to the end of the X509Certificate2Collection.
            </summary>
            <param name="certificate">An X.509 certificate represented as an X509Certificate2 object. </param>
            <returns>The X509Certificate2Collection index at which the certificate has been added.</returns>
        </member>
        <member name="M:Aspose.Network.Security.Cryptography.X509Certificates.X509Certificate2Collection.Clear">
            <summary>
            Removes all objects from the collection.
            </summary>
        </member>
        <member name="M:Aspose.Network.Security.Cryptography.X509Certificates.X509Certificate2Collection.Contains(Aspose.Network.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Gets a value indicating whether the current X509Certificate2Collection contains the specified X509Certificate2.
            </summary>
            <param name="value">The X509Certificate2 to locate. </param>
            <returns>true if the X509Certificate2 is contained in this collection; otherwise, false.</returns>
        </member>
        <member name="M:Aspose.Network.Security.Cryptography.X509Certificates.X509Certificate2Collection.CopyTo(Aspose.Network.Security.Cryptography.X509Certificates.X509Certificate2[],System.Int32)">
            <summary>
            Copies the X509Certificate2 values in the current X509Certificate2Collection to a one-dimensional Array instance at the specified index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the values copied from X509Certificate2Collection.</param>
            <param name="index">The index into array to begin copying. </param>
        </member>
        <member name="M:Aspose.Network.Security.Cryptography.X509Certificates.X509Certificate2Collection.Remove(Aspose.Network.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Removes a specific X509Certificate2 from the current X509Certificate2Collection.
            </summary>
            <param name="value">The X509Certificate2 to remove from the current X509CertificateCollection.</param>
        </member>
        <member name="P:Aspose.Network.Security.Cryptography.X509Certificates.X509Certificate2Collection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="P:Aspose.Network.Security.Cryptography.X509Certificates.X509Certificate2Collection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the System.Collections.ArrayList is synchronized (thread safe).        
            </summary>
        </member>
        <member name="P:Aspose.Network.Security.Cryptography.X509Certificates.X509Certificate2Collection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="P:Aspose.Network.Security.Cryptography.X509Certificates.X509Certificate2Collection.Item(System.Int32)">
            <summary>
            Gets or sets the entry at the specified index of the current X509Certificate2Collection.
            </summary>
            <param name="index">The zero-based index of the entry to locate in the current X509Certificate2Collection. </param>
            <returns>The X509Certificate2 at the specified index of the current X509Certificate2Collection.</returns>
        </member>
        <member name="T:Aspose.Network.WhoIs.WhoIsClient">
            <summary>
            <p>The WhoIsClient calss allows applications to query the domain information by using the Who Is Protocol (WHOIS).</p>
             
            <p>The WhoIsClient class fully supports the Asynchronous and Synchronous programming model.</p>
            </summary>
            <example>
            <p>The following exmaple demonstrates how to use WhoIsClient class to query domain information from WHOIS servers.</p>
            [C#]
            <code>
            //creates a WhoIsClient object with specified WHOIS server.
            WhoIsClient client = new WhoIsClient("whois.crsnic.net");
            try
            {
            	//query the domain
            	Console.WriteLine(client.Query("aspose.com"));
            }
            catch (Exception ex)
            {
            	System.Diagnostics.Debug.WriteLine(ex.ToString());
            }
            </code>
            [VB.NET]
            <code>
            '//creates a WhoIsClient object with specified WHOIS server.
            Dim client As WhoIsClient =  New WhoIsClient("whois.crsnic.net")
            Try
            	'query the domain
            	Console.WriteLine(client.Query("aspose.com"))
            Catch ex As Exception
            	System.Diagnostics.Debug.WriteLine(ex.ToString())
            End Try
            </code>
            </example>
        </member>
        <member name="M:Aspose.Network.WhoIs.WhoIsClient.#ctor(System.Net.IPEndPoint)">
            <summary>
            Initializes an instance of the WhoIsClient class.
            </summary>
            <param name="hostEndPoint">The host end point.</param>
        </member>
        <member name="M:Aspose.Network.WhoIs.WhoIsClient.#ctor(System.String)">
            <summary>
            Initializes an instance of the WhoIsClient class.
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="M:Aspose.Network.WhoIs.WhoIsClient.#ctor(System.String,System.Int32)">
            <summary>
            Initializes an instance of the WhoIsClient class.
            </summary>
            <param name="host">The host.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:Aspose.Network.WhoIs.WhoIsClient.BeginQuery(System.String)">
            <summary>
            Begin querying a domain, paired with EndQuery method
            </summary>
            <param name="domain">The domain name.</param>
            <returns>An IAsyncResult that references the asynchronous operation.</returns>
        </member>
        <member name="M:Aspose.Network.WhoIs.WhoIsClient.BeginQuery(System.String,System.Object)">
            <summary>
            Begin querying a domain, paired with EndQuery method
            </summary>
            <param name="domain">The domain name.</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous operation.</returns>
        </member>
        <member name="M:Aspose.Network.WhoIs.WhoIsClient.BeginQuery(System.String,System.Object,System.AsyncCallback)">
            <summary>
            Begin querying a domain, paired with EndQuery method
            </summary>
            <param name="domain">The domain name.</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <param name="asyncCallback">The AsyncCallback delegate. </param>
            <returns>An IAsyncResult that references the asynchronous operation.</returns>
        </member>
        <member name="M:Aspose.Network.WhoIs.WhoIsClient.EndQuery(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous query.
            </summary>
            <param name="asyncResult"></param>
            <returns>An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</returns>
        </member>
        <member name="M:Aspose.Network.WhoIs.WhoIsClient.Query(System.String)">
            <summary>
            Send a domain query to the WHOIS server.
            </summary>
            <param name="domain">The domain name.</param>
            <returns>The whois reply.</returns>
        </member>
        <member name="M:Aspose.Network.WhoIs.WhoIsClient.Dispose">
            <summary>
            Releases the unmanaged resources used by the WhoIsClient.
            </summary>
        </member>
        <member name="E:Aspose.Network.WhoIs.WhoIsClient.QueryCompleted">
            <summary>
            Occurs if the an asynchronous domain querying operation is completed.
            </summary>
        </member>
        <member name="P:Aspose.Network.WhoIs.WhoIsClient.Host">
            <summary>
            Gets or sets the host.
            </summary>
        </member>
        <member name="P:Aspose.Network.WhoIs.WhoIsClient.Port">
            <summary>
            Gests or sets the port.
            </summary>
        </member>
        <member name="P:Aspose.Network.WhoIs.WhoIsClient.ReceiveTimeout">
            <summary>
            Gets or sets the amount of time a WhoIsClient will wait to receive data once a read operation is initiated. The default value is 0.
            </summary>
        </member>
        <member name="P:Aspose.Network.WhoIs.WhoIsClient.SendTimeout">
            <summary>
            Gets or sets the amount of time a WhoIsClient will wait for a send operation to complete successfully. The default value is 0.
            </summary>
        </member>
        <member name="P:Aspose.Network.WhoIs.WhoIsClient.SynchronizingObject">
            <summary>
            Gets or sets the synchronizing object.
            </summary>
        </member>
        <member name="T:Aspose.Network.Logging.LoggingException">
            <summary>
            The exception that is thrown when error is found in logging.
            </summary>
        </member>
        <member name="M:Aspose.Network.Logging.LoggingException.#ctor">
            <summary>
            Initializes a new instance of the LoggingException class.
            </summary>
        </member>
        <member name="M:Aspose.Network.Logging.LoggingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the LoggingException class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Aspose.Network.Logging.LoggingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the LoggingException class.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Aspose.Network.Dns.MDResourceRecord">
            <summary>
            Represents a MD DNS resource record
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.MDResourceRecord.#ctor">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.MDResourceRecord">MDResourceRecord</see>.
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.MDResourceRecord.#ctor(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.MDResourceRecord">MDResourceRecord</see>.
            </summary>
            <param name="buffer">The arry of unsigned bytes from which to create.</param>
            <param name="index">The index into buffer at which this resource record begins</param>
            <param name="count">The length of the bytes to create this resource record</param>
        </member>
        <member name="P:Aspose.Network.Dns.MDResourceRecord.MailAgent">
            <summary>
            Gets or sets the mail agent
            </summary>
        </member>
        <member name="T:Aspose.Network.Mail.MailSensitivity">
            <summary>
            Mail Priority can be "normal", "urgent" or "non-urgent" and can influence transmission speed and delivery. 
            Defined in RFC 1327
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.MailSensitivity.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.MailSensitivity.Normal">
            <summary>
            Normal.
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.MailSensitivity.Personal">
            <summary>
            Personal.
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.MailSensitivity.Private">
            <summary>
            Private.
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.MailSensitivity.CompanyConfidential">
            <summary>
            CompanyConfidential.
            </summary>
        </member>
        <member name="T:Aspose.Network.Mail.Attachment">
            <summary>
            Represents an attachment to an e-mail. 
            </summary>
            <remarks><p>The Attachment class is used with the MailMessage class. All messages include a Body, which contains the content of the message. In addition to the body, you might want to send additional files. These are sent as attachments and are represented as Attachment instances. To add an attachment to a mail message, add it to the MailMessage.Attachments collection.</p>
            </remarks>
            <example>
            [C#]
            <code>
            	// Create an empty message.
            	Aspose.Network.Mail.MailMessage msg = new Aspose.Network.Mail.MailMessage();
            	// Perform different message composing actions.
            	// ...
            	// Create an attachment and insert it into message.
            	Aspose.Network.Mail.Attachment attachment = new Aspose.Network.Mail.Attachment("photo1.jpg");
            	msg.AddAttachment(attachment);
            	msg.AddAttachment(new Attachment( "photo2.jpg"));
            	msg.AddAttachment(new Attachment( "photo3.jpg"));
            	msg.AddAttachment(new Attachment( "photo4.jpg"));
            	//Remove the second attachment
            	msg.Attachments.RemoveAt(2);
            	....
            </code>
            [VB.NET]
            <code>
            	'Create and MailMessag Object
            	Dim message1 As New MailMessage("somebody@somedomain.com", "onebody@onedomain.com", "Hello", "Hello, nice to know you!")
            	'....
            	'Add Attachments
            	Dim attachment As Aspose.Network.Mail.Attachment = new Aspose.Network.Mail.Attachment("photo1.jpg")
            	msg.AddAttachment(attachment)
            	msg.AddAttachment(New Attachment( "photo2.jpg"))
            	msg.AddAttachment(New Attachment( "photo3.jpg"))
            	msg.AddAttachment(New Attachment( "photo4.jpg"))
            	'Remove the second attachment
            	msg.Attachments.RemoveAt(2)
            ...
            </code>
            </example>
        </member>
        <member name="T:Aspose.Network.Mail.AttachmentBase">
            <summary>
            Base class that represents an email attachment. Classes Attachment, Alternateview, and LinkedResource derive from this class. 
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.AttachmentBase.Dispose">
            <summary>
            Releases the unmanaged resources used by the AttachmentBase.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.AttachmentBase.ContentId">
            <summary>
            Gets or sets the MIME content ID for this attachment.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.AttachmentBase.ContentType">
            <summary>
            Gets the content type of this attachment.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.AttachmentBase.MediaType">
            <summary>
            The MIME Content-Header information for this attachment.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.AttachmentBase.TransferEncoding">
            <summary>
            Gets or sets the encoding of this attachment.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.Attachment.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Attachment class with the specified content string. 
            </summary>
            <param name="fileName">A String that contains a file path to use to create this attachment.</param>
        </member>
        <member name="M:Aspose.Network.Mail.Attachment.#ctor(System.IO.Stream,System.String)">
            <summary>
            Initializes a new instance of the Attachment class with the specified stream, name, and MIME type information. 
            </summary>
            <param name="contentStream">A readable Stream that contains the content for this attachment.</param>
            <param name="name">A String that contains the value for the Name property of the ContentType associated with this attachment. This value can be a null reference (Nothing in Visual Basic).</param>
        </member>
        <member name="M:Aspose.Network.Mail.Attachment.#ctor(System.IO.Stream,System.String,System.String)">
            <summary>
            Initializes a new instance of the Attachment class with the specified stream, name, and MIME type information. 
            </summary>
            <param name="contentStream">A readable Stream that contains the content for this attachment.</param>
            <param name="name">A String that contains the value for the Name property of the ContentType associated with this attachment. This value can be a null reference (Nothing in Visual Basic).</param>
            <param name="mediaType">A String that contains the MIME Content-Header information for this attachment. </param>
        </member>
        <member name="M:Aspose.Network.Mail.Attachment.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the Attachment class with the specified filename,name and MIME type information. 
            </summary>
            <param name="fileName">A string that specified the filename.</param>
            <param name="name">A String that contains the value for the Name property of the ContentType associated with this attachment. This value can be a null reference (Nothing in Visual Basic).</param>
            <param name="mediaType">A String that contains the MIME Content-Header information for this attachment. </param>
        </member>
        <member name="M:Aspose.Network.Mail.Attachment.Save(System.IO.Stream)">
            <summary>
            Saves this attachment to specified Stream. 
            </summary>
            <param name="stream">Stream to save this attachment</param>
        </member>
        <member name="M:Aspose.Network.Mail.Attachment.Save(System.String)">
            <summary>
            Saves this attachment by specified the filename
            </summary>
            <param name="fileName">String that indicated the filename</param>
        </member>
        <member name="M:Aspose.Network.Mail.Attachment.SaveRawContent(System.IO.Stream)">
            <summary>
            Saves the raw content of the attachment.
            </summary>
            <param name="stream">Stream to save this attachment</param>
        </member>
        <member name="F:Aspose.Network.Mail.Attachment.EmptyAttachment">
            <summary>
            Represents an attachment with no data.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.Attachment.CreateAttachmentFromString(System.String,Aspose.Network.Mime.ContentType)">
            <summary>
            Creates a mail attachment using the content from the specified string, and the specified ContentType. 
            </summary>
            <param name="content">A String that contains the content for this attachment.</param>
            <param name="contentType">A ContentType object that represents the Multipurpose Internet Mail Exchange (MIME) protocol Content-Type header to be used</param>
            <returns>An object of type Attachment. </returns>
        </member>
        <member name="M:Aspose.Network.Mail.Attachment.CreateAttachmentFromString(System.String,System.String)">
            <summary>
            Creates a mail attachment using the content from the specified string, and the specified MIME content type name. 
            </summary>
            <param name="content">A String that contains the content for this attachment.</param>
            <param name="name">The MIME content type name value in the content type associated with this attachment.</param>
            <returns>An object of type Attachment. </returns>
        </member>
        <member name="M:Aspose.Network.Mail.Attachment.CreateAttachmentFromString(System.String,System.String,System.Text.Encoding,System.String)">
            <summary>
            Creates a mail attachment using the content from the specified string, the specified MIME content type name, character encoding, and MIME header information for the attachment. 
            </summary>
            <param name="content">A String that contains the content for this attachment.</param>
            <param name="name">The MIME content type name value in the content type associated with this attachment.</param>
            <param name="contentEncoding">Specified the ContentEncoding.</param>
            <param name="mediaType">A String that contains the MIME Content-Header information for this attachment</param>
            <returns>An object of type Attachment. </returns>
        </member>
        <member name="P:Aspose.Network.Mail.Attachment.Name">
            <summary>
            Gets or Sets the filename of the Attachment
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.Attachment.NameEncoding">
            <summary>
            Gets or Sets the Encoding for the fileName
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.Attachment.ContentDisposition">
            <summary>
            Gets the MIME content disposition for this attachment.
            </summary>
        </member>
        <member name="T:Aspose.Network.Security.Cryptography.X509Certificates.StoreLocation">
            <summary>
            Specifies the location of the X.509 certificate store.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.StoreLocation.CurrentService">
            <summary>
            CurrentService.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser">
            <summary>
            CurrentUser.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.StoreLocation.CurrentUserGroupPolicy">
            <summary>
            CurrentUserGroupPolicy.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine">
            <summary>
            LocalMachine.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.StoreLocation.LocalMachineEnterprise">
            <summary>
            LocalMachineEnterprise.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.StoreLocation.LocalMachineGroupPolicy">
            <summary>
            LocalMachineGroupPolicy.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.StoreLocation.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.StoreLocation.Services">
            <summary>
            Services.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.StoreLocation.Users">
            <summary>
            Users.
            </summary>
        </member>
        <member name="T:Aspose.Network.Icmp.SendCompletedEventHandler">
            <summary>
            Represents the method that will handle the SendCompleted event of an IcmpClient object.
            </summary>
        </member>
        <member name="T:Aspose.Network.Icmp.TimestampMessage">
            <summary>
            Represents the timstamp message in ICMP protocol.
            </summary>
        </member>
        <member name="T:Aspose.Network.Icmp.IcmpMessage">
            <summary>
            Represents the request/response message in ICMP protocol.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.IcmpMessage.Checksum">
            <summary>
            Gets or sets the Checksum.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.IcmpMessage.Code">
            <summary>
            Gets or sets the code.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.IcmpMessage.MessageType">
            <summary>
            Gets or sets the message type.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.IcmpMessage.DataBlock">
            <summary>
            Gets or sets the data block.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.IcmpMessage.DestinationAddress">
            <summary>
            Gets the message destination address.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.IcmpMessage.Flags">
            <summary>
            Gets the flags.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.IcmpMessage.FragmentOffset">
            <summary>
            Gets the offset of the fragment.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.IcmpMessage.HeaderChecksum">
            <summary>
            Gets the header checksum.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.IcmpMessage.HeaderLength">
            <summary>
            Gets the length of header.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.IcmpMessage.HeaderLengthInBytes">
            <summary>
            Gets the length of header in bytes.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.IcmpMessage.Identification">
            <summary>
            Gets the Identification.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.IcmpMessage.Protocol">
            <summary>
            Gets the protocol.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.IcmpMessage.SourceAddress">
            <summary>
            Gets the source address.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.IcmpMessage.TimeToLive">
            <summary>
            Gets the time to live.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.IcmpMessage.TotalLength">
            <summary>
            Gets the total length.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.IcmpMessage.TypeOfService">
            <summary>
            Gets the service type.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.IcmpMessage.Version">
            <summary>
            Gets the version.
            </summary>
        </member>
        <member name="M:Aspose.Network.Icmp.TimestampMessage.#ctor">
            <summary>
            Creates a new instance of TimestampMessage with default parameters.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.TimestampMessage.Identifier">
            <summary>
            Gets or sets the identifier.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.TimestampMessage.OriginateTimestamp">
            <summary>
            Gets or sets originate timestamp.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.TimestampMessage.ReceiveTimestamp">
            <summary>
            Gets or sets receive timestamp.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.TimestampMessage.SequenceNumber">
            <summary>
            Gets or sets sequence number.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.TimestampMessage.TransmitTimestamp">
            <summary>
            Gets or sets transmit timestamp.
            </summary>
        </member>
        <member name="T:Aspose.Network.Outlook.MapiAttachmentCollection">
            <summary>
            Represents a collection of MapiAttachment objects. 
            </summary>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiAttachmentCollection.#ctor">
            <summary>
            Initializes a new instance of the MapiAttachmentCollection class.
            </summary>
        </member>
        <member name="T:Aspose.Network.Dns.ResourceRecordCollection">
            <summary>
            Represents a collection of <see cref="T:Aspose.Network.Dns.ResourceRecord">ResourceRecord</see> objects.
            </summary>
            <remarks>
            Provides a simple collection object that can represent a set of <see cref="T:Aspose.Network.Dns.ResourceRecord">ResourceRecord</see> objects.
            The <see cref="T:Aspose.Network.Dns.ResourceRecordCollection">ResourceRecordCollection</see> class provides a simple collection object that can be used to store a set of <see cref="T:Aspose.Network.Dns.ResourceRecord">ResourceRecord</see> objects.	
            </remarks>
        </member>
        <member name="M:Aspose.Network.Dns.ResourceRecordCollection.#ctor">
            <summary>
            Initialize a new instance of the class <see cref="T:Aspose.Network.Dns.ResourceRecordCollection">ResourceRecordCollection</see>.
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.ResourceRecordCollection.AddRange(Aspose.Network.Dns.ResourceRecord[])">
            <summary>
            Copies the elements of the specified array to the end of the collection.
            </summary>
            <param name="value">An array of type <see cref="T:Aspose.Network.Dns.ResourceRecord">ResourceRecord</see> containing the objects to add to the collection. </param>
        </member>
        <member name="M:Aspose.Network.Dns.ResourceRecordCollection.Add(Aspose.Network.Dns.ResourceRecord)">
            <summary>
            Adds the specified <see cref="T:Aspose.Network.Dns.ResourceRecord">ResourceRecord</see> to the collection.
            </summary>
            <param name="value">The <see cref="T:Aspose.Network.Dns.ResourceRecord">ResourceRecord</see> to add.</param>
        </member>
        <member name="M:Aspose.Network.Dns.ResourceRecordCollection.Contains(Aspose.Network.Dns.ResourceRecord)">
            <summary>
            Gets a value indicating whether the collection contains the specified <see cref="T:Aspose.Network.Dns.ResourceRecord">ResourceRecord</see>.
            </summary>
            <param name="value">The <see cref="T:Aspose.Network.Dns.ResourceRecord">ResourceRecord</see> to search for in the collection. </param>
            <returns><b>true</b> if the <see cref="T:Aspose.Network.Dns.ResourceRecord">ResourceRecord</see> is contained in the collection; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Aspose.Network.Dns.ResourceRecordCollection.IndexOf(Aspose.Network.Dns.ResourceRecord)">
            <summary>
            Gets the index in the collection of the specified <see cref="T:Aspose.Network.Dns.ResourceRecord">ResourceRecord</see>, if it exists in the collection.
            </summary>
            <param name="value">The <see cref="T:Aspose.Network.Dns.ResourceRecord">ResourceRecord</see> to locate in the collection. </param>
            <returns>The index in the collection of the specified object, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Aspose.Network.Dns.ResourceRecordCollection.IndexOf(Aspose.Network.Dns.ResourceRecord,System.Int32)">
            <summary>
            Gets the index in the collection of the specified <see cref="T:Aspose.Network.Dns.ResourceRecord">ResourceRecord</see>, if it exists in the collection.
            </summary>
            <param name="value">The <see cref="T:Aspose.Network.Dns.ResourceRecord">ResourceRecord</see> to locate in the collection. </param>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <returns>The index in the collection of the specified object, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Aspose.Network.Dns.ResourceRecordCollection.IndexOf(Aspose.Network.Dns.ResourceRecord,System.Int32,System.Int32)">
            <summary>
            Gets the index in the collection of the specified <see cref="T:Aspose.Network.Dns.ResourceRecord">ResourceRecord</see>, if it exists in the collection.
            </summary>
            <param name="value">The <see cref="T:Aspose.Network.Dns.ResourceRecord">ResourceRecord</see> to locate in the collection. </param>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="count">The number of elements in the section to search. </param>
            <returns>The index in the collection of the specified object, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Aspose.Network.Dns.ResourceRecordCollection.Insert(System.Int32,Aspose.Network.Dns.ResourceRecord)">
            <summary>
            Inserts the specified <see cref="T:Aspose.Network.Dns.ResourceRecord">ResourceRecord</see> object into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index where the specified <see cref="T:Aspose.Network.Dns.ResourceRecord">ResourceRecord</see> should be inserted. </param>
            <param name="value">The <see cref="T:Aspose.Network.Dns.ResourceRecord">ResourceRecord</see> to insert. </param>
        </member>
        <member name="M:Aspose.Network.Dns.ResourceRecordCollection.Sort(System.Collections.IComparer)">
            <summary>
            
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="P:Aspose.Network.Dns.ResourceRecordCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Aspose.Network.Dns.ResourceRecord">ResourceRecord</see> at the specified index.
            </summary>
        </member>
        <member name="T:Aspose.Network.Mail.IMessageFormatter">
            <summary>
            Provides a mechanism for retrieving an object to Message formatting.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.IMessageFormatter.Format(Aspose.Network.Mail.MailMessage)">
            <summary>
            Provides the formatted html body.
            </summary>
            <param name="message">The MailMessage</param>
        </member>
        <member name="P:Aspose.Network.Mail.IMessageFormatter.FormatTemplates">
            <summary>
            Gets the format template.
            </summary>
        </member>
        <member name="T:Aspose.Network.Mail.MhtMessageFormatter">
            <summary>
            Provides a default formatter for Mht conversion.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.MhtMessageFormatter.#ctor">
            <summary>
            Creates an instance of MhtMessageFormatter.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.MhtMessageFormatter.Format(Aspose.Network.Mail.MailMessage)">
            <summary>
            Adds information header into message body.
            </summary>
            <param name="message">The MailMessage to be formatted.</param>
        </member>
        <member name="M:Aspose.Network.Mail.MhtMessageFormatter.Format(Aspose.Network.Mime.MimeMessage)">
            <summary>
            Adds information header into message body.
            </summary>
            <param name="message">The MimeMessage to be formatted.</param>
        </member>
        <member name="P:Aspose.Network.Mail.MhtMessageFormatter.SaveAttachments">
            <summary>
            Indicates whether to save the attachments.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MhtMessageFormatter.DateTimeFormat">
            <summary>
            Gets the format of datetime.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MhtMessageFormatter.FormFormat">
            <summary>
            Gets or sets the format string for From address.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MhtMessageFormatter.SentFormat">
            <summary>
            Gets or sets the format string for Sent address.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MhtMessageFormatter.ToFormat">
            <summary>
            Gets or sets the format for To addresses. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MhtMessageFormatter.CcFormat">
            <summary>
            Gets or sets the format string for Cc addresses.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MhtMessageFormatter.SubjectFormat">
            <summary>
            Gets or sets the format string for subject.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MhtMessageFormatter.AttachmentFormat">
            <summary>
            Gets or sets the format string for attachment.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MhtMessageFormatter.FormatTemplates">
            <summary>
            Gets the collection of format templates.
            </summary>
        </member>
        <member name="T:Aspose.Network.Mail.MailAddress">
            <summary>
            Represents the address of an electronic mail sender or recipient. 
            </summary>
            <remarks>
            <p>The MailAddress class is used by the SmtpClient and MailMessage classes to store address information for e-mail messages.</p>
            A mail address is composed of a User name, Host name and optionally, a DisplayName. The DisplayName can contain non-ASCII characters if you encode them.
            </remarks>
            <example>
            The following exmaple demonstrates how to send email message.
            [C#]
            <code>
            	//Create MailMessage Instance 
            	MailMessage msg = new MailMessage();
            	msg.From = new MailAddress("somebody@somedomain.com","Somebody");
            	msg.To.Add(new MailAddress("onebody@onedomain.com","OneBody"));
            	
            	msg.Subject = "Hello";
            	msg.TextBody ="Hello, nice to know you!";            
            	//Add embedded image
            	LinkedResource logo = new LinkedResource("c:\\Logo.jpg", MediaTypeNames.Image.Jpeg);
            	logo.ContentId = "companylogo";
            	msg.LinkedResources.Add(logo);
            	//Add Html content
            	msg.HtmlBody = "&lt;B&gt;Hello! Nice to know you!&lt;/B&gt;&lt;br&gt;&lt;img src=cid:companylogo&gt;";     
            	//Add an attachment
            	Attachment attachment1 = new Attachment("c:\\Contract.doc");
            	msg.AddAttachment(attachment1);     
                   //Save to eml file
                   message.Save("c:\\myemail.eml")
            
                  SmtpClient client = new SmtpClient("smtp.somebody.com", "somebody", "password");        
                  client.Send(msg);
            </code>
            [VB.NET]
            <code>
               //Create instance of MailMessage class	
               Dim message As MailMessage = New MailMessage()
               msg.From = new MailAddress("somebody@somedomain.com","Somebody")
               msg.To.Add(new MailAddress("onebody@onedomain.com","OneBody"))
                  message.Subject = "Say Hello" 
                  message.TextBody = "Hello, how are you?" 
               //Add embeded image
                  Dim logo As LinkedResource = new LinkedResource("c:\\Logo.jpg", MediaTypeNames.Image.Jpeg)
               logo.ContentId = "companylogo"
               messag.LinkedResources.Add(logo) 
               //Add Html content
               message.HtmlBody = "&lt;B&gt;Hello!Nice to know you!&lt;/B&gt;&lt;br&gt;&lt;img src=cid:companylogo&gt;"
               //Add an attachment from specified filename		
               Dim attachment1 As Attachment = New Attachment("c:\\Contract.doc")
                  message.AddAtachment(attachment1)
                  //Save to eml file
                  message.Save("c:\\myemail.eml")
            
                  //send it out
                  Dim client As SmtpClient = New SmtpClient("Smtp.somedomain.com", "somebody", "password") 
                  client.Send(message)
            </code>
            </example>
        </member>
        <member name="M:Aspose.Network.Mail.MailAddress.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MailAddress class using the specified address. 
            </summary>
            <param name="address">A String that contains an e-mail address.</param>
        </member>
        <member name="M:Aspose.Network.Mail.MailAddress.#ctor(System.String,System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the MailAddress class using the specified address, display name, and encoding. 
            </summary>
            <param name="address">A String that contains an e-mail address.</param>
            <param name="displayName">A String that contains the display name associated with address.</param>
            <param name="displayNameEncoding">The Encoding that defines the character set used for displayName.</param>
        </member>
        <member name="M:Aspose.Network.Mail.MailAddress.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the MailAddress class.
            </summary>
            <param name="address">A String that contains an e-mail address.</param>
            <param name="ignoreValidate">Indicates whether ignore the validation or not.</param>
        </member>
        <member name="M:Aspose.Network.Mail.MailAddress.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the MailAddress class using the specified address, display name, and encoding. 
            </summary>
            <param name="address">A String that contains an e-mail address.</param>
            <param name="displayName">A String that contains the display name associated with address.</param>
            <param name="ignoreValidate">Indicates whether ignore the validation or not.</param>
        </member>
        <member name="M:Aspose.Network.Mail.MailAddress.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the MailAddress class using the specified address and display name. 
            </summary>
            <param name="address">A String that contains an e-mail address.</param>
            <param name="displayName">A String that contains the display name associated with address</param>
        </member>
        <member name="M:Aspose.Network.Mail.MailAddress.op_Implicit(System.String)~Aspose.Network.Mail.MailAddress">
            <summary>
            Converts a String to a MailAddress object implicitly.
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.Network.Mail.MailAddress.ToString">
            <summary>
            Overridden. Returns a string representation of this instance. 
            </summary>
            <returns>A string contains the mail addresse.</returns>
        </member>
        <member name="P:Aspose.Network.Mail.MailAddress.Address">
            <summary>
            Gets the e-mail address specified when this instance was created.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MailAddress.DisplayName">
            <summary>
            Gets the display name composed from the display name and address information specified when this instance was created.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MailAddress.Host">
            <summary>
            Gets the host portion of the address specified when this instance was created.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MailAddress.User">
            <summary>
            Gets the user information from the address specified when this instance was created.
            </summary>
        </member>
        <member name="T:Aspose.Network.Imap.ImapMessageInfo">
            <summary>
            Represents a Imap message object..
            </summary>
        </member>
        <member name="P:Aspose.Network.Imap.ImapMessageInfo.CC">
            <summary>
            Gets the list of addresses of others who are to receive the message. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Imap.ImapMessageInfo.Date">
            <summary>
            Gets the origination date of this message. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Imap.ImapMessageInfo.Flags">
            <summary>
            Gets the message flags. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Imap.ImapMessageInfo.From">
            <summary>
            Gets the list of authors of this message. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Imap.ImapMessageInfo.Headers">
            <summary>
            Gets the list of headers of this message. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Imap.ImapMessageInfo.HeadersParsingError">
            <summary>
            Gets an error that occured during message headers parsing.
            </summary>
        </member>
        <member name="P:Aspose.Network.Imap.ImapMessageInfo.Answered">
            <summary>
            Returns true if the Flags property contains the Answered flag. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Imap.ImapMessageInfo.Deleted">
            <summary>
            Returns true if the Flags property contains the Deleted flag. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Imap.ImapMessageInfo.Draft">
            <summary>
            Returns true if the Flags property contains the Draft flag. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Imap.ImapMessageInfo.Flagged">
            <summary>
            Returns true if the Flags property contains the Flagged flag. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Imap.ImapMessageInfo.Recent">
            <summary>
            Returns true if the Flags property contains the Recent flag.
            </summary>
        </member>
        <member name="P:Aspose.Network.Imap.ImapMessageInfo.Readed">
            <summary>
            Returns true if the Flags property contains the Read flag
            </summary>
        </member>
        <member name="P:Aspose.Network.Imap.ImapMessageInfo.Length">
            <summary>
            Gets the length of the message. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Imap.ImapMessageInfo.ReceivedDate">
            <summary>
            Gets the received date of this message. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Imap.ImapMessageInfo.ReplyTo">
            <summary>
            Gets the list of addresses that should receive replies to this message. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Imap.ImapMessageInfo.Sender">
            <summary>
            Gets the sender of this message. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Imap.ImapMessageInfo.SequenceNumber">
            <summary>
            Gets the message sequence number.
            </summary>
        </member>
        <member name="P:Aspose.Network.Imap.ImapMessageInfo.Subject">
            <summary>
            Gets the subject of the message. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Imap.ImapMessageInfo.To">
            <summary>
            Gets the list of addresses of primary recipients of the message. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Imap.ImapMessageInfo.UniqueId">
            <summary>
            Gets the message unique ID. 
            </summary>
        </member>
        <member name="T:Aspose.Network.Security.Cryptography.X509Certificates.X509ExtensionCollection">
            <summary>
            Represents a collection of X509Extension objects. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Aspose.Network.Security.Cryptography.X509Certificates.X509ExtensionCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies a range of elements.
            </summary>
            <param name="array">The target array.</param>
            <param name="index">The zero-based index from the source.</param>
        </member>
        <member name="M:Aspose.Network.Security.Cryptography.X509Certificates.X509ExtensionCollection.GetEnumerator">
            <summary>
            Gets an Enumerator of the colleciton.
            </summary>
            <returns>An Enumerator.</returns>
        </member>
        <member name="M:Aspose.Network.Security.Cryptography.X509Certificates.X509ExtensionCollection.Add(Aspose.Network.Security.Cryptography.X509Certificates.X509Extension)">
            <summary>
            Adds an X509Extension object to an X509ExtensionCollection object.
            </summary>
            <param name="extension">An X509Extension object to add to the X509ExtensionCollection object. </param>
            <returns>The index at which the extension parameter was added.</returns>
        </member>
        <member name="M:Aspose.Network.Security.Cryptography.X509Certificates.X509ExtensionCollection.CopyTo(Aspose.Network.Security.Cryptography.X509Certificates.X509Extension[],System.Int32)">
            <summary>
            Copies a collection into an array starting at the specified index.
            </summary>
            <param name="array">An array of X509Extension objects. </param>
            <param name="index">The location in the array at which copying starts. </param>
        </member>
        <member name="M:Aspose.Network.Security.Cryptography.X509Certificates.X509ExtensionCollection.Remove(Aspose.Network.Security.Cryptography.X509Certificates.X509Extension)">
            <summary>
            Removes a specific X509Extension from the current collection.
            </summary>
            <param name="value">The X509Extension to remove from the current X509ExtensionCollection.</param>
        </member>
        <member name="P:Aspose.Network.Security.Cryptography.X509Certificates.X509ExtensionCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="P:Aspose.Network.Security.Cryptography.X509Certificates.X509ExtensionCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the System.Collections.ArrayList is synchronized (thread safe).        
            </summary>
        </member>
        <member name="P:Aspose.Network.Security.Cryptography.X509Certificates.X509ExtensionCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="P:Aspose.Network.Security.Cryptography.X509Certificates.X509ExtensionCollection.Item(System.String)">
            <summary>
            Gets the first X509Extension object whose value or friendly name is specified by an object identifier (OID).
            </summary>
            <param name="oid">The object identifier (OID) of the extension to retrieve.</param>
            <returns>An X509Extension object.</returns>
        </member>
        <member name="P:Aspose.Network.Security.Cryptography.X509Certificates.X509ExtensionCollection.Item(System.Int32)">
            <summary>
            Gets the X509Extension object at the specified index.
            </summary>
            <param name="index">The location of the X509Extension object to retrieve.</param>
            <returns>An X509Extension object.</returns>
        </member>
        <member name="T:Aspose.Network.Security.Cryptography.X509Certificates.X509Certificate2">
            <summary>
            Represents an X.509 certificate. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Aspose.Network.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the X509Certificate2 class using information from a byte array.
            </summary>
            <param name="rowData">A byte array containing data from an X.509 certificate.</param>
        </member>
        <member name="M:Aspose.Network.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the X509Certificate2 class using a certificate file name.
            </summary>
            <param name="fileName">The name of a certificate file.</param>
        </member>
        <member name="M:Aspose.Network.Security.Cryptography.X509Certificates.X509Certificate2.Dispose">
            <summary>
            Releases the unmanaged resources used by the X509Certificate2 class.
            </summary>
        </member>
        <member name="M:Aspose.Network.Security.Cryptography.X509Certificates.X509Certificate2.Finalize">
            <summary>
            Frees resources used by the X509Certificate2 class.
            </summary>
        </member>
        <member name="M:Aspose.Network.Security.Cryptography.X509Certificates.X509Certificate2.LoadDer(System.String)">
            <summary>
            Populates an X509Certificate2 object with information from a certificate file.
            </summary>
            <param name="fileName">The name of a certificate file.</param>
            <returns>The X509Certificate2 object.</returns>
        </member>
        <member name="M:Aspose.Network.Security.Cryptography.X509Certificates.X509Certificate2.ImportDer(System.String)">
            <summary>
            Populates an X509Certificate2 object with information from a certificate file.
            </summary>
            <param name="fileName">The name of a certificate.</param>
        </member>
        <member name="M:Aspose.Network.Security.Cryptography.X509Certificates.X509Certificate2.LoadPfx(System.Byte[],System.String)">
            <summary>
            Populates an X509Certificate2 object with information from a certificate file.
            </summary>
            <param name="data">A byte array that contains data from an X.509 certificate.</param>
            <param name="password">The password required to access the X.509 certificate data.</param>
            <returns>The X509Certificate2 object.</returns>
        </member>
        <member name="M:Aspose.Network.Security.Cryptography.X509Certificates.X509Certificate2.LoadPfx(System.String,System.String)">
            <summary>
            Populates an X509Certificate2 object with information from a certificate file.
            </summary>
            <param name="fileName">A byte array that contains data from an X.509 certificate.</param>
            <param name="password">The password required to access the X.509 certificate data.</param>
            <returns>The X509Certificate2 object.</returns>
        </member>
        <member name="M:Aspose.Network.Security.Cryptography.X509Certificates.X509Certificate2.ImportPfx(System.Byte[],System.String)">
            <summary>
            Populates an X509Certificate2 object with information from a certificate file.
            </summary>
            <param name="data">A byte array that contains data from an X.509 certificate.</param>
            <param name="password">The password required to access the X.509 certificate data.</param>
            <returns>The X509Certificate2 object.</returns>
        </member>
        <member name="M:Aspose.Network.Security.Cryptography.X509Certificates.X509Certificate2.ImportPfx(System.String,System.String)">
            <summary>
            Populates an X509Certificate2 object with information from a certificate file.
            </summary>
            <param name="fileName">A byte array that contains data from an X.509 certificate.</param>
            <param name="password">The password required to access the X.509 certificate data.</param>
            <returns>The X509Certificate2 object.</returns>
        </member>
        <member name="P:Aspose.Network.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore">
            <summary>
            Gets the date in local time on which a certificate becomes valid.
            </summary>
        </member>
        <member name="P:Aspose.Network.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter">
            <summary>
            Gets the date in local time after which a certificate is no longer valid.
            </summary>
        </member>
        <member name="P:Aspose.Network.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName">
            <summary>
            Gets the distinguished name of the certificate issuer.
            </summary>
        </member>
        <member name="P:Aspose.Network.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber">
            <summary>
            Gets the serial number of a certificate.
            </summary>
        </member>
        <member name="P:Aspose.Network.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName">
            <summary>
            Gets the subject distinguished name from a certificate.
            </summary>
        </member>
        <member name="T:Aspose.Network.WhoIs.QueryCompletedEventHandler">
            <summary>
            Event handler for Send an E-Mail message.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:Aspose.Network.Mail.DnsMailClient">
            <summary>
            Represents a mail transfer agent using DNS MX server to send email messages.
            </summary>
        </member>
        <member name="T:Aspose.Network.Mail.IMailTransferAgent">
            <summary>
            Provides the base interface for mail transfer agents.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.IMailTransferAgent.Send(Aspose.Network.Mail.MailMessage)">
            <summary>
            Sends an Email message.
            </summary>
            <param name="message">The Email message.</param>
        </member>
        <member name="M:Aspose.Network.Mail.IMailTransferAgent.Clone">
            <summary>
            Creates a copy of the current instance.
            </summary>
            <returns>A copy of current instance.</returns>
        </member>
        <member name="M:Aspose.Network.Mail.DnsMailClient.#ctor">
            <summary>
            Creates a new instance of DnsMailClient.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.DnsMailClient.Send(Aspose.Network.Mail.MailMessage)">
            <summary>
            Sends the specified email message. 
            </summary>
            <param name="message">A MailMessage that contains the message to send.</param>
            <example>
            The following code example demonstrates using this method.
            [C#]
            <code>
               MailMessage msg = new MailMessage();
               msg.From = "somebody@somedomain.com";
               msg.To = "onebody@somedomain.com, onebody2@somedomain.com";
               msg.Subject = "Hello, DnsMail";
               msg.TextBody = "Send e-mail using DnsMailClient";
               DnsClient client = new DnsClient();        
               client.Send(msg);
            </code>
            [VB.NET]
            <code>
               Dim msg As MailMessage = New MailMessage 
               msg.From = "somebody@somedomain.com" 
               msg.To = "onebody@somedomain.com, onebody2@somedomain.com" 
               msg.Subject = "Hello, DnsMail" 
               msg.TextBody = "Send e-mail using DnsMailClient" 
               Dim client As DnsClient = New DnsClient() 
               client.Send(msg)
            </code>
            </example>
        </member>
        <member name="M:Aspose.Network.Mail.DnsMailClient.Send(System.String,System.String,System.String,System.String)">
            <summary>
            Sends the specified e-mail message. The message sender, recipients, subject, and message body are specified using String objects. 
            </summary>
            <param name="from">A String that contains the address information of the message sender.</param>
            <param name="recipients">A String that contains the addresses that the message is sent to.</param>
            <param name="subject">A String that contains the subject line for the message.</param>
            <param name="body">A String that contains the message body.</param>
        </member>
        <member name="M:Aspose.Network.Mail.DnsMailClient.BeginSend(Aspose.Network.Mail.MailMessage,System.AsyncCallback,System.Object)">
            <summary>
            Begin Sending mail message, paired with EndSend method
            </summary>
            <param name="message">the message to be sent</param>
            <param name="callback">the method you want to call when send complete</param>
            <param name="state">object state</param>
            <returns>The async result.</returns>
        </member>
        <member name="M:Aspose.Network.Mail.DnsMailClient.BeginSend(System.String,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begin Sending a custom mail message
            </summary>
            <param name="from">Sender's address</param>
            <param name="recipients">Receiver's address(s)</param>
            <param name="subject">Subject of the mail message</param>
            <param name="body">Body of the mail message</param>
            <param name="callback">the method you want to call when send complete</param>
            <param name="state">object state</param>
            <returns>The async result.</returns>
        </member>
        <member name="M:Aspose.Network.Mail.DnsMailClient.EndSend(System.IAsyncResult)">
            <summary>
            End async request ofsending message, paired with BeginSend method
            </summary>
            <param name="asyncResult"></param>
        </member>
        <member name="M:Aspose.Network.Mail.DnsMailClient.Clone">
            <summary>
            Creates a copy of current instance.
            </summary>
            <returns>A copy of DnsMailClient.</returns>
        </member>
        <member name="E:Aspose.Network.Mail.DnsMailClient.SendCompleted">
            <summary>
            Occurs if the an asynchronous message send operation is completed.
            </summary>
        </member>
        <member name="T:Aspose.Network.Proxy.ProxyException">
            <summary>
            Represents the exception thrown in Proxy operation
            </summary>
        </member>
        <member name="M:Aspose.Network.Proxy.ProxyException.#ctor(System.String)">
            <summary>
            Initialize a new instance of the class <see cref="T:Aspose.Network.Proxy.ProxyException"/>.
            </summary>
            <param name="message">A String contains the error message.</param>
        </member>
        <member name="M:Aspose.Network.Proxy.ProxyException.#ctor(System.String,System.Exception)">
            <summary>
            Initialize a new instance of the class <see cref="T:Aspose.Network.Proxy.ProxyException"/>.
            </summary>
        </member>
        <member name="T:Aspose.Network.ProtocolClient">
            <summary>
            Represents the base class for network protocol clients.
            </summary>
        </member>
        <member name="M:Aspose.Network.ProtocolClient.#ctor">
            <summary>
            Inistializes a new instance of the ProtocolClient class.
            </summary>
        </member>
        <member name="M:Aspose.Network.ProtocolClient.Dispose">
            <summary>
            Releases the unmanaged resources used by the ProtocolClient.
            </summary>
        </member>
        <member name="M:Aspose.Network.ProtocolClient.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the ProtocolClient, and optionally disposes of the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to releases only unmanaged resources.</param>
        </member>
        <member name="P:Aspose.Network.ProtocolClient.Host">
            <summary>
            Gets or sets host.
            </summary>
        </member>
        <member name="P:Aspose.Network.ProtocolClient.Port">
            <summary>
            Gets or sets port.
            </summary>
        </member>
        <member name="P:Aspose.Network.ProtocolClient.Timeout">
            <summary>
            Gets or sets connection timeout.
            </summary>
        </member>
        <member name="T:Aspose.Network.Icmp.TimeExceededMessage">
            <summary>
            Represents the time exceeded icmp messages.
            </summary>
        </member>
        <member name="M:Aspose.Network.Icmp.TimeExceededMessage.#ctor">
            <summary>
            Initializes a new instance of the TimeExceededMessage class.
            </summary>
        </member>
        <member name="T:Aspose.Network.Icmp.IcmpException">
            <summary>
            Defines the base class for predefined exceptions in the Aspose.Network.Icmp namespace.
            </summary>
        </member>
        <member name="T:Aspose.Network.Dns.ResponseCode">
            <summary>
            Part of responses in the Dns message header.
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.ResponseCode.Ready">
            <summary>
            No error condition.
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.ResponseCode.FormatError">
            <summary>
            the name server was unable to interpret the query.
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.ResponseCode.ServerFailure">
            <summary>
            The name server was unable to process this query due to a problem with the name server.
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.ResponseCode.NameError">
            <summary>
            Meaningful only for responses from an authoritative name server, this code signifies that the domain name referenced in the query does not exist.
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.ResponseCode.NotImplemented">
            <summary>
            The name server does not support the requested kind of query.
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.ResponseCode.Refused">
            <summary>
            The name server refuses to perform the specified operation for policy reasons. For example, a name server may not wish to provide the informatoion to the particular requester, or a name server may not wish to perform a particular operation (e.g., zone transfer) for particular data.
            </summary>
        </member>
        <member name="T:Aspose.Network.Dns.AResourceRecord">
            <summary>
            Represents an A DNS resource record
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.AResourceRecord.#ctor">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.AResourceRecord">AResourceRecord</see>.
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.AResourceRecord.#ctor(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.AResourceRecord">AResourceRecord</see>.
            </summary>
            <param name="buffer">The arry of unsigned bytes from which to create.</param>
            <param name="index">The index into buffer at which this resource record begins</param>
            <param name="count">The length of the bytes to create this resource record</param>
        </member>
        <member name="P:Aspose.Network.Dns.AResourceRecord.Address">
            <summary>
            Gets or sets the address
            </summary>
        </member>
        <member name="T:Aspose.Network.Mime.ContentDisposition">
            <summary>
            Represents a MIME protocol Content-Disposition header.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mime.ContentDisposition.#ctor">
            <summary>
            Initializes a new instance of the ContentDisposition class with a DispositionType of Attachment. 
            </summary>
        </member>
        <member name="M:Aspose.Network.Mime.ContentDisposition.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ContentDisposition class with the specified disposition information.
            </summary>
            <param name="dispositionType">A DispositionTypeNames value that contains the disposition.</param>
        </member>
        <member name="M:Aspose.Network.Mime.ContentDisposition.Equals(System.Object)">
            <summary>
            Determines whether the content-disposition header of the specified ContentDisposition object is equal to the content-disposition header of this object.
            </summary>
            <param name="rparam">The ContentDisposition object to compare with this object.</param>
            <returns>true if the content-disposition headers are the same; otherwise false.</returns>
        </member>
        <member name="M:Aspose.Network.Mime.ContentDisposition.GetHashCode">
            <summary>
            Determines the hash code of the specified ContentDisposition object
            </summary>
            <returns>An integer hash value.</returns>
        </member>
        <member name="M:Aspose.Network.Mime.ContentDisposition.ToString">
            <summary>
            Returns a String representation of this instance.
            </summary>
            <returns>A String that contains the property values for this instance.</returns>
        </member>
        <member name="P:Aspose.Network.Mime.ContentDisposition.DispositionType">
            <summary>
            Gets or sets the disposition type for an e-mail attachment. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Mime.ContentDisposition.CreationDate">
            <summary>
            Gets or sets the creation date for a file attachment. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Mime.ContentDisposition.FileName">
            <summary>
            Gets or sets the suggested file name for an e-mail attachment. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Mime.ContentDisposition.Inline">
            <summary>
            Gets or sets a Boolean value that determines the disposition type (Inline or Attachment) for an e-mail attachment. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Mime.ContentDisposition.Size">
            <summary>
            Gets or sets the size of a file attachment. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Mime.ContentDisposition.ModificationDate">
            <summary>
            Gets or sets the modification date for a file attachment. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Mime.ContentDisposition.ReadDate">
            <summary>
            Gets or sets the read date for a file attachment. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Mime.ContentDisposition.Parameters">
            <summary>
            Gets the parameters included in the Content-Disposition header represented by this instance. 
            </summary>
        </member>
        <member name="T:Aspose.Network.Mail.MailMessage">
            <summary>
            <p>The MailMessage class represents an e-mail message that can be sent using the SmtpClient class. </p>
            
            <p>The MailMessage class can load from EML format file (RFC822 compliant format), MHT format file (Microsoft Html format), and MSG format file (Microsoft Outlook Message format).</p>
            
            <p>The MailMessage class can save to File System in EML format, MHT format.</p>
            </summary>
            <remarks>
            <p>Instances of the MailMessage class are used to construct e-mail messages that are transmitted to an SMTP server for delivery using the SmtpClient class. </p>
            
            <p>To specify the sender, recipient, and contents of an e-mail message, use the associated properties of the MailMessage class.</p>
            
            <p>Use the HtmlBody propery to specify the Html content for the message body;</p> 
            
            <p>Use the TextBody propery to specify the text content for the message body.</p>
            
            <p>Use the Attachments property to attach files to the message.</p>
            
            <p>Use the AlternateViews property to specify copies of an e-mail message in different formats (HTML/Text).</p>
            
            <p>after assembling an e-mail message, you can send it by using the SmtpClient class. </p>
            </remarks>
            <example>
            <p>The following exmaple demonstrates how to create e-mail message.</p>
            [C#]
            <code>
            	//Create MailMessage Instance 
            	MailMessage msg = new MailMessage("somebody@somedomain.com","onebody@onedomain.com");
            	msg.Subject = "Hello";
            	msg.TextBody ="Hello, nice to know you!";            
            	//Add embedded image
            	LinkedResource logo = new LinkedResource("c:\\Logo.jpg", MediaTypeNames.Image.Jpeg);
            	logo.ContentId = "companylogo";
            	msg.LinkedResources.Add(logo);
            	//Add Html content
            	msg.HtmlBody = "&lt;B&gt;Hello!Nice to know you!&lt;/B&gt;&lt;br&gt;&lt;img src=cid:companylogo&gt;";     
            	//Add an attachment
            	Attachment attachment1 = new Attachment("c:\\Contract.doc");
            	msg.AddAttachment(attachment1);     
                   //Save to eml file
                   message.Save("c:\\myemail.eml")
            
                   SmtpClient client = new SmtpClient("smtp.somebody.com", "somebody", "password");        
                   client.Send(msg);
            </code>
            [VB.NET]
            <code>
                //Create instance of MailMessage class	
                Dim message As MailMessage = New MailMessage("somebody@somedomain.com" ,  "onebody@somedomain.com")
                   message.Subject = "Say Hello" 
                   message.TextBody = "Hello, how are you?" 
            	//Add embeded image
                   Dim logo As LinkedResource = new LinkedResource("c:\\Logo.jpg", MediaTypeNames.Image.Jpeg)
                logo.ContentId = "companylogo"
                messag.LinkedResources.Add(logo) 
                //Add Html content
                message.HtmlBody = "&lt;B&gt;Hello! Nice to know you!&lt;/B&gt;&lt;br&gt;&lt;img src=cid:companylogo&gt;"
                //Add an attachment from specified filename		
                Dim attachment1 As Attachment = New Attachment("c:\\Contract.doc")
                   message.AddAtachment(attachment1)
                   //Save to eml file
                   message.Save("c:\\myemail.eml")
            
                   //send it out
                   Dim client As SmtpClient = New SmtpClient("Smtp.somedomain.com", "somebody", "password") 
                   client.Send(message)
            </code>
            </example>
        </member>
        <member name="M:Aspose.Network.Mail.MailMessage.#ctor">
            <summary>
            Initializes a new instance of the MailMessage class.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.MailMessage.#ctor(Aspose.Network.Mail.MailAddress,Aspose.Network.Mail.MailAddress)">
            <summary>
            Initializes a new instance of the MailMessage class by using the specified MailAddress class objects. 
            </summary>
            <param name="from">A MailAddress that contains the address of the sender of the e-mail message.</param>
            <param name="to">A MailAddress that contains the address of the recipient of the e-mail message.</param>
        </member>
        <member name="M:Aspose.Network.Mail.MailMessage.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the MailMessage class by using the specified String class objects. 
            </summary>
            <param name="from">A String that contains the address of the sender of the e-mail message.</param>
            <param name="to">A String that contains the addresses of the recipients of the e-mail message.</param>
        </member>
        <member name="M:Aspose.Network.Mail.MailMessage.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the MailMessage class. 
            </summary>
            <param name="from">A String that contains the address of the sender of the e-mail message.</param>
            <param name="to">A String that contains the address of the recipient of the e-mail message.</param>
            <param name="subject">A String that contains the subject text.</param>
            <param name="body">A String that contains the message body.</param>
        </member>
        <member name="M:Aspose.Network.Mail.MailMessage.AddAttachment(Aspose.Network.Mail.Attachment)">
            <summary>
            Add an attachment to this this E-Mail message.
            </summary>
            <param name="attachment">The specified <see cref="T:Aspose.Network.Mail.Attachment">atttachment</see> object to be added.</param>
        </member>
        <member name="M:Aspose.Network.Mail.MailMessage.AddAlternateView(Aspose.Network.Mail.AlternateView)">
            <summary>
            Add an alternative view to this E-Mail message.
            </summary>
            <param name="view">The specified <see cref="T:Aspose.Network.Mail.AlternateView">view</see> object to be added.</param>
        </member>
        <member name="M:Aspose.Network.Mail.MailMessage.AddCalendar(Aspose.Network.Mail.Calendar)">
            <summary>
            Add a calendar to this E-Mail message
            </summary>
            <param name="calendar">The specified <see cref="T:Aspose.Network.Mail.Calendar">calendar</see> object to be added.</param>
        </member>
        <member name="M:Aspose.Network.Mail.MailMessage.Load(System.IO.Stream)">
            <summary>
            Loads a MailMessage object from the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>The MailMessage object.</returns>
        </member>
        <member name="M:Aspose.Network.Mail.MailMessage.LoadAsMime(Aspose.Network.Mail.AttachmentBase)">
            <summary>
            Loads the attached Eml formatted message file into a MailMessage instance.
            </summary>
            <param name="attachment">The Eml formatted message attachment.</param>
            <returns>A MailMessage instance.</returns>
        </member>
        <member name="M:Aspose.Network.Mail.MailMessage.LoadContent(System.IO.Stream)">
            <summary>
            Populates a MailMessage object from the specified stream.
            </summary>
            <param name="stream">The stream</param>
        </member>
        <member name="M:Aspose.Network.Mail.MailMessage.Import(System.IO.Stream)">
            <summary>
            Populates a MailMessage object from the specified stream.
            </summary>
            <param name="stream">The stream</param>
        </member>
        <member name="M:Aspose.Network.Mail.MailMessage.Load(System.IO.Stream,Aspose.Network.Mail.MessageFormat)">
            <summary>
            Load MailMessage from specifed Stream and Format
            </summary>
            <param name="stream">The Stream contains the mail content</param>
            <param name="format">Specified the mail message format,it can be in eml,mhtml or msg format.</param>
            <returns>MailMessage object.</returns>
        </member>
        <member name="M:Aspose.Network.Mail.MailMessage.Load(System.String)">
            <summary>
            Load message from specified file and store into a MailMessage object
            </summary>
            <param name="fileName">Specified the filename</param>
            <returns>The MailMessage object.</returns>
        </member>
        <member name="M:Aspose.Network.Mail.MailMessage.Load(System.String,Aspose.Network.Mail.MessageFormat)">
            <summary>
            Load message from specified file and store into a MailMessage object
            </summary>
            <param name="fileName">Specified the filename</param>
            <param name="format">Specified the mail message format,it can be in eml,mhtml or msg format.</param>
            <returns>The MailMessage object.</returns>
        </member>
        <member name="M:Aspose.Network.Mail.MailMessage.Save(System.IO.Stream)">
            <summary>
            Saves the content of MailMessage to specified Stream.
            </summary>
            <param name="stream">Specified the Stream where the mail message will be saved. </param>
        </member>
        <member name="M:Aspose.Network.Mail.MailMessage.Save(System.IO.TextWriter)">
            <summary>
            Saves this mail message to the specified TextWriter 
            </summary>
            <param name="writer">Specified the TextWriter where the mail message will be saved</param>
        </member>
        <member name="M:Aspose.Network.Mail.MailMessage.Save(System.IO.Stream,Aspose.Network.Mail.MessageFormat)">
            <summary>
            Saves this mail message to the specified Stream in specified Format
            </summary>
            <param name="stream">Specified the Stream where the mail message will be saved.</param>
            <param name="format">An MessagFormat that specifies the format of the saved mail message.</param>
        </member>
        <member name="M:Aspose.Network.Mail.MailMessage.Save(System.IO.Stream,Aspose.Network.Mail.MessageFormat,Aspose.Network.Mail.IMessageFormatter)">
            <summary>
            Saves this mail message to the specified Stream in specified Format
            </summary>
            <param name="stream">Specified the Stream where the mail message will be saved.</param>
            <param name="format">An MessagFormat that specifies the format of the saved mail message.</param>
            <param name="formatter">The message formatter.</param>
        </member>
        <member name="M:Aspose.Network.Mail.MailMessage.Save(System.String)">
            <summary>
            Saves this mail message to the specified file
            </summary>
            <param name="fileName">String that contains the name of the file to which to save this  mail message </param>
        </member>
        <member name="M:Aspose.Network.Mail.MailMessage.Save(System.String,Aspose.Network.Mail.MessageFormat)">
            <summary>
            Saves this mail message to the specified file in specified Format
            </summary>
            <param name="fileName">String that contains the name of the file to which to save this  mail message. </param>
            <param name="format">An MessagFormat that specifies the format of the saved mail message.</param>
        </member>
        <member name="M:Aspose.Network.Mail.MailMessage.Save(System.String,Aspose.Network.Mail.MessageFormat,Aspose.Network.Mail.IMessageFormatter)">
            <summary>
            Saves this mail message to the specified Stream in specified Format
            </summary>
            <param name="fileName">String that contains the name of the file to which to save this  mail message. </param>
            <param name="format">An MessagFormat that specifies the format of the saved mail message.</param>
            <param name="formatter">The message formatter.</param>
        </member>
        <member name="M:Aspose.Network.Mail.MailMessage.ToString">
            <summary>
            Overrided. Return String that contains the mail message content in MIME format.
            </summary>
            <returns>String that contains the mail message content in MIME format</returns>
        </member>
        <member name="M:Aspose.Network.Mail.MailMessage.Clone">
            <summary>
             Clones a new instance of the MailMessage.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.Network.Mail.MailMessage.op_Implicit(Aspose.Network.Mail.MailMessage)~Aspose.Network.Mime.MimeMessage">
            <summary>
            Converts a MailMessage object to a MimeMessage obejct.
            </summary>
            <param name="message">The MailMessage object to convert.</param>
            <returns>A MimeMessage.</returns>
        </member>
        <member name="M:Aspose.Network.Mail.MailMessage.Dispose">
            <summary>
            Releases the unmanaged resources used by the MailMessage.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MailMessage.AlternateViews">
            <summary>
            Gets the AlternateViewCollection object which contains all the alternateView objects in this MailMessage
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MailMessage.Attachments">
            <summary>
            Gets the AttachmentCollection object which contains all the attachments.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MailMessage.Bcc">
            <summary>
            Gets or Sets the address collection that contains the blind carbon copy (BCC) recipients for this e-mail message.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MailMessage.HtmlBody">
            <summary>
            Gets or Sets the html content
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MailMessage.Body">
            <summary>
            Obsoleted. Use TextBody or HtmlBody instead.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MailMessage.TextBody">
            <summary>
            Gets or Sets the plain text content
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MailMessage.CC">
            <summary>
            Gets or sets the address collection that contains the carbon copy (CC) recipients for this e-mail message.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MailMessage.Date">
            <summary>
            Gets or Sets the DateTime of this mail.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MailMessage.EnvelopeId">
            <summary>
            Gets the envelope identification 
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MailMessage.From">
            <summary>
            Gets or sets the from address for this e-mail message.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MailMessage.IsBodyHtml">
            <summary>
            Indicates whether this mail message contains html body.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MailMessage.IsBodyText">
            <summary>
            Indicates whether the mail message contains text body.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MailMessage.Headers">
            <summary>
            Gets all the MIME Headers
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MailMessage.MessageId">
            <summary>
            Gets the message identification
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MailMessage.XMailer">
            <summary>
            Gets or sets the x-mail mime header of the mail message.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MailMessage.Sensitivity">
            <summary>
            Gets or sets the sensitivity of the mail message.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MailMessage.Priority">
            <summary>
            Gets or sets the Priority of the mail message.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MailMessage.ReplyTo">
            <summary>
            Gets or sets "replyTo" address of mail message. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MailMessage.SubjectEncoding">
            <summary>
            Gets or Sets the encoding used to encode the subject
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MailMessage.BodyEncoding">
            <summary>
            Gets or sets the encoding used to encode the message body.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MailMessage.Subject">
            <summary>
            Gets or sets subject of mail message. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MailMessage.LinkedResources">
            <summary>
            Gets all the linkedresources of this mail message
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MailMessage.Sender">
            <summary>
            Gets or sets the sender address
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MailMessage.To">
            <summary>
            Gets or sets the To addresses 
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MailMessage.DeliveryNotificationOptions">
            <summary>
            Gets or sets the delivery notification option
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MailMessage.ConfirmRead">
            <summary>
            Indicates whether the mail message need to confirm read.
            </summary> 
        </member>
        <member name="T:Aspose.Network.Mail.Calendaring.YearlyRecurrencePattern">
            <summary>
            Represents the yearly recurrence pattern.
            </summary>
        </member>
        <member name="T:Aspose.Network.Mail.Calendaring.RecurrencePattern">
            <summary>
            Represents the base class for RecurrencePattern.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.Calendaring.RecurrencePattern.#ctor">
            <summary>
            Initializes a new instance of the RecurrencePattern.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.Calendaring.RecurrencePattern.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the RecurrencePattern.
            </summary>
            <param name="endDate">The end date.</param>
        </member>
        <member name="M:Aspose.Network.Mail.Calendaring.RecurrencePattern.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the RecurrencePattern.
            </summary>
            <param name="occurs">The occurs.</param>
        </member>
        <member name="M:Aspose.Network.Mail.Calendaring.RecurrencePattern.#ctor(System.DateTime,System.Int32)">
            <summary>
            Initializes a new instance of the RecurrencePattern.
            </summary>
            <param name="endDate">The end date.</param>
            <param name="interval">The interval.</param>
        </member>
        <member name="M:Aspose.Network.Mail.Calendaring.RecurrencePattern.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the RecurrencePattern.
            </summary>
            <param name="occurs">The occurs.</param>
            <param name="interval">The interval.</param>
        </member>
        <member name="P:Aspose.Network.Mail.Calendaring.RecurrencePattern.Interval">
            <summary>
            Gets or sets interval.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.Calendaring.RecurrencePattern.Occurs">
            <summary>
            Gets or sets occurs.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.Calendaring.RecurrencePattern.EndDate">
            <summary>
            Gets or sets end date.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.Calendaring.RecurrencePattern.WeekStart">
            <summary>
            Gets or sets week start.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.Calendaring.YearlyRecurrencePattern.#ctor">
            <summary>
            Initializes a new instance of the YearlyRecurrencePattern class.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.Calendaring.YearlyRecurrencePattern.#ctor(System.Int32,Aspose.Network.Mail.Calendaring.CalendarMonth)">
            <summary>
            Initializes a new instance of the YearlyRecurrencePattern class.
            </summary>
            <param name="startOffset">The start offset.</param>
            <param name="startMonth">The start month.</param>
        </member>
        <member name="M:Aspose.Network.Mail.Calendaring.YearlyRecurrencePattern.#ctor(Aspose.Network.Mail.Calendaring.CalendarDay,Aspose.Network.Mail.Calendaring.CalendarMonth,Aspose.Network.Mail.Calendaring.DayPosition)">
            <summary>
            Initializes a new instance of the YearlyRecurrencePattern class.
            </summary>
            <param name="startDay">The start day.</param>
            <param name="startMonth">The start month.</param>
            <param name="startPosition">The start position.</param>
        </member>
        <member name="P:Aspose.Network.Mail.Calendaring.YearlyRecurrencePattern.StartDay">
            <summary>
            Gets or sets start day.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.Calendaring.YearlyRecurrencePattern.StartOffset">
            <summary>
            Gets or sets start offset.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.Calendaring.YearlyRecurrencePattern.StartPosition">
            <summary>
            Gets or sest start position.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.Calendaring.YearlyRecurrencePattern.StartMonth">
            <summary>
            Gets or sets start month.
            </summary>
        </member>
        <member name="T:Aspose.Network.Mail.Calendaring.WeeklyRecurrencePattern">
            <summary>
            Represents the weekly recurrence pattern.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.Calendaring.WeeklyRecurrencePattern.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the WeeklyRecurrencePattern class.
            </summary>
            <param name="endDate">The end date.</param>
        </member>
        <member name="M:Aspose.Network.Mail.Calendaring.WeeklyRecurrencePattern.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the WeeklyRecurrencePattern class.
            </summary>
            <param name="occurs">The occurs.</param>
        </member>
        <member name="M:Aspose.Network.Mail.Calendaring.WeeklyRecurrencePattern.#ctor(System.DateTime,System.Int32)">
            <summary>
            Initializes a new instance of the WeeklyRecurrencePattern class.
            </summary>
            <param name="endDate">The end date.</param>
            <param name="interval">The interval.</param>
        </member>
        <member name="M:Aspose.Network.Mail.Calendaring.WeeklyRecurrencePattern.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the WeeklyRecurrencePattern class.
            </summary>
            <param name="occurs">The occurs.</param>
            <param name="interval">The interval.</param>
        </member>
        <member name="P:Aspose.Network.Mail.Calendaring.WeeklyRecurrencePattern.StartDays">
            <summary>
            Gets or sets the start days.
            </summary>
        </member>
        <member name="T:Aspose.Network.Mail.Calendaring.MonthlyRecurrencePattern">
            <summary>
            Represents the monthly recurrence pattern.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.Calendaring.MonthlyRecurrencePattern.#ctor">
            <summary>
            Initializes a new instance of the MonthlyRecurrencePattern class.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.Calendaring.MonthlyRecurrencePattern.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the MonthlyRecurrencePattern class.
            </summary>
            <param name="startOffset">The start offset.</param>
            <param name="interval">The interval.</param>
        </member>
        <member name="M:Aspose.Network.Mail.Calendaring.MonthlyRecurrencePattern.#ctor(Aspose.Network.Mail.Calendaring.DayPosition,Aspose.Network.Mail.Calendaring.CalendarDay,System.Int32)">
            <summary>
            Initializes a new instance of the MonthlyRecurrencePattern class.
            </summary>
            <param name="startPosition">The start position.</param>
            <param name="startDay">The start day.</param>
            <param name="interval">The interval.</param>
        </member>
        <member name="P:Aspose.Network.Mail.Calendaring.MonthlyRecurrencePattern.StartDay">
            <summary>
            Gets or sets start day.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.Calendaring.MonthlyRecurrencePattern.StartOffset">
            <summary>
            Gets or sets start offset.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.Calendaring.MonthlyRecurrencePattern.StartPosition">
            <summary>
            Gets or sets start position.
            </summary>
        </member>
        <member name="T:Aspose.Network.Security.Cryptography.X509Certificates.ValidationOptions">
            <summary>
            Defines the options of validation.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.ValidationOptions.AllowTestRoot">
            <summary>
            AllowTestRoot.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.ValidationOptions.AllowUnknownCa">
            <summary>
            AllowUnknownCa.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.ValidationOptions.IgnoreAllRevUnknown">
            <summary>
            IgnoreAllRevUnknown.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.ValidationOptions.IgnoreAllTimeNotValid">
            <summary>
            IgnoreAllTimeNotValid.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.ValidationOptions.IgnoreCaRevUnknown">
            <summary>
            IgnoreCaRevUnknown.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.ValidationOptions.IgnoreCnNotMatch">
            <summary>
            IgnoreCnNotMatch.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.ValidationOptions.IgnoreCtlSignerRevUnknown">
            <summary>
            IgnoreCtlSignerRevUnknown.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.ValidationOptions.IgnoreCtlTimeNotValid">
            <summary>
            IgnoreCtlTimeNotValid.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.ValidationOptions.IgnoreEndRevUnknown">
            <summary>
            IgnoreEndRevUnknown.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.ValidationOptions.IgnoreInvalidBasicConstraints">
            <summary>
            IgnoreInvalidBasicConstraints.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.ValidationOptions.IgnoreInvalidPolicy">
            <summary>
            IgnoreInvalidPolicy.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.ValidationOptions.IgnoreRootRevUnknown">
            <summary>
            IgnoreRootRevUnknown.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.ValidationOptions.IgnoreTimeNotNested">
            <summary>
            IgnoreTimeNotNested.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.ValidationOptions.IgnoreTimeNotValid">
            <summary>
            IgnoreTimeNotValid.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.ValidationOptions.IgnoreWrongUsage">
            <summary>
            IgnoreWrongUsage.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.ValidationOptions.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.ValidationOptions.TrustTestRoot">
            <summary>
            TrustTestRoot.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.ValidationOptions.UseCacheOnly">
            <summary>
            UseCacheOnly.
            </summary>
        </member>
        <member name="T:Aspose.Network.Mail.SmtpFailedRecipientsException">
            <summary>
            The exception that is thrown when e-mail is sent using an SmtpClient and cannot be delivered to all recipients.
            </summary>
        </member>
        <member name="T:Aspose.Network.Mail.SmtpFailedRecipientException">
            <summary>
            Represents the exception that is thrown when the email client is not able to complete a Send operation to a particular recipient.
            </summary>
        </member>
        <member name="T:Aspose.Network.Mail.SmtpException">
            <summary>
            Represents the exception that is thrown when the SmtpClient is not able to complete a Send or SendAsync operation. 
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpException.#ctor">
            <summary>
            Initializes a new instance of the SmtpException class. 
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SmtpException class. 
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the SmtpException class from the specified instances of the SerializationInfo and StreamingContext classes. 
            </summary>
            <param name="info">A SerializationInfo that contains the information required to serialize the new SmtpException. </param>
            <param name="context">A StreamingContext that contains the source and destination of the serialized stream associated with the new instance.</param>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the SmtpException class. 
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpFailedRecipientException.#ctor">
            <summary>
            Initializes an empty instance of the SmtpFailedRecipientException class.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpFailedRecipientException.#ctor(System.String)">
            <summary>
            Initializes an instance of the SmtpFailedRecipientException class with specified error message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpFailedRecipientException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes an instance of the SmtpFailedRecipientException class with specified message and inner exception.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="P:Aspose.Network.Mail.SmtpFailedRecipientException.FailedRecipient">
            <summary>
            Gets the receipient.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.SmtpFailedRecipientException.Response">
            <summary>
            Gets the response.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpFailedRecipientsException.#ctor">
            <summary>
            Initializes an empty instance of the SmtpFailedRecipientsException class.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpFailedRecipientsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SmtpFailedRecipientsException class with the specified message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpFailedRecipientsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the SmtpFailedRecipientsException class with the specified message and inner Exception.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="P:Aspose.Network.Mail.SmtpFailedRecipientsException.InnerExceptions">
            <summary>
            Gets the inner exceptions.
            </summary>
        </member>
        <member name="T:Aspose.Network.Proxy.ConnectCompletedEventHandler">
            <summary>
            Represents the method that will handle the ConnectCompleted event of a ProxyClient instance.
            </summary>
        </member>
        <member name="T:Aspose.Network.Icmp.ReceiveCompletedEventHandler">
            <summary>
            Represents the method that will handle the ReceiveCompleted event of an IcmpClient object.
            </summary>
        </member>
        <member name="T:Aspose.Network.Icmp.ReceiveCompletedEventArgs">
            <summary>
            Provides data for the ReceiveCompleted event. When your asynchronous receive operation calls an event handler, an instance of this class is passed to the handler.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.ReceiveCompletedEventArgs.AsyncResult">
            <summary>
            Gets the result of the asynchronous operation requested.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.ReceiveCompletedEventArgs.Sender">
            <summary>
            Gets the sender of the event
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.ReceiveCompletedEventArgs.Message">
            <summary>
            Gets the message received from the server.
            </summary>
        </member>
        <member name="T:Aspose.Network.Icmp.TimestampReplyMessage">
            <summary>
            Represents the timestamp reply message in ICMP protocol.
            </summary>
        </member>
        <member name="M:Aspose.Network.Icmp.TimestampReplyMessage.#ctor">
            <summary>
            Creates a new instance of TimestampReplyMessage with default parameters.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.TimestampReplyMessage.Identifier">
            <summary>
            Gets or sets the identifier.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.TimestampReplyMessage.OriginateTimestamp">
            <summary>
            Gets or sets originate timestamp.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.TimestampReplyMessage.ReceiveTimestamp">
            <summary>
            Gets or sets receive timestamp.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.TimestampReplyMessage.SequenceNumber">
            <summary>
            Gets or sets sequence number.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.TimestampReplyMessage.TransmitTimestamp">
            <summary>
            Gets or sets transmit timestamp.
            </summary>
        </member>
        <member name="T:Aspose.Network.Icmp.SourceQuenchMessage">
            <summary>
            Represents a source quench message in the ICMP protocol.
            </summary>
        </member>
        <member name="M:Aspose.Network.Icmp.SourceQuenchMessage.#ctor">
            <summary>
            Initializes a new instance of the SourceQuenchMessage class.
            </summary>
        </member>
        <member name="T:Aspose.Network.Icmp.EchoReplyMessage">
            <summary>
            Represents a echo reply message.
            </summary>
        </member>
        <member name="M:Aspose.Network.Icmp.EchoReplyMessage.#ctor">
            <summary>
            Initializes a new instance of the EchoReplyMessage class.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.EchoReplyMessage.Identifier">
            <summary>
            Gets or sets identifier.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.EchoReplyMessage.SequenceNumber">
            <summary>
            Gets or sets the sequence number.
            </summary>
        </member>
        <member name="T:Aspose.Network.Ftp.TransferProgressEventHandler">
            <summary>
            Event handler for transfer progress.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event argument.</param>
        </member>
        <member name="T:Aspose.Network.Ftp.DataConnectionMode">
            <summary>
            Represents the connection mode of file transfering.
            </summary>
        </member>
        <member name="F:Aspose.Network.Ftp.DataConnectionMode.Auto">
            <summary>
            Passive mode is tried; and if it fails, try to use Active mode.
            </summary>
        </member>
        <member name="F:Aspose.Network.Ftp.DataConnectionMode.Active">
            <summary>
            A PORT command is issued and the server connects to the client.
            </summary>
        </member>
        <member name="F:Aspose.Network.Ftp.DataConnectionMode.Passive">
            <summary>
            A PASV command is issued and the client connects to the server.
            </summary>
        </member>
        <member name="T:Aspose.Network.Ftp.CommandCompletedEventArgs">
            <summary>
            Represents the event for  completed.
            </summary>
        </member>
        <member name="T:Aspose.Network.Exchange.ExchangeMessageInfoCollection">
            <summary>
            Represents a collection of ExchangeMessageInfo objects.
            </summary>
        </member>
        <member name="M:Aspose.Network.Exchange.ExchangeMessageInfoCollection.#ctor">
            <summary>
            Initializes a new instance of the ExchangeMessageInfoCollection class.
            </summary>
        </member>
        <member name="T:Aspose.Network.Dns.CNAMEResourceRecord">
            <summary>
            Represents an CNAME DNS resource record
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.CNAMEResourceRecord.#ctor">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.CNAMEResourceRecord">CNAMEResourceRecord</see>.
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.CNAMEResourceRecord.#ctor(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.CNAMEResourceRecord">CNAMEResourceRecord</see>.
            </summary>
            <param name="buffer">The arry of unsigned bytes from which to create.</param>
            <param name="index">The index into buffer at which this resource record begins</param>
            <param name="count">The length of the bytes to create this resource record</param>
        </member>
        <member name="P:Aspose.Network.Dns.CNAMEResourceRecord.CanonicalName">
            <summary>
            Gets or sets the canonical name
            </summary>
        </member>
        <member name="T:Aspose.Network.Dns.A6ResourceRecord">
            <summary>
            Presents the 
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.A6ResourceRecord.#ctor">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.A6ResourceRecord">A6ResourceRecord</see>.
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.A6ResourceRecord.#ctor(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.A6ResourceRecord">A6ResourceRecord</see>.
            </summary>
            <param name="buffer">The arry of unsigned bytes from which to create.</param>
            <param name="index">The index into buffer at which this resource record begins</param>
            <param name="count">The length of the bytes to create this resource record</param>
        </member>
        <member name="P:Aspose.Network.Dns.A6ResourceRecord.PrefixLength">
            <summary>
            Gets or sets the length of prefix
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.A6ResourceRecord.Address">
            <summary>
            Gets or sets the adress
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.A6ResourceRecord.Prefix">
            <summary>
            Gets or sets the prefix
            </summary>
        </member>
        <member name="T:Aspose.Network.Dns.Question">
            <summary>
            Represents the domain question to be queried
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.Question.#ctor">
            <summary>
            Initialize a new instance of the class <see cref="T:Aspose.Network.Dns.Question">Question</see>. 
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.Question.#ctor(System.String)">
            <summary>
            Initialize a new instance of the class <see cref="T:Aspose.Network.Dns.Question">Question</see>. 
            </summary>
            <param name="domainName">The domain name to query.</param>
        </member>
        <member name="M:Aspose.Network.Dns.Question.#ctor(System.String,Aspose.Network.Dns.QueryType)">
            <summary>
            Initialize a new instance of the class <see cref="T:Aspose.Network.Dns.Question">Question</see>. 
            </summary>
            <param name="domainName">The domain name to query.</param>
            <param name="queryType">The type of the query.</param>
        </member>
        <member name="M:Aspose.Network.Dns.Question.#ctor(System.String,Aspose.Network.Dns.QueryType,Aspose.Network.Dns.QueryClass)">
            <summary>
            Initialize a new instance of the class <see cref="T:Aspose.Network.Dns.Question">Question</see>. 
            </summary>
            <param name="domainName">The domain name to query.</param>
            <param name="queryType">The type of the query.</param>
            <param name="queryClass">The class of the query.</param>
        </member>
        <member name="P:Aspose.Network.Dns.Question.DomainName">
            <summary>
            Gets or sets the domain name of the <see cref="T:Aspose.Network.Dns.Question">Question</see> object. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.Question.QueryType">
            <summary>
            Gets or sets the <see cref="T:Aspose.Network.Dns.QueryType">QueryType</see> of the <see cref="T:Aspose.Network.Dns.Question">Question</see> object. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.Question.QueryClass">
            <summary>
            Gets or sets the <see cref="T:Aspose.Network.Dns.QueryClass">QueryClass</see> of the <see cref="T:Aspose.Network.Dns.Question">Question</see> object. 
            </summary>
        </member>
        <member name="T:Aspose.Network.Pop3.Pop3SslSecurityMode">
            <summary>
            Represents the SSL security mode for Pop3Client.
            </summary>
        </member>
        <member name="F:Aspose.Network.Pop3.Pop3SslSecurityMode.Explicit">
            <summary>
            Explicit mode.
            </summary>
        </member>
        <member name="F:Aspose.Network.Pop3.Pop3SslSecurityMode.Implicit">
            <summary>
            Implicit mode.
            </summary>
        </member>
        <member name="T:Aspose.Network.Mime.MimeMessage">
            <summary>
            <p>The MimeMessage class represents an e-mail message that is RFC822 compliant. </p>
            
            <p>The MimeMessage class can load E-Mail message from EML format file (RFC822 compliant format), MHT format file (Microsoft Html format), and MSG format file (Microsoft Outlook Message format).</p>
            
            <p>The MimeMessage class can save to File System in EML format, MHT format.</p>
            
            <p>A MimeMessage instance can convert to a MailMessage instance safely.</p>
            </summary>
            <remarks>
            <p>The MimeMessage class provides similar interfaces as the <see cref="T:Aspose.Network.Mail.MailMessage">MailMessage</see> class. However, the MimeMessage class also provides some kinds of &lt;b&gt;Backward Compatibility&lt;/b&gt; for the previous version.</p>
            
            <p>The <see cref="T:Aspose.Network.Mail.MailMessage">MailMessage</see> class can also perform the constructing and parsing function of the MimeMessage class. It is suppose that you use the MimeMessage class for the purpose to port the code from older version.</p>
            
            </remarks>
            <example>
            <p>The following exmaple demonstrates how to load an e-mail message.</p>
            [C#]
            <code>
            	//Create MailMessage Instance by loading from an Eml file
            	MimeMessage message = MimeMessage.Load(@"c:\message.eml");
            	
                   System.Console.Write("From:");
                   //gets the sender info
                   System.Console.WriteLine(message.From);
                   System.Console.Write("To:");
                   //gets the receiptants info
                   System.Console.WriteLine(message.To);
                   System.Console.Write("Subject:");
                   //gets the subject
                   System.Console.WriteLine(message.Subject);
                   System.Console.WriteLine("HtmlBody:");
                   //gets the htmlbody 
                   System.Console.WriteLine(message.HtmlBody);
                   System.Console.WriteLine("TextBody");
                   //gets the textbody
                   System.Console.WriteLine(message.TextBody);
            
                   SmtpClient client = new SmtpClient("smtp.somebody.com", "somebody", "password");  
            
                   //convert the MimeMessage to MailMessage and send it
                   client.Send(message as MailMessage);
            </code>
            [VB.NET]
            <code>
                   'Create MailMessage Instance by loading from an Eml file
                   Dim message As MimeMessage =  MimeMessage.Load("c:\message.eml") 
               
                   System.Console.Write("From:")
                   'gets the sender info
                   System.Console.WriteLine(message.From)
                   System.Console.Write("To:")
                   'gets the receiptants info
                   System.Console.WriteLine(message.To)
                   System.Console.Write("Subject:")
                   'gets the subject
                   System.Console.WriteLine(message.Subject)
                   System.Console.WriteLine("HtmlBody:")
                   'gets the htmlbody 
                   System.Console.WriteLine(message.HtmlBody)
                   System.Console.WriteLine("TextBody")
                   'gets the textbody
                   System.Console.WriteLine(message.TextBody)
               
                   Dim client As SmtpClient =  New SmtpClient("smtp.somebody.com","somebody","password") 
                   'convert the MimeMessage to MailMessage and send it
                   client.Send(message as MailMessage)
            </code>
            </example>
        </member>
        <member name="M:Aspose.Network.Mime.MimeMessage.#ctor">
            <summary>
            Initializes a new instance of the MimeMessage class.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mime.MimeMessage.#ctor(System.IO.TextReader)">
            <summary>
            Creates a new instance of MimeMessage class.
            <p>Obsoleted. Use <see cref="M:Aspose.Network.Mime.MimeMessage.Load(System.IO.Stream)">Load</see> instead.</p>
            </summary>
            <param name="reader">Stream containing mime-formatted content.</param>
            <remarks>
            <para>For example of usage see <see cref="T:Aspose.Network.Mime.MimeMessage"/></para>
            </remarks>
        </member>
        <member name="M:Aspose.Network.Mime.MimeMessage.#ctor(System.String)">
            <summary>
            Creates a new instance of MimeMessage class.
            <p>Obsoleted. Use <see cref="M:Aspose.Network.Mime.MimeMessage.Load(System.IO.Stream)">Load</see> instead.</p>
            </summary>
            <param name="content">A String that contains the content of the message</param>
        </member>
        <member name="M:Aspose.Network.Mime.MimeMessage.GetAttachments">
            <summary>
            Retrieves a collection of attachments, belonging to the message.
            <p>Obsoleted. Use Attachments property instead.</p>
            </summary>
            <returns>Collection of attachemnts.</returns>
            <remarks>
            <para>For example of usage see <see cref="T:Aspose.Network.Mime.MimeMessage"/></para>
            </remarks>
        </member>
        <member name="M:Aspose.Network.Mime.MimeMessage.GetEmbedded">
            <summary>
            Retrieves a collection of embedded objects, belonging to the message.
            <p>Obsoleted. Use LinkedResources property instead.</p>
            </summary>
            <returns>Collection of embedded objects.</returns>
            <remarks>
            <para>For example of usage see <see cref="T:Aspose.Network.Mime.MimeMessage"/></para>
            </remarks>
        </member>
        <member name="M:Aspose.Network.Mime.MimeMessage.AddAttachment(Aspose.Network.Mail.Attachment)">
            <summary>
            Add an attachment to this this E-Mail message.
            </summary>
            <param name="attachment">The specified <see cref="T:Aspose.Network.Mail.Attachment">atttachment</see> object to be added.</param>
        </member>
        <member name="M:Aspose.Network.Mime.MimeMessage.AddAlternateView(Aspose.Network.Mail.AlternateView)">
            <summary>
            Add an alternative view to this E-Mail message.
            </summary>
            <param name="view">The specified <see cref="T:Aspose.Network.Mail.AlternateView">view</see> object to be added.</param>
        </member>
        <member name="M:Aspose.Network.Mime.MimeMessage.Load(System.IO.Stream)">
            <summary>
            Loads the E-Mail message file (EML format) from the specified stream.
            </summary>
            <param name="stream">The stream containing the E-Mail message to load. </param>
            <returns>A MimeMessage instance loaded.</returns>
        </member>
        <member name="M:Aspose.Network.Mime.MimeMessage.Load(System.IO.Stream,Aspose.Network.Mail.MessageFormat)">
            <summary>
            Loads the E-Mail message file from the specified stream and format.
            </summary>
            <param name="stream">The stream containing the E-Mail message to load. </param>
            <param name="format">Specified the mail message format,it can be in eml,mhtml or msg format.</param>
            <returns>A MimeMessage instance loaded.</returns>
        </member>
        <member name="M:Aspose.Network.Mime.MimeMessage.Load(System.String)">
            <summary>
            Loads the E-Mail message file (EML format) from the specified file.
            </summary>
            <param name="fileName">The name of the message file.</param>
            <returns>A MimeMessage instance loaded.</returns>
        </member>
        <member name="M:Aspose.Network.Mime.MimeMessage.Load(System.String,Aspose.Network.Mail.MessageFormat)">
            <summary>
            Loads the E-Mail message file from the specified file.
            </summary>
            <param name="fileName">The name of the message file.</param>
            <param name="format">Specified the mail message format,it can be in eml,mhtml or msg format.</param>
            <returns>A MimeMessage instance loaded.</returns>
        </member>
        <member name="M:Aspose.Network.Mime.MimeMessage.Save(System.IO.Stream)">
            <summary>
            Saves the content of MimeMessage to specified Stream.
            </summary>
            <param name="stream">Specified the Stream where the message will be saved. </param>
        </member>
        <member name="M:Aspose.Network.Mime.MimeMessage.Save(System.IO.TextWriter)">
            <summary>
            Saves this mail message to the specified TextWriter 
            </summary>
            <param name="writer">Specified the TextWriter where the message will be saved</param>
        </member>
        <member name="M:Aspose.Network.Mime.MimeMessage.Save(System.IO.Stream,Aspose.Network.Mail.MessageFormat)">
            <summary>
            Saves this mail message to the specified Stream in specified Format
            </summary>
            <param name="stream">Specified the Stream where the mail message will be saved</param>
            <param name="format">An MessagFormat that specifies the format of the saved mail message.</param>
        </member>
        <member name="M:Aspose.Network.Mime.MimeMessage.Save(System.String)">
            <summary>
            Saves this mail message to the specified file
            </summary>
            <param name="fileName">String that contains the name of the file to which to save this  mail message </param>
        </member>
        <member name="M:Aspose.Network.Mime.MimeMessage.Save(System.String,Aspose.Network.Mail.MessageFormat)">
            <summary>
            Saves this mail message to the specified file in specified Format
            </summary>
            <param name="fileName">String that contains the name of the file to which to save this  mail message </param>
            <param name="format">An MessagFormat that specifies the format of the saved mail message.</param>
        </member>
        <member name="M:Aspose.Network.Mime.MimeMessage.ToString">
            <summary>
            Overrided. Return String that contains the mail message content in MIME format.
            </summary>
            <returns>String that contains the mail message content in MIME format</returns>
        </member>
        <member name="M:Aspose.Network.Mime.MimeMessage.op_Implicit(Aspose.Network.Mime.MimeMessage)~Aspose.Network.Mail.MailMessage">
            <summary>
            Implicit operator for converting <see cref="N:Aspose.Network.Mime">MimeMessage</see> type to <see cref="N:Aspose.Network.Mail">MailMessage</see> type.
            </summary>
            <param name="message">The MimeMessage to be converted.</param>
            <returns>The MailMessage instance.</returns>
        </member>
        <member name="M:Aspose.Network.Mime.MimeMessage.Clone">
            <summary>
             Clones a new instance of the MimeMessage.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.Network.Mime.MimeMessage.Dispose">
            <summary>
            Releases the unmanaged resources used by the MimeMessage.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mime.MimeMessage.HtmlContent">
            <summary>
            Tries to retrieves message body of type text/html.
            <p>Obsoleted. Use HtmlBody property instead.</p>
            </summary>
            <returns>Decoded content of text/html body.</returns>
            <remarks>
            <para>For example of usage see <see cref="T:Aspose.Network.Mime.MimeMessage"/></para>
            </remarks>
        </member>
        <member name="P:Aspose.Network.Mime.MimeMessage.PlainContent">
            <summary>
            Tries to retrieve message body of type text/plain.
            <p>Obsoleted. Use TextBody property instead.</p> 
            </summary>
            <returns>Decoded content of text/plain body.</returns>
            <remarks>
            <para>For example of usage see <see cref="T:Aspose.Network.Mime.MimeMessage"/></para>
            </remarks>
        </member>
        <member name="P:Aspose.Network.Mime.MimeMessage.DispositionNotificationTo">
            <summary>
            Gets or sets the disposition notification of the message.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mime.MimeMessage.AlternateViews">
            <summary>
            Gets the AlternateViewCollection object which contains all the alternateView objects in this MailMessage
            </summary>
        </member>
        <member name="P:Aspose.Network.Mime.MimeMessage.Attachments">
            <summary>
            Gets the AttachmentCollection object which contains all the attachments.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mime.MimeMessage.Bcc">
            <summary>
            Gets or Sets the address collection that contains the blind carbon copy (BCC) recipients for this e-mail message.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mime.MimeMessage.HtmlBody">
            <summary>
            Gets or Sets the html content
            </summary>
        </member>
        <member name="P:Aspose.Network.Mime.MimeMessage.TextBody">
            <summary>
            Gets or Sets the plain text content
            </summary>
        </member>
        <member name="P:Aspose.Network.Mime.MimeMessage.CC">
            <summary>
            Gets or sets the address collection that contains the carbon copy (CC) recipients for this e-mail message.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mime.MimeMessage.Date">
            <summary>
            Gets or Sets the DateTime of this mail.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mime.MimeMessage.EnvelopeId">
            <summary>
            Gets the envelope identification 
            </summary>
        </member>
        <member name="P:Aspose.Network.Mime.MimeMessage.From">
            <summary>
            Gets or sets the from address for this e-mail message.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mime.MimeMessage.IsBodyHtml">
            <summary>
            Gets if this mail message contains html body
            </summary>
        </member>
        <member name="P:Aspose.Network.Mime.MimeMessage.IsBodyText">
            <summary>
            Get if this mail message contains text body.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mime.MimeMessage.Headers">
            <summary>
            Gets all the MIME Headers
            </summary>
        </member>
        <member name="P:Aspose.Network.Mime.MimeMessage.MessageId">
            <summary>
            Gets the message identification
            </summary>
        </member>
        <member name="P:Aspose.Network.Mime.MimeMessage.XMailer">
            <summary>
            Gets or sets the X-Mailer header.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mime.MimeMessage.Sensitivity">
            <summary>
            Gets or sets the Sensitivity header.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mime.MimeMessage.Priority">
            <summary>
            Gets or Sets the Priority of the mail message
            </summary>
        </member>
        <member name="P:Aspose.Network.Mime.MimeMessage.ReplyTo">
            <summary>
            Gets or sets "replyTo" address of mail message. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Mime.MimeMessage.SubjectEncoding">
            <summary>
            Gets or Sets the encoding used to encode the subject
            </summary>
        </member>
        <member name="P:Aspose.Network.Mime.MimeMessage.Subject">
            <summary>
            Gets or sets subject of mail message. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Mime.MimeMessage.LinkedResources">
            <summary>
            Gets all the linkedresources of this mail message
            </summary>
        </member>
        <member name="P:Aspose.Network.Mime.MimeMessage.Sender">
            <summary>
            Gets or sets the sender address
            </summary>
        </member>
        <member name="P:Aspose.Network.Mime.MimeMessage.To">
            <summary>
            Gets or sets the To addresses 
            </summary>
        </member>
        <member name="T:Aspose.Network.Mail.MessageFormat">
            <summary>
            Represents the mail message format.It can be in eml,msg or mhtml format.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.MessageFormat.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the specified object is a MessageFormat object that is equivalent to this MessageFormat object.
            </summary>
            <param name="o">The object to test</param>
            <returns>Returns true if o is a MessageFormat object that is equivalent to this MessageFormat object; otherwise, returns false.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Aspose.Network.Mail.MessageFormat.GetHashCode" -->
        <member name="M:Aspose.Network.Mail.MessageFormat.ToString">
            <summary>
            Converts this MessageFormat object to a human-readable string.
            </summary>
            <returns>A string representing this MessageFormat object.</returns>
        </member>
        <member name="P:Aspose.Network.Mail.MessageFormat.Eml">
            <summary>
            Gets the eml format.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MessageFormat.Mht">
            <summary>
            Gets the mht format.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MessageFormat.Msg">
            <summary>
            Gets the msg format.
            </summary>
        </member>
        <member name="T:Aspose.Network.Mail.Calendaring.CalendarDay">
            <summary>
            Represents the calendar day.
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.Calendaring.CalendarDay.Day">
            <summary>
            Day.
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.Calendaring.CalendarDay.Friday">
            <summary>
            Friday.
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.Calendaring.CalendarDay.Monday">
            <summary>
            Monday.
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.Calendaring.CalendarDay.Saturday">
            <summary>
            Saturday.
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.Calendaring.CalendarDay.Sunday">
            <summary>
            Sunday.
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.Calendaring.CalendarDay.Thursday">
            <summary>
            Thursday.
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.Calendaring.CalendarDay.Tuesday">
            <summary>
            Tuesday.
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.Calendaring.CalendarDay.Wednesday">
            <summary>
            Wednesday.
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.Calendaring.CalendarDay.WeekDay">
            <summary>
            WeekDay.
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.Calendaring.CalendarDay.WeekendDay">
            <summary>
            WeekendDay.
            </summary>
        </member>
        <member name="T:Aspose.Network.Imap.ImapMessageInfoCollection">
            <summary>
            Provides a container for a collection of ImapMessageInfo objects
            </summary>
        </member>
        <member name="M:Aspose.Network.Imap.ImapMessageInfoCollection.#ctor">
            <summary>
            Initializes a new instance of the ImapMessageCollection class. 
            </summary>
        </member>
        <member name="M:Aspose.Network.Imap.ImapMessageInfoCollection.Add(Aspose.Network.Imap.ImapMessageInfo)">
            <summary>
            Adds the ImapMessageInfo to the ImapMessageCollection. 
            </summary>
            <param name="item">The ImapMessageInfo to be added.</param>
        </member>
        <member name="M:Aspose.Network.Imap.ImapMessageInfoCollection.Remove(Aspose.Network.Imap.ImapMessageInfo)">
            <summary>
            Remove specifed ImapMessageInfo object from this collection.
            </summary>
            <param name="item">The ImapMessageInfo object to be remove.</param>
            <returns>False if this collection doesn't contains specified object.True if removed successfully.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapMessageInfoCollection.RemoveAt(System.Int32)">
            <summary>
            Remove a ImapMessageInfo in specified index from this collection.
            </summary>
            <param name="index">The index of the message to be remove.</param>
        </member>
        <member name="M:Aspose.Network.Imap.ImapMessageInfoCollection.Insert(System.Int32,Aspose.Network.Imap.ImapMessageInfo)">
            <summary>
            Insert the specified ImapMessagInfo object at the specified index.
            </summary>
            <param name="index">The index that the specified object will be inserted into.</param>
            <param name="item">The ImapMessagInfo object to be inserted.</param>
        </member>
        <member name="P:Aspose.Network.Imap.ImapMessageInfoCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="T:Aspose.Network.Imap.ImapFolderInfoCollection">
            <summary>
            Provides a container for a collection of ImapFolderInfo objects. 
            </summary>
        </member>
        <member name="M:Aspose.Network.Imap.ImapFolderInfoCollection.#ctor">
            <summary>
            Initializes a new instance of the ImapFolderInfoCollection class. 
            </summary>
        </member>
        <member name="M:Aspose.Network.Imap.ImapFolderInfoCollection.Add(Aspose.Network.Imap.ImapFolderInfo)">
            <summary>
            Adds the ImapFolderInfo to the ImapFolderInfoCollection. 
            </summary>
            <param name="item">The ImapFolderInfo object.</param>
        </member>
        <member name="M:Aspose.Network.Imap.ImapFolderInfoCollection.RemoveAt(System.Int32)">
            <summary>
            Remove a folder info at specified index.
            </summary>
            <param name="index">The zero-based index of the ImapFolderInfo to remove. </param>
        </member>
        <member name="P:Aspose.Network.Imap.ImapFolderInfoCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="T:Aspose.Network.Verify.ValidationPolicy">
            <summary>
            Presents the policy of validating email address.
            </summary>
        </member>
        <member name="F:Aspose.Network.Verify.ValidationPolicy.SyntaxOnly">
            <summary>
            Validating the syntax of the email address.
            </summary>
        </member>
        <member name="F:Aspose.Network.Verify.ValidationPolicy.SyntaxAndDomain">
            <summary>
            Validating the syntax of the email address firstly, and then validate the domain of the email.
            </summary>
        </member>
        <member name="F:Aspose.Network.Verify.ValidationPolicy.MailServer">
            <summary>
            Validating the email address by trying to connet to the mail server. 
            </summary>
        </member>
        <member name="T:Aspose.Network.Logging.AppenderCollection">
            <summary>
            Represents the collecton for Appender objects.
            </summary>
        </member>
        <member name="M:Aspose.Network.Logging.AppenderCollection.#ctor">
            <summary>
            Initializes a new instance of the AppenderCollection class.
            </summary>
        </member>
        <member name="M:Aspose.Network.Logging.AppenderCollection.Add(Aspose.Network.Logging.IAppender)">
            <summary>
            Adds an IAppender object to the end of collection.
            </summary>
            <param name="value">The IAppender to be added to the end of the collection. The value can be null. </param>
            <returns>The index at which the value has been added.</returns>
        </member>
        <member name="M:Aspose.Network.Logging.AppenderCollection.Contains(Aspose.Network.Logging.IAppender)">
            <summary>
            Determines whether an element is in the collection.
            </summary>
            <param name="item">The Object to locate in the ArrayList. The value can be null. </param>
            <returns></returns>
        </member>
        <member name="M:Aspose.Network.Logging.AppenderCollection.IndexOf(Aspose.Network.Logging.IAppender)">
            <summary>
            Searches for the specified IAppender and returns the zero-based index of the first occurrence within the entire collection.
            </summary>
            <param name="value">The IAppender to locate in the ArrayList. The value can be null. </param>
            <returns>The zero-based index of the first occurrence of value within the entire collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Aspose.Network.Logging.AppenderCollection.Insert(System.Int32,Aspose.Network.Logging.IAppender)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">The IAppender to insert. The value can be null. </param>
            <param name="value">The zero-based index at which value should be inserted. </param>
        </member>
        <member name="M:Aspose.Network.Logging.AppenderCollection.Remove(Aspose.Network.Logging.IAppender)">
            <summary>
            Removes the first occurrence of a specific IAppender object from the collection.
            </summary>
            <param name="value">The IAppender to remove from the ArrayList. The value can be null. </param>
        </member>
        <member name="T:Aspose.Network.Win32.EditionType">
            <summary>
            Identifies edition type.
            </summary>
        </member>
        <member name="T:Aspose.Network.Win32.LicenseType">
            <summary>
            Specifies license type.
            </summary>
        </member>
        <member name="F:Aspose.Network.Win32.LicenseType.Winform">
            <summary>
            Windows development license. Tied to owner and organization name set in Windows.
            </summary>
        </member>
        <member name="F:Aspose.Network.Win32.LicenseType.Webform">
            <summary>
            Web development license. Tied to owner and organization name set in Windows.
            </summary>
        </member>
        <member name="F:Aspose.Network.Win32.LicenseType.Winoem">
            <summary>
            Windows deployment license. Tied to customer's assembly filename, AssemblyCompany and AssemblyProduct.
            </summary>
        </member>
        <member name="F:Aspose.Network.Win32.LicenseType.Weboem">
            <summary>
            Web application deployment license. Tied to customer's assembly filename, AssemblyCompany and AssemblyProduct.
            This type of license is used when user selectes Multiple Domain and Multiple Web Servers.
            </summary>
        </member>
        <member name="F:Aspose.Network.Win32.LicenseType.Website">
            <summary>
            Web domain name deployment license. Tied to customer's domain name(s).
            This license is used when user selectes One Domain for deployment.
            </summary>
        </member>
        <member name="F:Aspose.Network.Win32.LicenseType.Webserver">
            <summary>
            Web server deployment license. Tied to customer's IP address(es).
            This type of license is used when user selects Multiple Domain and One Web Server
            </summary>
        </member>
        <member name="F:Aspose.Network.Win32.LicenseType.Unlimited">
            <summary>
            Unlimited license.
            </summary>
        </member>
        <member name="T:Aspose.Network.Win32.LicenseController">
            <summary>
            Provides static methods to initialize a component with a license and perform necessary checks.
            If no license is specified, evaluation license is used.
            </summary>
        </member>
        <member name="M:Aspose.Network.Win32.LicenseController.SetLicense(System.String,System.String,System.String)">
            <summary>
            Initializes a license from a file, allows evalutaion license to be set.
            </summary>
        </member>
        <member name="M:Aspose.Network.Win32.LicenseController.SetLicenseCOM(System.String,System.String,System.String)">
            <summary>
            Special case for COM applications using our component.
            
            The main problem is that we cannot check the license fields related to the calling assembly,
            so we have to relax this check. However, we do not just relax - as it make it possible for 
            anyone to call this method and avoid license checks.
            
            I've discovered that when a COM client calls our component then the calling assembly is
            our component itself. As under no other circumstances this can be happening, 
            we check if the calling assembly is us - then and only then we relax license 
            checks related to the calling assembly.
            </summary>
        </member>
        <member name="M:Aspose.Network.Win32.LicenseController.SetLicense(System.String,System.String,System.IO.TextReader)">
            <summary>
            Initializes a license from a reader.
            </summary>
        </member>
        <member name="M:Aspose.Network.Win32.LicenseController.CheckLicense">
            <summary>
            Checks for a legal license and throw an exception if needed.
            </summary>
        </member>
        <member name="M:Aspose.Network.Win32.LicenseController.IsEval">
            <summary>
            Returns true if software must expose evaluation version functionality.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.Network.Win32.LicenseController.CheckEdition(Aspose.Network.Win32.EditionType,System.String)">
            <summary>
            Call this when user attempts to use a feature that is limited by edition type.
            Throws a message explaining the license limitation to the user.
            </summary>
            <param name="wantEditionType"></param>
            <param name="message"></param>
        </member>
        <member name="M:Aspose.Network.Win32.LicenseController.SetLicenseFromReader(System.String,System.String,System.IO.TextReader,System.Web.UI.Page)">
            <summary>
            Reads the license and initializes fields that take part in license checks.
            </summary>
            <param name="callingAssemblyFile">Filename of the calling assembly.</param>
            <param name="decryptKey">Product specific decryption key.</param>
            <param name="licenseReader">Can be null to indicate evaluation license.</param>
            <param name="page">Required for web type licenses. Pass null for windows licenses.</param>
        </member>
        <member name="M:Aspose.Network.Win32.LicenseController.SetLicenseFromFile(System.String,System.String,System.String,System.Web.UI.Page)">
            <summary>
            Just creates a reader and calls SetLicenseFromReader.
            </summary>
        </member>
        <member name="M:Aspose.Network.Win32.LicenseController.StringToLicenseType(System.String)">
            <summary>
            Converts string into license type, throws if there is no match.
            </summary>
        </member>
        <member name="M:Aspose.Network.Win32.LicenseController.StringToEditionType(System.String)">
            <summary>
            Converts string into edition type, throws is there is no match.
            </summary>
        </member>
        <member name="M:Aspose.Network.Win32.LicenseController.EditionTypeToString(Aspose.Network.Win32.EditionType)">
            <summary>
            Need to have this function, cannot use EditionType.ToString() because
            edition type will be obfuscated and appear garbled to the user.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aspose.Network.Icmp.EchoMessage">
            <summary>
            Represents the echo message in ICMP protocol.
            </summary>
        </member>
        <member name="M:Aspose.Network.Icmp.EchoMessage.#ctor">
            <summary>
            Creates a new instance of EchoMessage.
            </summary>
        </member>
        <member name="M:Aspose.Network.Icmp.EchoMessage.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of EchoMessage.
            </summary>
        </member>
        <member name="M:Aspose.Network.Icmp.EchoMessage.CreateIdentifier">
            <summary>
            Creates a new identifier.
            </summary>
            <returns>A new identifier.</returns>
        </member>
        <member name="P:Aspose.Network.Icmp.EchoMessage.Identifier">
            <summary>
            Gets or sets identifier.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.EchoMessage.SequenceNumber">
            <summary>
            Gets or sets sequence number.
            </summary>
        </member>
        <member name="T:Aspose.Network.Icmp.DestinationUnreachableMessage">
            <summary>
            Represents a destination unreachable message.
            </summary>
        </member>
        <member name="M:Aspose.Network.Icmp.DestinationUnreachableMessage.#ctor">
            <summary>
            Initializes a new instance of the DestinationUnreachableMessage class.
            </summary>
        </member>
        <member name="T:Aspose.Network.Dns.HINFOResourceRecord">
            <summary>
            Represents a HINFO DNS resource record
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.HINFOResourceRecord.#ctor">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.HINFOResourceRecord">HINFOResourceRecord</see>.
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.HINFOResourceRecord.#ctor(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.HINFOResourceRecord">HINFOResourceRecord</see>.
            </summary>
            <param name="buffer">The arry of unsigned bytes from which to create.</param>
            <param name="index">The index into buffer at which this resource record begins</param>
            <param name="count">The length of the bytes to create this resource record</param>
        </member>
        <member name="P:Aspose.Network.Dns.HINFOResourceRecord.CPU">
            <summary>
            Gets or sets the cpu
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.HINFOResourceRecord.OS">
            <summary>
            Gets or sets the os
            </summary>
        </member>
        <member name="T:Aspose.Network.Dns.QueryMessage">
            <summary>
            Represents the query sent to the DNS servers.
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.QueryMessage.#ctor(System.String,Aspose.Network.Dns.QueryType)">
            <summary>
            Initialize a new instance of the class <see cref="T:Aspose.Network.Dns.QueryMessage"/>.
            </summary>
            <param name="domainName">The domain name to query.</param>
            <param name="queryType">The type of the query.</param>
        </member>
        <member name="M:Aspose.Network.Dns.QueryMessage.#ctor(System.String,Aspose.Network.Dns.QueryType,Aspose.Network.Dns.QueryClass)">
            <summary>
            Initialize a new instance of the class <see cref="T:Aspose.Network.Dns.QueryMessage"/>.
            </summary>
            <param name="domainName">The domain name to query.</param>
            <param name="queryType">The type of the query.</param>
            <param name="queryClass">The class of the query.</param>
        </member>
        <member name="M:Aspose.Network.Dns.QueryMessage.#ctor(Aspose.Network.Dns.Question)">
            <summary>
            Initialize a new instance of the class <see cref="T:Aspose.Network.Dns.QueryMessage"/>.
            </summary>
            <param name="question">The question to send by the query.</param>
        </member>
        <member name="M:Aspose.Network.Dns.QueryMessage.#ctor">
            <summary>
            Initialize a new instance of the class <see cref="T:Aspose.Network.Dns.QueryMessage"/>.
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.QueryMessage.Questions">
            <summary>
            Gets or sets the questions in the query message.
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.QueryMessage.AdditionalRecords">
            <summary>
            Gets or sets the additional records
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.QueryMessage.Answers">
            <summary>
            Gets or sets the resource record received from the Dns servers.
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.QueryMessage.Authorities">
            <summary>
            Gets or sets the authorities resource records
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.QueryMessage.AdditionalRecordsCount">
            <summary>
            Specifying the number of resource records in the additional records session.
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.QueryMessage.AnswersCount">
            <summary>
            Specifying the number of resource records in the answer section.
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.QueryMessage.NameServersCount">
            <summary>
            Specifying the number of name server resource records in the authority records section.
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.QueryMessage.QueriesCount">
            <summary>
            Specifying the number of entryies in the question section.
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.QueryMessage.Identifier">
            <summary>
            A 16 bit identifier assigned by the program that generates any kind of query. this identifier is copied the corresponding reply and can be used by the requester to match up replies to outstanding queries.
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.QueryMessage.MessageType">
            <summary>
            Gets or sets the message tpe
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.QueryMessage.OptionCode">
            <summary>
            Gets or sets the  option code
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.QueryMessage.AuthoritativeAnswer">
            <summary>
            Gets or sets the signal of authoritative answer
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.QueryMessage.Truncation">
            <summary>
            Gets or sets the signal for truncation
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.QueryMessage.RecursionDesired">
            <summary>
            Gets or sets the signal indicates whether recursion is desired.
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.QueryMessage.RecursionAvailable">
            <summary>
            Gets or sets the signal indicates whether recursion is availble
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.QueryMessage.Reserved">
            <summary>
            Gets or sets the reserved field
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.QueryMessage.ResponseCode">
            <summary>
            Gets or sets the response code
            </summary>
        </member>
        <member name="T:Aspose.Network.Dns.QueryMessage.HeaderInfo">
            <summary>
            Present the header information in the DNS query message instance.
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.QueryMessage.HeaderInfo.AdditionalRecordsCount">
            <summary>
            Specifying the number of resource records in the additional records session.
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.QueryMessage.HeaderInfo.AnswersCount">
            <summary>
            Specifying the number of resource records in the answer section.
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.QueryMessage.HeaderInfo.NameServersCount">
            <summary>
            Specifying the number of name server resource records in the authority records section.
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.QueryMessage.HeaderInfo.QueriesCount">
            <summary>
            Specifying the number of entryies in the question section.
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.QueryMessage.HeaderInfo.Identifier">
            <summary>
            A 16 bit identifier assigned by the program that generates any kind of query. this identifier is copied the corresponding reply and can be used by the requester to match up replies to outstanding queries.
            </summary>
        </member>
        <member name="T:Aspose.Network.Dns.MessageType">
            <summary>
            Represents the messages received from the DNS servers is a query, or a response. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.MessageType.Query">
            <summary>
            Query message. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.MessageType.Response">
            <summary>
            Response message.
            </summary>
        </member>
        <member name="T:Aspose.Network.Outlook.NDRReportMailMessageInterpretor">
            <summary>
            Represents a Non-Delivery Report MailMesssage interpretor.
            </summary>
        </member>
        <member name="T:Aspose.Network.Outlook.MailMessageInterpretor">
            <summary>
            The base class for MailMessage interpretor. 
            </summary>
        </member>
        <member name="M:Aspose.Network.Outlook.MailMessageInterpretor.#ctor">
            <summary>
            Initializes a new instance of the MailMessageInterpretor class.
            </summary>
        </member>
        <member name="M:Aspose.Network.Outlook.MailMessageInterpretor.LoadMessageHeader(Aspose.Network.Mail.MailMessage,Aspose.Network.Outlook.MapiMessage)">
            <summary>
            Imports the headers of MIME protocol to a MailMessage from the MapiMessage instance.
            </summary>
            <param name="mailmessage">The target MailMessage.</param>
            <param name="mapiMessage">The source MapiMessage.</param>
        </member>
        <member name="M:Aspose.Network.Outlook.MailMessageInterpretor.LoadMessageBodyHtml(Aspose.Network.Mail.MailMessage,Aspose.Network.Outlook.MapiMessage)">
            <summary>
            Creates the HtmlBody property of the MailMessage according to the specified MapiMessage instance.
            </summary>
            <param name="mailmessage">The target MailMessage.</param>
            <param name="mapiMessage">The source MapiMessage.</param>
        </member>
        <member name="M:Aspose.Network.Outlook.MailMessageInterpretor.LoadMessageBodyText(Aspose.Network.Mail.MailMessage,Aspose.Network.Outlook.MapiMessage)">
            <summary>
            Creates the TextBody property of the MailMessage according to the specified MapiMessage instance.
            </summary>
            <param name="mailmessage">The target MailMessage.</param>
            <param name="mapiMessage">The source MapiMessage.</param>
        </member>
        <member name="M:Aspose.Network.Outlook.MailMessageInterpretor.LoadMessageBody(Aspose.Network.Mail.MailMessage,Aspose.Network.Outlook.MapiMessage)">
            <summary>
            Creates the Body (HtmlBody and TextBody) of the MailMessage according to the specified MapiMessage instance.
            </summary>
            <param name="mailmessage">The target MailMessage.</param>
            <param name="mapiMessage">The source MapiMessage.</param>
        </member>
        <member name="M:Aspose.Network.Outlook.MailMessageInterpretor.LoadAttachment(Aspose.Network.Mail.MailMessage,Aspose.Network.Outlook.MapiMessage)">
            <summary>
            Imports the attachments from to the specified MapiMessage instance.
            </summary>
            <param name="mailmessage">The target MailMessage.</param>
            <param name="mapiMessage">The source MapiMessage.</param>
        </member>
        <member name="M:Aspose.Network.Outlook.MailMessageInterpretor.LoadEachAttachment(Aspose.Network.Mail.MailMessage,Aspose.Network.Outlook.MapiAttachment,System.Int32)">
            <summary>
            Imports each attachment from to the specified MapiMessage instance.
            </summary>
            <param name="mailmessage">The target MailMessage.</param>
            <param name="mapiMessage">The source MapiMessage.</param>
        </member>
        <member name="M:Aspose.Network.Outlook.MailMessageInterpretor.Interpret(Aspose.Network.Outlook.MapiMessage)">
            <summary>
            Imports the MapiMessage information into a MailMessage object.
            </summary>
            <param name="mapiMessage">The source MapiMessage.</param>
            <returns>The MailMessage.</returns>
        </member>
        <member name="M:Aspose.Network.Outlook.MailMessageInterpretor.Save(Aspose.Network.Outlook.MapiMessage,System.IO.Stream,Aspose.Network.Mail.MessageFormat)">
            <summary>
            Saves the specified MapiMessage to a Stream.
            </summary>
            <param name="mapiMessage">The source MapiMessage instance.</param>
            <param name="stream">The target stream</param>
            <param name="messageFormat">The message format.</param>
        </member>
        <member name="M:Aspose.Network.Outlook.MailMessageInterpretor.Save(Aspose.Network.Outlook.MapiMessage,System.IO.Stream,Aspose.Network.Mail.MessageFormat,Aspose.Network.Mail.IMessageFormatter)">
            <summary>
            Saves the specified MapiMessage to a Stream.
            </summary>
            <param name="mapiMessage">The source MapiMessage instance.</param>
            <param name="stream">The target stream</param>
            <param name="messageFormat">The message format.</param>
            <param name="formatter">The formatter.</param>
        </member>
        <member name="M:Aspose.Network.Outlook.MailMessageInterpretor.Clone">
            <summary>
            Creates a copy of the current instance.
            </summary>
            <returns>A copy of MailMessageInterpretor.</returns>
        </member>
        <member name="M:Aspose.Network.Outlook.NDRReportMailMessageInterpretor.#ctor">
            <summary>
            Initializes a new instance of the NDRReportMailMessageInterpretor class.
            </summary>
        </member>
        <member name="M:Aspose.Network.Outlook.NDRReportMailMessageInterpretor.Clone">
            <summary>
            Creates a copy of the current instance.
            </summary>
            <returns>A copy of NDRReportMailMessageInterpretor.</returns>
        </member>
        <member name="M:Aspose.Network.Outlook.NDRReportMailMessageInterpretor.LoadMessageHeader(Aspose.Network.Mail.MailMessage,Aspose.Network.Outlook.MapiMessage)">
            <summary>
            Imports the headers of MIME protocol to a MailMessage from the MapiMessage instance.
            </summary>
            <param name="mailmessage">The target MailMessage.</param>
            <param name="mapiMessage">The source MapiMessage.</param>
        </member>
        <member name="M:Aspose.Network.Outlook.NDRReportMailMessageInterpretor.LoadMessageBody(Aspose.Network.Mail.MailMessage,Aspose.Network.Outlook.MapiMessage)">
            <summary>
            Creates the Body (HtmlBody and TextBody) of the MailMessage according to the specified MapiMessage instance.
            </summary>
            <param name="mailmessage">The target MailMessage.</param>
            <param name="mapiMessage">The source MapiMessage.</param>
        </member>
        <member name="T:Aspose.Network.Mime.TransferEncoding">
            <summary>
            Specifies the Content-Transfer-Encoding header information for an e-mail message attachment. 
            </summary>
            <remarks>
            The values in the TransferEncoding enumeration are used with the AttachmentBase.TransferEncoding property.
            The Content-Transfer-Encoding header specifies the encoding of the associated message body so that it meets SMTP requirements. SMTP requires data for transport to be in 7-bit US-ASCII characters with lines no longer than 1000 characters. \
            Content-Transfer-Encoding values are described in detail in RFC 2045 Section 6, available at http://www.ietf.org.
            </remarks>
        </member>
        <member name="F:Aspose.Network.Mime.TransferEncoding.Base64">
            <summary>
            Encodes stream-based data. See RFC 2405 Section 6. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Mime.TransferEncoding.Binary">
            <summary>
            Encoding stream-based data. The data is where any sequence of octets whatsoever is allowed.
            See RFC2405 Section 2.9. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Mime.TransferEncoding.EightBit">
            <summary>
            Used for data that is not encoded. The data is all represented as relatively short lines with 998 octets or less between CRLF line separation sequences [RFC-821]), but octets with decimal values greater than 127 may be used.
            See RFC2405 Section 2.8. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Mime.TransferEncoding.QuotedPrintable">
            <summary>
            Encodes data that consists of printable characters in the US-ASCII character set. See RFC 2405 Section 6. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Mime.TransferEncoding.SevenBit">
            <summary>
            Used for data that is not encoded. The data is in 7-bit US-ASCII characters with a total line length of no longer than 1000 characters. See RFC2405 Section 2.7. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Mime.TransferEncoding.UnixToUnix">
            <summary>
            Unix-to-Unix encoding.
            </summary>
        </member>
        <member name="F:Aspose.Network.Mime.TransferEncoding.Unknown">
            <summary>
            Indicates that the transfer encoding is unknown. 
            </summary>
        </member>
        <member name="T:Aspose.Network.Mail.Calendaring.DailyRecurrencePattern">
            <summary>
            Represents a daily recurrence pattern.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.Calendaring.DailyRecurrencePattern.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the DailyRecurrencePattern class.
            </summary>
            <param name="endDate">The end date.</param>
        </member>
        <member name="M:Aspose.Network.Mail.Calendaring.DailyRecurrencePattern.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the DailyRecurrencePattern class.
            </summary>
            <param name="occurs">The occurs.</param>
        </member>
        <member name="M:Aspose.Network.Mail.Calendaring.DailyRecurrencePattern.#ctor(System.DateTime,System.Int32)">
            <summary>
            Initializes a new instance of the DailyRecurrencePattern class.
            </summary>
            <param name="endDate">The end date.</param>
            <param name="interval">The interval.</param>
        </member>
        <member name="M:Aspose.Network.Mail.Calendaring.DailyRecurrencePattern.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the DailyRecurrencePattern class.
            </summary>
            <param name="occurs">The occurs.</param>
            <param name="interval">The interval.</param>
        </member>
        <member name="T:Aspose.Network.WhoIs.QueryCompletedEventArgs">
            <summary>
            Provides the event data for QueryCompleted event.
            </summary>
        </member>
        <member name="M:Aspose.Network.WhoIs.QueryCompletedEventArgs.#ctor(Aspose.Network.WhoIs.WhoIsClient,System.IAsyncResult)">
            <summary>
            Initializes a new instance of the QueryCompletedEventArgs class.
            </summary>
            <param name="sender">The sender.</param>
            <param name="asyncResult">The AsyncResult referring the operation.</param>
        </member>
        <member name="P:Aspose.Network.WhoIs.QueryCompletedEventArgs.AsyncResult">
            <summary>
            Gest the AsyncResult referring the operation.
            </summary>
        </member>
        <member name="P:Aspose.Network.WhoIs.QueryCompletedEventArgs.Answer">
            <summary>
            Gets the answer.
            </summary>
        </member>
        <member name="T:Aspose.Network.Mail.SmtpSslSecurityMode">
            <summary>
            Represents the SSL security mode for SmtpClient.
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.SmtpSslSecurityMode.Explicit">
            <summary>
            Explicit mode.
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.SmtpSslSecurityMode.Implicit">
            <summary>
            Implicit mode.
            </summary>
        </member>
        <member name="T:Aspose.Network.Logging.LogLevel">
            <summary>
            Defines available log levels.
            </summary>
        </member>
        <member name="F:Aspose.Network.Logging.LogLevel.Trace">
            <summary>
            The Trace level.
            </summary>
        </member>
        <member name="F:Aspose.Network.Logging.LogLevel.Debug">
            <summary>
            The Debug level.
            </summary>
        </member>
        <member name="F:Aspose.Network.Logging.LogLevel.Information">
            <summary>
            The Info level.
            </summary>
        </member>
        <member name="F:Aspose.Network.Logging.LogLevel.Warning">
            <summary>
            The Warn level.
            </summary>
        </member>
        <member name="F:Aspose.Network.Logging.LogLevel.Error">
            <summary>
            The Error level.
            </summary>
        </member>
        <member name="F:Aspose.Network.Logging.LogLevel.Fatal">
            <summary>
            The Fatal level.
            </summary>
        </member>
        <member name="M:Aspose.Network.Logging.LogLevel.op_LessThanOrEqual(Aspose.Network.Logging.LogLevel,Aspose.Network.Logging.LogLevel)">
            <summary>
            Compares two <see cref="T:Aspose.Network.Logging.LogLevel"/> objects 
            and returns a value indicating whether 
            the first one is less than or equal to the second one.
            </summary>
            <param name="l1">The first level.</param>
            <param name="l2">The second level.</param>
            <returns>The value of <c>l1.Ordinal &lt;= l2.Ordinal</c></returns>
        </member>
        <member name="M:Aspose.Network.Logging.LogLevel.op_GreaterThanOrEqual(Aspose.Network.Logging.LogLevel,Aspose.Network.Logging.LogLevel)">
            <summary>
            Compares two <see cref="T:Aspose.Network.Logging.LogLevel"/> objects 
            and returns a value indicating whether 
            the first one is greater than or equal to the second one.
            </summary>
            <param name="l1">The first level.</param>
            <param name="l2">The second level.</param>
            <returns>The value of <c>l1.Ordinal &gt;= l2.Ordinal</c></returns>
        </member>
        <member name="M:Aspose.Network.Logging.LogLevel.op_LessThan(Aspose.Network.Logging.LogLevel,Aspose.Network.Logging.LogLevel)">
            <summary>
            Compares two <see cref="T:Aspose.Network.Logging.LogLevel"/> objects 
            and returns a value indicating whether 
            the first one is less than the second one.
            </summary>
            <param name="l1">The first level.</param>
            <param name="l2">The second level.</param>
            <returns>The value of <c>l1.Ordinal &lt; l2.Ordinal</c></returns>
        </member>
        <member name="M:Aspose.Network.Logging.LogLevel.op_GreaterThan(Aspose.Network.Logging.LogLevel,Aspose.Network.Logging.LogLevel)">
            <summary>
            Compares two <see cref="T:Aspose.Network.Logging.LogLevel"/> objects 
            and returns a value indicating whether 
            the first one is greater than the second one.
            </summary>
            <param name="l1">The first level.</param>
            <param name="l2">The second level.</param>
            <returns>The value of <c>l1.Ordinal &gt; l2.Ordinal</c></returns>
        </member>
        <member name="M:Aspose.Network.Logging.LogLevel.ToString">
            <summary>
            Returns a string representation of the log level.
            </summary>
            <returns>Log level name.</returns>
        </member>
        <member name="M:Aspose.Network.Logging.LogLevel.CompareTo(System.Object)">
            <summary>
            Compares the level to the other <see cref="T:Aspose.Network.Logging.LogLevel"/> object.
            </summary>
            <param name="obj">the object object</param>
            <returns>a value less than zero when this logger's <see cref="P:Aspose.Network.Logging.LogLevel.Ordinal"/> is 
            less than the other logger's ordinal, 0 when they are equal and 
            greater than zero when this ordinal is greater than the
            other ordinal.</returns>
        </member>
        <member name="T:Aspose.Network.Logging.LoggerManager">
            <summary>
            Static manager that controls the creation of loggers. 
            </summary>
        </member>
        <member name="M:Aspose.Network.Logging.LoggerManager.GetLogger(System.String)">
            <summary>
            Gets a logger by the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>The logger.</returns>
        </member>
        <member name="M:Aspose.Network.Logging.LoggerManager.AddLogger(System.String,Aspose.Network.Logging.Logger)">
            <summary>
            Adds a logger to the LoggerManager with specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Aspose.Network.Logging.LoggerManager.RemoveLogger(System.String)">
            <summary>
            Removes a logger with the specified name.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Aspose.Network.Logging.LoggerManager.CreateLogger(System.String,Aspose.Network.Logging.Appender)">
            <summary>
            Creates a logger with specified name and appender.
            </summary>
            <param name="name">The name.</param>
            <param name="appender">The appender.</param>
            <returns>The created logger.</returns>
        </member>
        <member name="M:Aspose.Network.Logging.LoggerManager.CreateLogger(System.String,Aspose.Network.Logging.LogLevel,Aspose.Network.Logging.Appender)">
            <summary>
            Creates a logger with specified name and appender.
            </summary>
            <param name="name">The name.</param>
            <param name="severity">The severity.</param>
            <param name="appender">The appender.</param>
            <returns>The created logger.</returns>
        </member>
        <member name="T:Aspose.Network.Logging.LogEntry">
            <summary>
            Represents a log message.  Contains the common properties that are required for all log messages.
            </summary>
        </member>
        <member name="M:Aspose.Network.Logging.LogEntry.#ctor">
            <summary>
            Initialize a new instance of a <see cref="T:Aspose.Network.Logging.LogEntry"/> class.
            </summary>
        </member>
        <member name="M:Aspose.Network.Logging.LogEntry.#ctor(System.String)">
            <summary>
            Initialize a new instance of a <see cref="T:Aspose.Network.Logging.LogEntry"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Aspose.Network.Logging.LogEntry.#ctor(System.String,System.Exception)">
            <summary>
            Initialize a new instance of a <see cref="T:Aspose.Network.Logging.LogEntry"/> class.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="innerException">The inner exception to log.</param>
        </member>
        <member name="M:Aspose.Network.Logging.LogEntry.#ctor(System.String,Aspose.Network.Logging.LogLevel)">
            <summary>
            Initialize a new instance of a <see cref="T:Aspose.Network.Logging.LogEntry"/> class.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="severity">Log entry severity as a <see cref="P:Aspose.Network.Logging.LogEntry.Severity"/> enumeration. (Unspecified, Information, Warning or Error).</param>
        </member>
        <member name="M:Aspose.Network.Logging.LogEntry.#ctor(System.String,System.Exception,Aspose.Network.Logging.LogLevel)">
            <summary>
            Initialize a new instance of a <see cref="T:Aspose.Network.Logging.LogEntry"/> class.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="innerException">The inner exception to log.</param>
            <param name="severity">Log entry severity as a <see cref="P:Aspose.Network.Logging.LogEntry.Severity"/> enumeration. (Unspecified, Information, Warning or Error).</param>
        </member>
        <member name="M:Aspose.Network.Logging.LogEntry.#ctor(System.String,Aspose.Network.Logging.LogLevel,System.String,System.Int32,System.String,System.Collections.IDictionary)">
            <summary>
            Create a new instance of <see cref="T:Aspose.Network.Logging.LogEntry"/> with a full set of constructor parameters
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="severity">Log entry severity as a <see cref="P:Aspose.Network.Logging.LogEntry.Severity"/> enumeration. (Unspecified, Information, Warning or Error).</param>
            <param name="category">Category name used to route the log entry to a one or more sinks.</param>
            <param name="eventId">Event number or identifier.</param>
            <param name="title">Additional description of the log entry message.</param>
            <param name="properties">Dictionary of key/value pairs to record.</param>
        </member>
        <member name="M:Aspose.Network.Logging.LogEntry.#ctor(System.String,System.Exception,Aspose.Network.Logging.LogLevel,System.String,System.Int32,System.String,System.Collections.IDictionary)">
            <summary>
            Create a new instance of <see cref="T:Aspose.Network.Logging.LogEntry"/> with a full set of constructor parameters
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="innerException">The inner exception to log.</param>
            <param name="severity">Log entry severity as a <see cref="P:Aspose.Network.Logging.LogEntry.Severity"/> enumeration. (Unspecified, Information, Warning or Error).</param>
            <param name="category">Category name used to route the log entry to a one or more sinks.</param>
            <param name="eventId">Event number or identifier.</param>
            <param name="title">Additional description of the log entry message.</param>
            <param name="properties">Dictionary of key/value pairs to record.</param>
        </member>
        <member name="M:Aspose.Network.Logging.LogEntry.Clone">
            <summary>
            Creates a new <see cref="T:Aspose.Network.Logging.LogEntry"/> that is a copy of the current instance.
            </summary>
            <returns>A new <c>LogEntry</c> that is a copy of the current instance.</returns>
        </member>
        <member name="M:Aspose.Network.Logging.LogEntry.AddErrorMessage(System.String)">
            <summary>
            Add an error or warning message to the start of the messages string builder.
            Used by the distributor to record problems.
            </summary>
            <param name="message">Message to be added to this instance</param>
        </member>
        <member name="M:Aspose.Network.Logging.LogEntry.CollectIntrinsticProperties">
            <summary>
            Set the intrinsic properties such as MachineName and UserIdentity.
            </summary>
        </member>
        <member name="P:Aspose.Network.Logging.LogEntry.Message">
            <summary>
            Message body to log.  Value from ToString() method from message object.
            </summary>
        </member>
        <member name="P:Aspose.Network.Logging.LogEntry.Category">
            <summary>
            Category name used to route the log entry to a one or more sinks.
            </summary>
        </member>
        <member name="P:Aspose.Network.Logging.LogEntry.EventId">
            <summary>
            Event number or identifier.
            </summary>
        </member>
        <member name="P:Aspose.Network.Logging.LogEntry.Severity">
            <summary>
            Log entry severity as a <see cref="P:Aspose.Network.Logging.LogEntry.Severity"/> enumeration. (Unspecified, Information, Warning or Error).
            </summary>
        </member>
        <member name="P:Aspose.Network.Logging.LogEntry.Title">
            <summary>
            Additional description of the log entry message.
            </summary>
        </member>
        <member name="P:Aspose.Network.Logging.LogEntry.TimeStamp">
            <summary>
            Date and time of the log entry message.
            </summary>
        </member>
        <member name="P:Aspose.Network.Logging.LogEntry.MachineName">
            <summary>
            Name of the computer.
            </summary>
        </member>
        <member name="P:Aspose.Network.Logging.LogEntry.AppDomainName">
            <summary>
            The AppDomain in which we are running
            </summary>
        </member>
        <member name="P:Aspose.Network.Logging.LogEntry.ThreadName">
            <summary>
            The name of the .NET thread. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Logging.LogEntry.ContextualProperties">
            <summary>
            Dictionary of key/value pairs to record.
            </summary>
        </member>
        <member name="P:Aspose.Network.Logging.LogEntry.ErrorMessages">
            <summary>
            Gets the error message with the <see cref="T:Aspose.Network.Logging.LogEntry"></see>
            </summary>
        </member>
        <member name="P:Aspose.Network.Logging.LogEntry.SequenceId">
            <summary>
            The unique identifier of log event which is automatically generated
            and monotonously increasing.
            </summary>
        </member>
        <member name="P:Aspose.Network.Logging.LogEntry.InnerException">
            <summary>
            Gets or sets the inner exception object.
            </summary>
        </member>
        <member name="T:Aspose.Network.Logging.MutexMultiProcessFileAppender">
            <summary>
            Provides a multiprocess-safe atomic file appends while
            keeping the files open.
            </summary>
            <remarks>
            On Unix you can get all the appends to be atomic, even when multiple 
            processes are trying to write to the same file, because setting the file
            pointer to the end of the file and appending can be made one operation.
            On Win32 we need to maintain some synchronization between processes
            (global named mutex is used for this)
            </remarks>
        </member>
        <member name="T:Aspose.Network.EditionType">
            <summary>
            Specifies the edition type of the license.
            </summary>
        </member>
        <member name="T:Aspose.Network.LicenseState">
            <summary>
            Represents possible license states.
            </summary>
        </member>
        <member name="F:Aspose.Network.LicenseState.Evaluation">
            <summary>
            The license is Evaluation
            </summary>
        </member>
        <member name="F:Aspose.Network.LicenseState.Licensed">
            <summary>
            The license is a proper valid license.
            </summary>
        </member>
        <member name="T:Aspose.Network.License">
            <summary>
            Provides methods to license the component.
            </summary>
            <example>
            In this example, an attempt will be made to find a license file named MyLicense.lic
            in the folder that contains the component, in the folder that contains the calling assembly,
            in the folder of the entry assembly and then in the embedded resources of the calling assembly.
            <code>
            [C#]
            
            License license = new License();
            license.SetLicense("MyLicense.lic");
            
            
            [Visual Basic]
            
            Dim license As license = New license
            License.SetLicense("MyLicense.lic")
            </code>
            </example>
        </member>
        <member name="M:Aspose.Network.License.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <example>
            In this example, an attempt will be made to find a license file named MyLicense.lic
            in the folder that contains the component, in the folder that contains the calling assembly,
            in the folder of the entry assembly and then in the embedded resources of the calling assembly.
            <code>
            [C#]
            
            License license = new License();
            license.SetLicense("MyLicense.lic");
            
            
            [Visual Basic]
            
            Dim license As license = New license
            License.SetLicense("MyLicense.lic")
            </code>
            </example>
        </member>
        <member name="M:Aspose.Network.License.SetLicense(System.String)">
            <summary>
            Licenses the component.
            </summary>
            <param name="licenseName">Can be a full or short file name or name of an embedded resource.
            Use an empty string to switch to evaluation mode.</param>
            <remarks>
            <p>Tries to find the license in the following locations:</p>
            <p>1. Explicit path.</p>
            <p>2. The folder of the component assembly.</p>
            <p>3. The folder of the client's calling assembly.</p>
            <p>4. The folder of the entry assembly.</p>
            <p>5. An embedded resource in the client's calling assembly.</p>
            
            <p><b>Note:</b>On the .NET Compact Framework, tries to find the license only in these locations:</p>
            <p>1. Explicit path.</p>
            <p>2. An embedded resource in the client's calling assembly.</p>
            </remarks>
            <example>
            In this example, an attempt will be made to find a license file named MyLicense.lic
            in the folder that contains the component, in the folder that contains the calling assembly,
            in the folder of the entry assembly and then in the embedded resources of the calling assembly.
            <code>
            [C#]
            
            License license = new License();
            license.SetLicense("MyLicense.lic");
            
            
            [Visual Basic]
            
            Dim license As License = New License
            license.SetLicense("MyLicense.lic")
            </code>
            </example>
        </member>
        <member name="M:Aspose.Network.License.SetLicense(System.IO.Stream)">
            <summary>
            Licenses the component.
            </summary>
            <param name="stream">A stream that contains the license.</param>
            <remarks>
            <p>Use this method to load a license from a stream.</p>
            </remarks>
            <example>
            <code>
            [C#]
            
            License license = new License();
            license.SetLicense(myStream);
            
            
            [Visual Basic]
            
            Dim license as License = new License
            license.SetLicense(myStream)
            </code>
            </example>
        </member>
        <member name="T:Aspose.Network.LicenseCore">
            <summary>
            The actual code of the license class is put into an internal class and made into long functions to 
            make it harder for the crackers to find anything meaningful after the dlls were cracked in November 2005.
            </summary>
        </member>
        <member name="F:Aspose.Network.LicenseCore.AsposeDot">
            <summary>
            Used in the product mapping to build full product name.
            This is to avoid other developers accidentally damaging this code when doing global rename.
            </summary>
        </member>
        <member name="M:Aspose.Network.LicenseCore.SetLicenseCore(System.IO.Stream)">
            <summary>
            Note, this function was manually tuned (made complex) so it does not decompile in Reflector.
            </summary>
        </member>
        <member name="M:Aspose.Network.LicenseCore.GetLicenseState">
            <summary>
            Call this from your component code to check if running evaluation version or not.
            </summary>
            <example>
            <code>
            if (Aspose.Words.LicenseCore.GetLicenseState() == LicenseState.Evaluation)
            	InjectWatermark();
            </code>
            </example>
        </member>
        <member name="M:Aspose.Network.LicenseCore.CheckEdition(Aspose.Network.EditionType,System.String)">
            <summary>
            Note, this function was manually tuned (made complex) so it does not decompile in Reflector.
            
            Call this when the user attempts to use a feature that is limited by edition type.
            Throws a message explaining the license limitation to the user.
            </summary>
            <remarks>
            Most of Aspose products are supposed to have just one edition type.
            Only complex products might have two edition types.
            When using two edition types, make sure it is easy for the client to select edition type they need.
            </remarks>
            <param name="wantEditionType">Specify edition type that is required to access your feature.</param>
            <param name="message">Message that explains what feature the user is trying to access.</param>
            <example>
            For example, adding an image to the document requires Enterprise edition.
            <code>
            Licensing2004.CheckEdition(EditionType.Enterprise, "You tried to add an image to the document.");
            //Proceed inserting the image.
            </code>
            </example>
        </member>
        <member name="M:Aspose.Network.LicenseCore.LoadLicense(System.Xml.XmlDocument)">
            <summary>
            Verifies the signature on the XML file and loads it into the license files, but does not check them.
            Made internal only for unit testing, do not call directly otherwise.
            
            Note, this function was manually tuned (made complex) so it does not decompile in Reflector.
            </summary>
        </member>
        <member name="M:Aspose.Network.LicenseCore.MapOldProductName(System.String)">
            <summary>
            In January 2006 product names such as Aspose Word, Aspose Excel etc had to be changed. 
            This function maps these product names so old licenses can be used in new products.
            </summary>
        </member>
        <member name="M:Aspose.Network.LicenseCore.LoadLicense(System.String)">
            <summary>
            See above. Use for unit testing only.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Aspose.Network.LicenseCore.VerifySignature(System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            Verifies that content of the data element has not been tampered with. Safe to pass nulls.
            
            Note there is no direct action taken inside this method if the signature is invalid.
            If the signature is invalid, the VerificationSupervisor.SignatureInvalidFlag is set to greater 
            than zero and you need to examine it somewhere later in your code. This is to confuse hackers.
            </summary>
        </member>
        <member name="M:Aspose.Network.LicenseCore.ProbeLicense(System.String,System.Reflection.Assembly)">
            <summary>
            Tries to find the license in several locations:
            1. Explicit path.
            2. The folder of this assembly.
            3. The folder of the client's calling assembly.
            4. The folder of the entry assembly (does not apply for the .NET Compact Framework).
            5. An embedded resource in the client's calling assembly.
            </summary>
            <param name="licenseName">This can be full or short file name or name of an embedded resource.</param>
            <param name="callingAssembly">Client's calling assembly. Used to find license in embedded resource.</param>
            <returns>Returns a stream that contains the license or throws.</returns>
        </member>
        <member name="M:Aspose.Network.LicenseCore.GetAssemblyPath(System.Reflection.Assembly)">
            <summary>
            Returns assembly path correctly even if the assembly is shadow-copied.
            Uses CodeBase instead of Location for that.
            </summary>
        </member>
        <member name="M:Aspose.Network.LicenseCore.GetResourceByPartialName(System.Reflection.Assembly,System.String)">
            <summary>
            The resource names can get prefixed with customer's namespace, so I do a partial name search.
            </summary>
        </member>
        <member name="M:Aspose.Network.LicenseCore.LoadBlackList">
            <summary>
            Loads and verifies black list from resource called Aspose.License.BlackList.xml which must be present.
            </summary>
        </member>
        <member name="M:Aspose.Network.LicenseCore.GetStringValue(System.Xml.XmlElement,System.String)">
            <summary>
            Returns text from the child element of a specified parent element or empty string if the element was not found.
            </summary>
        </member>
        <member name="M:Aspose.Network.LicenseCore.GetDateValue(System.Xml.XmlElement,System.String)">
            <summary>
            Gets date value from the specified XML element. Returns DateTime.MaxValue if the element is missing.
            </summary>
        </member>
        <member name="M:Aspose.Network.LicenseCore.GetElementByName(System.Xml.XmlElement,System.String)">
            <summary>
            Xml helper function. Gets the first child element with the given name or null.
            I'm using this instead of XPath because XPath is not available on the .NET Compact Framework.
            </summary>
        </member>
        <member name="F:Aspose.Network.LicenseCore.gProductNameMap">
            <summary>
            Maps old product names into new.
            </summary>
        </member>
        <member name="P:Aspose.Network.LicenseCore.Products">
            <summary>
            Gets Aspose product names this license is for. 
            You need to specify value that matches the value specified in AssemblyProduct attribute.
            This is used to check that the license is suitable for this product.
            </summary>
        </member>
        <member name="P:Aspose.Network.LicenseCore.EditionType">
            <summary>
            Gets edition type.
            You can use this to enable/disable some features depending on the edition type.
            </summary>
        </member>
        <member name="P:Aspose.Network.LicenseCore.SerialNumber">
            <summary>
            Unique license number. Used to black list stolen licenses.
            </summary>
        </member>
        <member name="P:Aspose.Network.LicenseCore.SubscriptionExpiry">
            <summary>
            Gets the last date of the subscription.
            This is to be checked against custom attribute on the assembly that contains the relase date.
            </summary>
        </member>
        <member name="P:Aspose.Network.LicenseCore.LicenseExpiry">
            <summary>
            This is for temporary licenses.
            </summary>
        </member>
        <member name="T:Aspose.Network.LicenseCore.ProductNameMapping">
            <summary>
            Maps old product name into new.
            </summary>
        </member>
        <member name="T:Aspose.Network.Ftp.TransferBrokenEventArgs">
            <summary>
            Provides data for TransferBroken Event.
            </summary>
        </member>
        <member name="P:Aspose.Network.Ftp.TransferBrokenEventArgs.BrokenException">
            <summary>
            Gets the exception.
            </summary>
        </member>
        <member name="P:Aspose.Network.Ftp.TransferBrokenEventArgs.TransferStatus">
            <summary>
            Gets the tranfer status.
            </summary>
        </member>
        <member name="T:Aspose.Network.Outlook.ActivityMailMessageInterpretor">
            <summary>
            Represents a MailMessage interpretor for the activity message type of Outlook MapiMessage.
            </summary>
        </member>
        <member name="M:Aspose.Network.Outlook.ActivityMailMessageInterpretor.#ctor">
            <summary>
            Initializes a new instance of the ActivityMailMessageInterpretor class.
            </summary>
        </member>
        <member name="M:Aspose.Network.Outlook.ActivityMailMessageInterpretor.Clone">
            <summary>
            Creates a copy of the current instance.
            </summary>
            <returns>A copy of MailMessageInterpretor.</returns>
        </member>
        <member name="M:Aspose.Network.Outlook.ActivityMailMessageInterpretor.LoadMessageHeader(Aspose.Network.Mail.MailMessage,Aspose.Network.Outlook.MapiMessage)">
            <summary>
            Imports the headers of MIME protocol to a MailMessage from the MapiMessage instance.
            </summary>
            <param name="mailmessage">The target MailMessage.</param>
            <param name="mapiMessage">The source MapiMessage.</param>
        </member>
        <member name="M:Aspose.Network.Outlook.ActivityMailMessageInterpretor.LoadMessageBodyHtml(Aspose.Network.Mail.MailMessage,Aspose.Network.Outlook.MapiMessage)">
            <summary>
            Creates the HtmlBody property of the MailMessage according to the specified MapiMessage instance.
            </summary>
            <param name="mailMessage">The target MailMessage.</param>
            <param name="mapiMessage">The source MapiMessage.</param>
        </member>
        <member name="M:Aspose.Network.Outlook.ActivityMailMessageInterpretor.Save(Aspose.Network.Outlook.MapiMessage,System.IO.Stream,Aspose.Network.Mail.MessageFormat)">
            <summary>
            Saves the specified MapiMessage to a Stream.
            </summary>
            <param name="mapiMessage">The source MapiMessage instance.</param>
            <param name="stream">The target stream</param>
            <param name="messageFormat">The message format.</param>
        </member>
        <member name="P:Aspose.Network.Outlook.ActivityMailMessageInterpretor.FormatTemplates">
            <summary>
            Gets the format template collection.
            </summary>
        </member>
        <member name="T:Aspose.Network.Outlook.MapiPropertyTag">
            <summary>
            Represents the MAPI property tags definition.
            </summary>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiPropertyTag.GetPropertyName(System.Int64)">
            <summary>
            Gets the name of the tag.
            </summary>
        </member>
        <member name="F:Aspose.Network.Outlook.MapiPropertyTag.PR_7BIT_DISPLAY_NAME">
            <summary>
            The PR_7BIT_DISPLAY_NAME property contains a 7-bit ASCII version of a messaging user's name. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Outlook.MapiPropertyTag.PR_7BIT_DISPLAY_NAME_A">
            <summary>
            The ASCII peer for PR_7BIT_DISPLAY_NAME.
            </summary>
        </member>
        <member name="F:Aspose.Network.Outlook.MapiPropertyTag.PR_7BIT_DISPLAY_NAME_W">
            <summary>
            The Unicode peer for PR_7BIT_DISPLAY_NAME.
            </summary>
        </member>
        <member name="F:Aspose.Network.Outlook.MapiPropertyTag.PR_AB_DEFAULT_DIR">
            <summary>
            The PR_AB_DEFAULT_DIR property contains the entry identifier of the address book container that is to be shown to the user first. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Outlook.MapiPropertyTag.PR_AB_DEFAULT_PAB">
            <summary>
            The PR_AB_DEFAULT_PAB property contains the entry identifier of the address book container that is to be used as the personal address book.
            </summary>
        </member>
        <member name="F:Aspose.Network.Outlook.MapiPropertyTag.PR_AB_PROVIDER_ID">
            <summary>
            The PR_AB_DEFAULT_PAB property contains the entry identifier of the address book container that is to be used as the personal address book.
            </summary>
        </member>
        <member name="F:Aspose.Network.Outlook.MapiPropertyTag.PR_AB_PROVIDERS">
            <summary>
            The PR_AB_PROVIDERS property contains a list of identifiers for address book providers in the current profile. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Outlook.MapiPropertyTag.PR_AB_SEARCH_PATH">
            <summary>
            The PR_AB_PROVIDERS property contains a list of identifiers for address book providers in the current profile. 
            </summary>
        </member>
        <member name="T:Aspose.Network.Outlook.MapiMessageParseException">
            <summary>
            This exception is thrown when errors occur in parsing MapiMessage.
            </summary>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiMessageParseException.#ctor">
            <summary>
            Initializes a new instance of the MapiMessageParseException class.
            </summary>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiMessageParseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MapiMessageParseException class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiMessageParseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the MapiMessageParseException class.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Aspose.Network.Exchange.ExchangeMailboxInfo">
            <summary>
            Represents the mail box information of an exchange server.
            </summary>
        </member>
        <member name="M:Aspose.Network.Exchange.ExchangeMailboxInfo.#ctor">
            <summary>
            Initializes a new instance of the ExchangeMailboxInfo class.
            </summary>
        </member>
        <member name="M:Aspose.Network.Exchange.ExchangeMailboxInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ExchangeMailboxInfo class.
            </summary>
            <param name="mailBoxUri">The address of the mailbox.</param>
        </member>
        <member name="P:Aspose.Network.Exchange.ExchangeMailboxInfo.MailboxUri">
            <summary>
            Gets the mailbox uri.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ExchangeMailboxInfo.CalendarUri">
            <summary>
            Gets the calendar uri.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ExchangeMailboxInfo.ContactsUri">
            <summary>
            Gets the contracts uri.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ExchangeMailboxInfo.DeletedItemsUri">
            <summary>
            Gets the deleted items uri.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ExchangeMailboxInfo.DraftsUri">
            <summary>
            Gets the drafts uri.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ExchangeMailboxInfo.InboxUri">
            <summary>
            Gets the inbox uri.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ExchangeMailboxInfo.JournalUri">
            <summary>
            Gets the journal uri.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ExchangeMailboxInfo.SubmissionUri">
            <summary>
            Gets the submission uri.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ExchangeMailboxInfo.NotesUri">
            <summary>
            Gets the notes uri.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ExchangeMailboxInfo.OutboxUri">
            <summary>
            Gets the outbox uri.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ExchangeMailboxInfo.RootUri">
            <summary>
            Gets the root uri.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ExchangeMailboxInfo.SentItemsUri">
            <summary>
            Gets the sent items uri.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ExchangeMailboxInfo.TasksUri">
            <summary>
            Gets the tasks uri.
            </summary>
        </member>
        <member name="T:Aspose.Network.Dns.MINFOResourceRecord">
            <summary>
            Represents a MINFO DNS resource record
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.MINFOResourceRecord.#ctor">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.MINFOResourceRecord">MINFOResourceRecord</see>.
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.MINFOResourceRecord.#ctor(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.MINFOResourceRecord">MINFOResourceRecord</see>.
            </summary>
            <param name="buffer">The arry of unsigned bytes from which to create.</param>
            <param name="index">The index into buffer at which this resource record begins</param>
            <param name="count">The length of the bytes to create this resource record</param>
        </member>
        <member name="P:Aspose.Network.Dns.MINFOResourceRecord.ErrorMailbox">
            <summary>
            Gets or sets the error mail box
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.MINFOResourceRecord.ResponsibleMailbox">
            <summary>
            Gets or sets the responsible mail box
            </summary>
        </member>
        <member name="T:Aspose.Network.Dns.QueryClass">
            <summary>
            Represents the CLASS fields appear in resource records.
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.QueryClass.CH">
            <summary>
            Chaos query class.
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.QueryClass.CS">
            <summary>
            CSNET class query class. CSNET class is Obsolete.
            </summary>		
        </member>
        <member name="F:Aspose.Network.Dns.QueryClass.HS">
            <summary>
            Hesiod query class.
            </summary>
        </member>
        <member name="F:Aspose.Network.Dns.QueryClass.IN">
            <summary>
            Internet query class.
            </summary>		
        </member>
        <member name="T:Aspose.Network.Mail.Calendaring.DayPosition">
            <summary>
            Represents the day position.
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.Calendaring.DayPosition.First">
            <summary>
            First.
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.Calendaring.DayPosition.Fourth">
            <summary>
            Fourth.
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.Calendaring.DayPosition.Last">
            <summary>
            Last.
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.Calendaring.DayPosition.Second">
            <summary>
            Second.
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.Calendaring.DayPosition.Third">
            <summary>
            Third.
            </summary>
        </member>
        <member name="T:Aspose.Network.Imap.ImapClient">
            <summary>
            <p>The ImapClient calss allows applications to manage E-Mail box by using the Internet Message Access Protocol (IMAP).</p>
            
            <p>The ImapClient class fully supports the Imap commands and functions.</p>
            
            <p>The ImapClient class fully supports the Asynchronous and Synchronous programming model.</p>
            
            <p>The ImapClient the major entry for the developers who want to add Imap management to their .Net applications.</p>
            </summary>
            <example>
            <p>The following exmaple demonstrates how to use ImapClient class to fetch e-mail messages from the server.</p>
            [C#]
            <code>
            //create imap client with specified server, username and password.
            ImapClient client = new ImapClient("imap.yourdomain.com", "username", "password");
            try
            {
            	//connect and login to the imap server
            	client.Connect(true);
            	//select the inbox as the current working folder
            	client.SelectFolder("inbox");
            	//save the message
            	client.SaveMessage(1, "file.eml");
            }
            catch (ImapException ex)
            {
            	System.Diagnostics.Debug.WriteLine(ex.ToString());
            }
            </code>
            [VB.NET]
            <code>
            'create imap client with specified server, username and password.
            Dim client As ImapClient =  New ImapClient("imap.yourdomain.com","username","password") 
            Try
            	'connect and login to the imap server
            	client.Connect(True)
            	'select the inbox as the current working folder
            	client.SelectFolder("inbox")
            	'save the message
            	client.SaveMessage(1, "file.eml")
            Catch ex As ImapException
            	System.Diagnostics.Debug.WriteLine(ex.ToString())
            End Try
            </code>
            </example>
            <note>
            Internet Message Access Protocol (IMAP) is defined in RFC 3501, which is available at http://www.ietf.org.
            </note>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.#ctor">
            <summary>
            Creates a new ImapClient instance.
            </summary>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.#ctor(System.String)">
            <summary>
            Creates a new ImapClient instance
            </summary>
            <param name="host">The host address.</param>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new ImapClient instance
            </summary>
            <param name="host">The host address.</param>
            <param name="port">The server port (eg. 143). </param>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.#ctor(System.String,System.String,System.String)">
            <summary>
            Create a new Imapclient instance used specified values.
            </summary>
            <param name="host">The host address.</param>
            <param name="username">The username to login to the server</param>
            <param name="password">The password for the username.</param>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Creates a new ImapClient instance.
            </summary>
            <param name="host">The host address.</param>
            <param name="port">The port number.</param>
            <param name="username">The user name.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.Connect">
            <summary>
            Connects to the IMAP server. 
            </summary>        
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.Connect(System.Boolean)">
            <summary>
            Connects to the IMAP server. 
            </summary>
            <param name="autoLogin">If it needs auto login to the server.</param>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.CopyMessage(System.Int32,System.String)">
            <summary>
            Copies a message with the specified sequence number to the specified folder. 
            </summary>
            <param name="sequenceNumber">The sequence number of the message.</param>
            <param name="folderName">Folder that will receive copies of the message. </param>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.CopyMessage(System.String,System.String)">
            <summary>
            Copies a message with the specified unique ID to the specified folder. 
            </summary>
            <param name="uniqueId">Message unique ID. </param>
            <param name="folderName">Folder that will receive copies of the message. </param>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.CreateFolder(System.String)">
            <summary>
            Creates a folder with the specified name. 
            </summary>
            <param name="folderName">Folder to be created. </param>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.ExistFolder(System.String)">
            <summary>
            Check whether this folder exists
            </summary>
            <param name="folderName">name of the folder</param>
            <returns>Returns True if the folder is existing, otherwise returns False</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.ExistFolder(System.String,Aspose.Network.Imap.ImapFolderInfo@)">
            <summary>
            Check whether this folder exists, extract folder info if so
            </summary>
            <param name="folderName">name of the folder</param>
            <param name="folderInfo">folder information</param>
            <returns>Returns True if the folder is existing, otherwise returns False</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.DeleteFolder(System.String)">
            <summary>
            Deletes a specified folder. This method represents IMAP DELETE command.
            </summary>
            <param name="folderName">Folder to be deleted. </param>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.DeleteMessage(System.Int32)">
            <summary>
            Marks a message with the specified sequence number as deleted. 
            </summary>
            <param name="sequenceNumber">The sequence number of the message.</param>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.DeleteMessage(System.String)">
            <summary>
            Marks a message with the specified unique ID  as deleted. 
            </summary>
            <param name="uniqueId">The unique id of the message</param>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.Disconnect">
            <summary>
            Disconnects from the IMAP server. 
            </summary>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Appender, and optionally disposes of the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to releases only unmanaged resources.</param>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.ListFolder(System.String)">
            <summary>
            Returns information about the specified folder without selecting it. 
            </summary>
            <param name="folderName">Folder to retrieve information about. </param>
            <returns>The specified folder information.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.ListFolders">
            <summary>
            Gets the list of root subfolders.
            </summary>
            <returns>Information of subfolders.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.ListFolders(System.String)">
            <summary>
            Gets the list of subfolders in specified folder.
            </summary>
            <param name="folderName">The path to folder for which a list of subfolders is returned. </param>
            <returns>A list of subfolders.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.ListFolders(System.String,System.Boolean)">
            <summary>
            Gets the list of subfolders in specified folder.
            </summary>
            <param name="folderName">The path to folder for which a list of subfolders is returned. </param>
            <param name="subscribedOnly">Returns subscribed folders only if true</param>
            <returns>A list of subfolders.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.ListFolders(System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets the list of subfolders in the specified folder
            </summary>
            <param name="folderName">The path to folder for which a list of subfolders is returned. </param>
            <param name="subscribedOnly">Returns subscribed folders only if true</param>
            <param name="recursive">Specifies whether to return the shole subfolder tree. </param>
            <returns>A list of subfolders.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.FetchMessage(System.Int32)">
            <summary>
            Downloads the message with the specified sequence number and loads it into an instance of MailMessage.
            </summary>
            <param name="sequenceNumber">The sequence number of the message</param>
            <returns>The downloaded mailmessage.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.FetchMessage(System.String)">
            <summary>
            Downloads the message with the specified unique ID and loads it into an instance of MailMessage. 
            </summary>
            <param name="uniqueId">Message unique ID. </param>
            <returns>The downloaded mailmessage.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.SaveMessage(System.Int32,System.IO.Stream)">
            <summary>
            Downloads the message with the specified sequence number and writes its data into a supplied stream
            </summary>
            <param name="sequenceNumber">The sequence number of the message.</param>
            <param name="output">Stream that will receive the message. </param>
            <returns>The length of the message in bytes.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.SaveMessage(System.Int32,System.String)">
            <summary>
            Downloads the message with the specified sequence number and writes its data into a local file. 
            </summary>
            <param name="sequenceNumber">The sequence number of the message.</param>
            <param name="fileName">The path of the local file. This cannot be a directory. </param>
            <returns>The length of the message in bytes.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.SaveMessage(System.String,System.IO.Stream)">
            <summary>
            Downloads the message with the specified unique ID and writes its data into a supplied stream. 
            </summary>
            <param name="uniqueId">Message unique ID. </param>
            <param name="output">Stream that will receive the message.</param>
            <returns>The length of the message in bytes.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.SaveMessage(System.String,System.String)">
            <summary>
            Downloads the message with the specified unique ID and writes its data into a local file. 
            </summary>
            <param name="uniqueId">Message unique ID. </param>
            <param name="fileName">The path of the local file. This cannot be a directory. </param>
            <returns>The length of the message in bytes.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.GetMessageHeaders(System.Int32,System.IO.Stream)">
            <summary>
            Downloads the headers of a message with the specified sequence number and writes it into a supplied stream. 
            </summary>
            <param name="sequenceNumber">The sequence number of the message.</param>
            <param name="output">Stream that will receive the message headers. </param>
            <returns>The length of the headers in bytes.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.GetMessageHeaders(System.String,System.IO.Stream)">
            <summary>
            Downloads the headers of a message with the specified unique ID and writes it into a supplied stream. 
            </summary>
            <param name="uniqueId">Message unique ID. </param>
            <param name="output">Stream that will receive the message headers. </param>
            <returns>The length of the headers in bytes.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.ListMessage(System.Int32)">
            <summary>
            Get mail message information
            </summary>
            <param name="sequenceNumber">identifier stands for this mail message</param>
            <returns>ImapMessageInfo</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.ListMessage(System.String)">
            <summary>
            Get mail message information
            </summary>
            <param name="uniqueId">unique identifier string stands for this mail message</param>
            <returns>The ImapMessageInfo for the specified E-Mail message.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.ListMessages">
            <summary>
            Gets the list of messages in the current folder. 
            </summary>
            <returns>Collection of ImapMessageInfo objects.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.Login">
            <summary>
            Authenticates the user to the IMAP server using the specified authentication method.
            </summary>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.Login(Aspose.Network.Imap.ImapAuthentication)">
            <summary>
            Log in to the Imap server
            </summary>
            <param name="method">authentication method by login</param>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.ExpungeMessages">
            <summary>
            Permanently removes all messages marked as deleted (with a Deleted flag) from the current folder. 
            </summary>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.RenameFolder(System.String,System.String)">
            <summary>
            Renames a specified folder to a new name. 
            </summary>
            <param name="folderName">Folder to be renamed. </param>
            <param name="newName">New folder name</param>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.RequestCheckpoint">
            <summary>
            Requests a checkpoint of the currently selected mailbox. 
            </summary>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.SelectFolder(System.String)">
            <summary>
            Selects the specified folder.
            </summary>
            <param name="folderName">Folder to be selected. </param>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.SelectFolder(System.String,System.Boolean)">
            <summary>
            Selects the specified folder . 
            </summary>
            <param name="folderName">Folder to be selected. </param>
            <param name="readOnly">Specifies whether the folder is to be selected as read-only. </param>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.AddMessageFlags(System.Int32,Aspose.Network.Imap.MessageFlags)">
            <summary>
            Adds the flags to the message.
            </summary>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.RemoveMessageFlags(System.Int32,Aspose.Network.Imap.MessageFlags)">
            <summary>
            Removes the flags of the message.
            </summary>		
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.ChangeMessageFlags(System.Int32,Aspose.Network.Imap.MessageFlags)">
            <summary>
            Changes the flags of the message.
            </summary>		
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.AddMessageFlags(System.String,Aspose.Network.Imap.MessageFlags)">
            <summary>
            Adds the flags to the message.
            </summary>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.RemoveMessageFlags(System.String,Aspose.Network.Imap.MessageFlags)">
            <summary>
            Removes the flags of the message.
            </summary>	
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.ChangeMessageFlags(System.String,Aspose.Network.Imap.MessageFlags)">
            <summary>
            Changes the flags of the message.
            </summary>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.AppendMessage(System.String,Aspose.Network.Mail.MailMessage)">
            <summary>
            Uploads the mail message to the specified folder. 
            </summary>
            <param name="folderName">Folder that will receive the mail message. </param>
            <param name="message">Mail message to be upload.</param>
            <returns>Unique ID of the message</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.AppendMessage(System.String,System.IO.Stream)">
            <summary>
            Uploads the message read from the stream to the specified folder. 
            </summary>
            <param name="folderName">Folder that will receive the message. </param>
            <param name="input">The input stream. </param>
            <returns>Unique ID of the message</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.AppendMessage(System.String,System.String)">
            <summary>
            Uploads the message read from a local file to specified folder. 
            </summary>
            <param name="folderName">Folder that will receive the message. </param>
            <param name="path">The path to the mail message file. </param>
            <returns>Unique ID of the message.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.AppendMessage(System.String,Aspose.Network.Mail.MailMessage,Aspose.Network.Imap.MessageFlags)">
            <summary>
            Uploads the message to the specified folder and sets its flags. 
            </summary>
            <param name="folderName">Folder that will receive the message. </param>
            <param name="message">Mail message to upload. </param>
            <param name="flags">Message flags</param>
            <returns>Unique ID of the message.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.AppendMessage(System.String,System.IO.Stream,Aspose.Network.Imap.MessageFlags)">
            <summary>
            Uploads the message read from the stream to the specified folder and sets its flags. 
            </summary>
            <param name="folderName">Folder that will receive the message. </param>
            <param name="input">The input stream. </param>
            <param name="flags">Message flags. </param>
            <returns>Unique ID of the message.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.AppendMessage(System.String,System.String,Aspose.Network.Imap.MessageFlags)">
            <summary>
            Uploads the message read from a local file and sets its flags. 
            </summary>
            <param name="folderName">Folder that will receive the message</param>
            <param name="path">The path to the mail message file. </param>
            <param name="flags">Message flags. </param>
            <returns>Unique ID of the message</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.AppendMessage(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Store a new message to the specifed folder.
            </summary>
            <param name="folderName">The destination folder.</param>
            <param name="from">Message sender. </param>
            <param name="to">Comma-separated list of message recipients. </param>
            <param name="subject">The subject of the message. </param>
            <param name="body">The text body of the message. </param>
            <returns>Unique ID of the message.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.AppendMessage(System.String,System.String,System.String,System.String,System.String,Aspose.Network.Imap.MessageFlags)">
            <summary>
            Uploads the message to the specified folder and sets its flags. 
            </summary>
            <param name="folderName">The destination folder.</param>
            <param name="from">Message sender. </param>
            <param name="to">Comma-separated list of message recipients. </param>
            <param name="subject">The subject of the message. </param>
            <param name="body">The text body of the message. </param>
            <param name="flags">Message flags. </param>
            <returns>Unique ID of the message</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.SubscribeFolder(System.String)">
            <summary>
            Subscribes to a specified folder.
            </summary>
            <param name="folderName">Folder to subscribe to. </param>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.UndeleteMessage">
            <summary>
            Marks all messages as not deleted.
            </summary>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.UndeleteMessage(System.Int32)">
            <summary>
            Marks a message with the specified sequence number as not deleted. 
            </summary>
            <param name="sequenceNumber">The sequence number of the message.</param>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.UndeleteMessage(System.String)">
            <summary>
            Marks a message with the specified unique ID as not deleted. 
            </summary>
            <param name="uniqueId">Message unique ID. </param>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.UnselectFolder">
            <summary>
            Unselects the currently selected folder. 
            </summary>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.UnsubscribeFolder(System.String)">
            <summary>
            Unsubscribes from a specified folder.
            </summary>
            <param name="folderName">Folder to unsubscribe from. </param>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.BeginConnect(System.AsyncCallback,System.Object)">
            <summary>
            Begins async request ofconnecting to Imap server, paired with EndConnect
            </summary>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.BeginCopyMessage(System.Int32,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins async request ofcopying messages to a specified folder, paired with EndCopyMessage
            </summary>
            <param name="sequenceNumber">identifier stands for this mail message</param>
            <param name="folderName">destination folder name</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.BeginCopyMessage(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins async request ofcopying message to a specified folder, paired with EndCopyMessage
            </summary>
            <param name="uniqueId">Unique string identifier stands for this mail message</param>
            <param name="folderName">destination folder name</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.BeginCreateFolder(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins async request ofcreating a folder, paired with EndCreateFolder
            </summary>
            <param name="folderName">name of the folder to be created</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.BeginDeleteFolder(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins async request ofdeleting folder, paired with EndDeleteFolder
            </summary>
            <param name="folderName">name of the folder to be deleted</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.BeginDeleteMessage(System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins async request ofdeleting message, paired with EndDeleteMessage
            </summary>
            <param name="sequenceNumber">identifier stands for target mail message</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.BeginDeleteMessage(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins async request ofdisconnecting from Imap server, paired with EndDisconnect
            </summary>
            <param name="uniqueId">The unique id for the message</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.BeginDisconnect(System.AsyncCallback,System.Object)">
            <summary>
            Begins async request ofgetting information of the specified folder, paired with EndListFolder
            </summary>
            <param name="callback">The AsyncCallback delegate. </param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.BeginListFolder(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins async request ofgetting information of the specified folder, paired with EndListFolder method
            </summary>
            <param name="folderName">name of the target folder</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.BeginListFolders(System.String,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins async request offetching mail message from Imap server, paired with EndFetchMessage
            </summary>
            <param name="folderName">The path to folder for which a list of subfolders is returned. </param>
            <param name="subscribedOnly">Returns subscribed folders only if true</param>
            <param name="recursive">Specifies whether to return the shole subfolder tree. </param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.BeginFetchMessage(System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins async request offetching mail message from Imap server, paired with EndFetchMessage
            </summary>
            <param name="sequenceNumber">identifier stands for the mail message</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.BeginFetchMessage(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins async request of saving message from Imap server to output stream, paired with EndSaveMessage method
            </summary>
            <param name="uniqueId">unique identifier string stands for the mail message</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.BeginSaveMessage(System.Int32,System.IO.Stream,System.AsyncCallback,System.Object)">
            <summary>
            Begins async request of saving message from Imap server to file, paired with EndSaveMessage
            </summary>
            <param name="sequenceNumber">identifier stands for the mail message</param>
            <param name="output">target output stream</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.BeginSaveMessage(System.Int32,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins async request of saving message from Imap server to output stream, paired with EndSaveMessage
            </summary>
            <param name="sequenceNumber">identifier stands for the mail message</param>
            <param name="fileName">target file name</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.BeginSaveMessage(System.String,System.IO.Stream,System.AsyncCallback,System.Object)">
            <summary>
            Begins async request of saving message from Imap server to file, paired with EndSaveMessage
            </summary>
            <param name="uniqueId">unique identifier string stands for the mail message</param>
            <param name="output">The output stream.</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.BeginSaveMessage(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins async request of listing mail message information, paired with EndListMessage
            </summary>
            <param name="fileName">The file name.</param>
            <param name="uniqueId">The unique id of the mail message.</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.BeginListMessages(System.AsyncCallback,System.Object)">
            <summary>
            Begins async request of listing mail message information, paired with EndListMessage
            </summary>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.BeginLogin(System.AsyncCallback,System.Object)">
            <summary>
            Begins async request oflogging onto Imap server
            </summary>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.BeginExpungeMessages(System.AsyncCallback,System.Object)">
            <summary>
            Permanently removes all messages marked as deleted (with a Deleted flag) from the current folder, paired with EndExpungeMessages
            </summary>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.BeginRenameFolder(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins async request of renaming a folder
            </summary>
            <param name="folderName">name of the target folder</param>
            <param name="newName">new folder name</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.BeginRequestCheckpoint(System.AsyncCallback,System.Object)">
            <summary>
            Requests a checkpoint of the currently selected mailbox, paired with EndRequestCheckpoint
            </summary>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.BeginSelectFolder(System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Select the specified folder, paired with EndSelectFolder
            </summary>
            <param name="folderName">name of the folder to be selected</param>
            <param name="readOnly"></param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.BeginAppendMessage(System.String,Aspose.Network.Mail.MailMessage,Aspose.Network.Imap.MessageFlags,System.AsyncCallback,System.Object)">
            <summary>
            Begins async request of appending message to Imap server, paired with EndAppendMessage
            </summary>
            <param name="folderName">The target folder name.</param>
            <param name="message">The MailMessge to append.</param>
            <param name="flags">The message flags.</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.BeginSubscribeFolder(System.String,System.AsyncCallback,System.Object)">
            <summary>
            subscribe to a specified folder, paired with EndSubscribeFolder method
            </summary>
            <param name="folderName">target folder name</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">object state</param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.BeginUndeleteMessage(System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Cancel former delete operations, paired with EndUndeleteMessage
            </summary>
            <remarks>
            Some Imap server may not support cancel deleting
            </remarks>
            <param name="sequenceNumber">an identifier stands for the mail message</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.BeginUndeleteMessage(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Cancel former delete operations, paired with EndUndeleteMessage
            </summary>
            <param name="uniqueId">unique identifier string stands for the mail message</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.BeginUnselectFolder(System.AsyncCallback,System.Object)">
            <summary>
            Unselect the currently selected folder, paired with EndUnselectFolder method
            </summary>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.BeginUnsubscribeFolder(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Unsubsribe from a subsribed folder, paired with EndUnsubscribeFolder method
            </summary>
            <param name="folderName">target folder name</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.EndConnect(System.IAsyncResult)">
            <summary>
            End async request ofConnecting to IMap server, paired with BeginConnect
            </summary>
            <param name="asyncResult">async operation status control</param>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.EndCopyMessage(System.IAsyncResult)">
            <summary>
            End async request ofcopying message, paired with BeginCopyMessage method
            </summary>
            <param name="asyncResult">async operation status control</param>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.EndCreateFolder(System.IAsyncResult)">
            <summary>
            End async request ofcreating folder, paired with BeginCreateFolder metod
            </summary>
            <param name="asyncResult">async operation status control</param>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.EndDeleteFolder(System.IAsyncResult)">
            <summary>
            End async request ofdeleting folder, paired with BeginDeleteFolder method
            </summary>
            <param name="asyncResult">async operation status control</param>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.EndDeleteMessage(System.IAsyncResult)">
            <summary>
            End async request ofdeleting message, paired with BeginDeleteMessage method
            </summary>
            <param name="asyncResult">async operation status control</param>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.EndDisconnect(System.IAsyncResult)">
            <summary>
            End async request ofdisconnection from imap server, paired with BeginDisconnect method
            </summary>
            <param name="asyncResult">async operation status control</param>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.EndListFolder(System.IAsyncResult)">
            <summary>
            End async request oflisting folder, paired with BeginListFolder method
            </summary>
            <param name="asyncResult">async operation status control</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.EndListFolders(System.IAsyncResult)">
            <summary>
            End async request oflisting folders, paired with BeginListingFolders method
            </summary>
            <param name="asyncResult">async operation status control</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.EndFetchMessage(System.IAsyncResult)">
            <summary>
            End async request offetching message from imap server, paired with BeginFetchingMessage method
            </summary>
            <param name="asyncResult">async operation status control</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.EndSaveMessage(System.IAsyncResult)">
            <summary>
            End async request of saving message from imap server, paired with BeginSaveMessage method
            </summary>
            <param name="asyncResult">async operation status control</param>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.EndListMessage(System.IAsyncResult)">
            <summary>
            End async request oflisting message information, paired with BeginListMessage method
            </summary>
            <param name="asyncResult">async operation status control</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.EndListMessages(System.IAsyncResult)">
            <summary>
            End async request oflisting messages information, paired with BeginListMessages method
            </summary>
            <param name="asyncResult">async operation status control</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.EndLogin(System.IAsyncResult)">
            <summary>
            End async request oflogging onto imap server, paired with BeginLogin method
            </summary>
            <param name="asyncResult">async operation status control</param>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.EndExpungeMessages(System.IAsyncResult)">
            <summary>
            End async request ofdeleting message, paired with BeginExpungeMessages method
            </summary>
            <param name="asyncResult">async operation status control</param>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.EndRenameFolder(System.IAsyncResult)">
            <summary>
            End async request ofrenaming folder, paired with BeginRenameFolder method
            </summary>
            <param name="asyncResult">async operation status control</param>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.EndRequestCheckpoint(System.IAsyncResult)">
            <summary>
            End async request ofrequesting check point, paired with BeginRequestCheckpoint method
            </summary>
            <param name="asyncResult">async operation status control</param>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.EndSelectFolder(System.IAsyncResult)">
            <summary>
            End async request ofselecting a folder, paired with BeginSelectFolder method
            </summary>
            <param name="asyncResult">async operation status control</param>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.EndAppendMessage(System.IAsyncResult)">
            <summary>
            End async request ofappending message to folder, paired with BeginAppendMessage method
            </summary>
            <param name="asyncResult">async operation status control</param>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.EndSubscribeFolder(System.IAsyncResult)">
            <summary>
            End async request ofsubscribing a folder, paired with BeginSubscribeFolder method
            </summary>
            <param name="asyncResult">async operation status control</param>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.EndUndeleteMessage(System.IAsyncResult)">
            <summary>
            End aync request of Undeleting message, paired with BeginUndeleteMessage method
            </summary>
            <param name="asyncResult">async operation status control</param>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.EndUnselectFolder(System.IAsyncResult)">
            <summary>
            End aync request of Unselecting a folder, paired with BeginUnselectFolder method
            </summary>
            <param name="asyncResult">async operation status control</param>
        </member>
        <member name="M:Aspose.Network.Imap.ImapClient.EndUnsubscribeFolder(System.IAsyncResult)">
            <summary>
            End aync request of Unsubscribing to a folder, paired with BeginUnsubscribeFolder method
            </summary>
            <param name="asyncResult">async operation status control</param>
        </member>
        <member name="P:Aspose.Network.Imap.ImapClient.CurrentFolder">
            <summary>
            Gets the information of currently selected folder.
            </summary>
        </member>
        <member name="P:Aspose.Network.Imap.ImapClient.Encoding">
            <summary>
            Gets or sets the Encoding to use to encode and decode command parameters and server responses. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Imap.ImapClient.State">
            <summary>
            Gets the current state of the Imap connection. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Imap.ImapClient.AuthenticationMethod">
            <summary>
            Gets or sets the authentication method of the ImapClient object.
            </summary>
        </member>
        <member name="P:Aspose.Network.Imap.ImapClient.Username">
            <summary>
            Gets or sets the username.
            </summary>
        </member>
        <member name="P:Aspose.Network.Imap.ImapClient.Password">
            <summary>
            Gets or sets the password.
            </summary>
        </member>
        <member name="P:Aspose.Network.Imap.ImapClient.EnableSsl">
            <summary>
            Specifies whether the ImapClient uses Secure Sockets Layer (SSL) to encrypt the connection.
            </summary>
            <example>
            <p>The following exmaple demonstrates how to use ImapClient class to fetch e-mail messages from gmail.</p>
            [C#]
            <code>
            //create imap client with specified server, username and password.
            ImapClient client = new ImapClient("imap.gmail.com", 993, "youraccount@google.com", "password");
               client.EnableSsl = true;
               client.SecurityMode = ImapSslSecurityMode.Implicit;
            try
            {
            	//connect and login to the imap server
            	client.Connect(true);
            	//select the inbox as the current working folder
            	client.SelectFolder("inbox");
            	//save the message
            	client.SaveMessage(1, "file.eml");
            }
            catch (ImapException ex)
            {
            	System.Diagnostics.Debug.WriteLine(ex.ToString());
            }
            </code>
            [VB.NET]
            <code>
            'create imap client with specified server, username and password.
            Dim client As ImapClient =  New new ImapClient("imap.gmail.com", 993, "youraccount@google.com", "password");
               client.EnableSsl = true;
               client.SecurityMode = ImapSslSecurityMode.Implicit;
            Try
            	'connect and login to the imap server
            	client.Connect(True)
            	'select the inbox as the current working folder
            	client.SelectFolder("inbox")
            	'save the message
            	client.SaveMessage(1, "file.eml")
            Catch ex As ImapException
            	System.Diagnostics.Debug.WriteLine(ex.ToString())
            End Try
            </code>
            </example>
        </member>
        <member name="P:Aspose.Network.Imap.ImapClient.SecurityMode">
            <summary>
            Specifies which security mode will be used when Secure Sockets Layer (SSL) to encrypt the connection.
            </summary>
        </member>
        <member name="T:Aspose.Network.WhoIs.WhoIsException">
            <summary>
            This exception is thrown when errors in WhoIsClient.
            </summary>
        </member>
        <member name="M:Aspose.Network.WhoIs.WhoIsException.#ctor">
            <summary>
            Initializes a new instance of the WhoIsException class.
            </summary>
        </member>
        <member name="M:Aspose.Network.WhoIs.WhoIsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the WhoIsException class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Aspose.Network.WhoIs.WhoIsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the WhoIsException class.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Aspose.Network.Proxy.ProxyClient">
            <summary>
            Represents the client implementation for proxies protocols.
            </summary>
        </member>
        <member name="M:Aspose.Network.Proxy.ProxyClient.#ctor(System.String,System.Int32,System.String,System.String,Aspose.Network.Proxy.ProxyType)">
            <summary>
            Creates a new instance of the class <see cref="T:Aspose.Network.Proxy.ProxyClient"/>.
            </summary>
            <param name="proxyHost">The address of the proxy host.</param>
            <param name="port">The port of the proxy host</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <param name="proxyType">The <see cref="T:Aspose.Network.Proxy.ProxyType">type</see> of the proxy.</param>
        </member>
        <member name="M:Aspose.Network.Proxy.ProxyClient.#ctor(System.String,System.Int32,Aspose.Network.Proxy.ProxyType)">
            <summary>
            Creates a new instance of the class <see cref="T:Aspose.Network.Proxy.ProxyClient"/>
            </summary>
            <param name="proxyHost">The address of the proxy host.</param>
            <param name="port">The port of the proxy host</param>
            <param name="proxyType">The proxy type.</param>
        </member>
        <member name="M:Aspose.Network.Proxy.ProxyClient.BeginConnect(System.String,System.Int32)">
            <summary>
            Asynchronously connects to the target server through the proxy.
            </summary>
            <param name="server">The server address.</param>
            <param name="port">The port of the server.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Proxy.ProxyClient.BeginConnect(System.String,System.Int32,System.Object)">
            <summary>
            Asynchronously connects to the target server through the proxy.
            </summary>
            <param name="server">The server address.</param>
            <param name="port">The port of the server.</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Proxy.ProxyClient.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously connects to the target server through the proxy.
            </summary>
            <param name="server">The server address.</param>
            <param name="port">The port of the server.</param>
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Proxy.ProxyClient.Connect(System.String,System.Int32)">
            <summary>
            Connects to the remote server through the proxy.
            </summary>
            <param name="server">The DNS name of the remote server to which you intend to connect. </param>
            <param name="port">The port number of the remote server to which you intend to connect. </param>
        </member>
        <member name="M:Aspose.Network.Proxy.ProxyClient.Connect(System.Net.IPEndPoint)">
            <summary>
            Connects to the remote server through the proxy.
            </summary>
            <param name="remoteEP">The IPEndPoint to which you intend to connect. </param>
        </member>
        <member name="M:Aspose.Network.Proxy.ProxyClient.Connect(System.Net.IPAddress,System.Int32)">
            <summary>
            Connects to the remote server through the proxy.
            </summary>
            <param name="address">The IPAddress of the host to which you intend to connect.</param>
            <param name="port">The port number to which you intend to connect.</param>
        </member>
        <member name="M:Aspose.Network.Proxy.ProxyClient.GetStream">
            <summary>
            Returns the <see cref="T:System.Net.Sockets.NetworkStream">NetworkStream</see> used to send and receive data.
            </summary>
            <returns>The underlying <see cref="T:System.Net.Sockets.NetworkStream">NetworkStream</see>.</returns>
        </member>
        <member name="M:Aspose.Network.Proxy.ProxyClient.Close">
            <summary>
            Closes the connection and releases all resources associated with the ProxyClient.
            </summary>
        </member>
        <member name="M:Aspose.Network.Proxy.ProxyClient.Dispose">
            <summary>
            Releases all the resources associated with the ProxyClient.
            </summary>
        </member>
        <member name="M:Aspose.Network.Proxy.ProxyClient.EndConnect(System.IAsyncResult)">
            <summary>
            Ends an asynchronous process for connecting the remote server.
            </summary>		
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="E:Aspose.Network.Proxy.ProxyClient.ConnectCompleted">
            <summary>
            Occurs when the connection completed.
            </summary>
        </member>
        <member name="P:Aspose.Network.Proxy.ProxyClient.LingerState">
            <summary>
            Gets or sets information about the sockets linger time.
            </summary>
        </member>
        <member name="P:Aspose.Network.Proxy.ProxyClient.NoDelay">
            <summary>
            Gets or sets a value that disables a delay when send or receive buffers are not full.
            </summary>
        </member>
        <member name="P:Aspose.Network.Proxy.ProxyClient.ProxyHost">
            <summary>
            Gets or sets the address of the proxy host.
            </summary>
        </member>
        <member name="P:Aspose.Network.Proxy.ProxyClient.Active">
            <summary>
            Gets or set a value that indicates whether a connection has been made.
            </summary>
        </member>
        <member name="P:Aspose.Network.Proxy.ProxyClient.Port">
            <summary>
            Gets or sets the port number to connect to the proxy host
            </summary>
        </member>
        <member name="P:Aspose.Network.Proxy.ProxyClient.Password">
            <summary>
            Gets or sets the password used to connect to the proxy host.
            </summary>
        </member>
        <member name="P:Aspose.Network.Proxy.ProxyClient.Username">
            <summary>
            Gets or sets the username used to connect to the proxy host.
            </summary>
        </member>
        <member name="P:Aspose.Network.Proxy.ProxyClient.SynchronizingObject">
            <summary>
            Gets or sets the object used to marshal the event handler calls issued as a result of a ProxyClient events.
            </summary>
        </member>
        <member name="P:Aspose.Network.Proxy.ProxyClient.SendTimeout">
            <summary>
            Gets or sets the amount of time a ProxyClient will wait for a send operation to complete successfully.
            </summary>
        </member>
        <member name="P:Aspose.Network.Proxy.ProxyClient.SendBufferSize">
            <summary>
            Gets or sets the size of the send buffer.
            </summary>
        </member>
        <member name="P:Aspose.Network.Proxy.ProxyClient.ReceiveTimeout">
            <summary>
            Gets or sets the amount of time a ProxyClient will wait to receive data once a read operation is initiated.
            </summary>
        </member>
        <member name="P:Aspose.Network.Proxy.ProxyClient.ReceiveBufferSize">
            <summary>
            Gets or sets the size of the receive buffer.
            </summary>
        </member>
        <member name="T:Aspose.Network.Logging.Logger">
            <summary>
            Provides the logging functionality.
            </summary>
        </member>
        <member name="M:Aspose.Network.Logging.Logger.IsEnabled(Aspose.Network.Logging.LogLevel)">
            <summary>
            Determines if logging is enabled for the specified level.
            </summary>
            <param name="level">level to be checked</param>
            <returns><see langword="true" /> if logging is enabled for the specified level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="M:Aspose.Network.Logging.Logger.Log(System.String,System.Exception,Aspose.Network.Logging.LogLevel)">
            <summary>
            Logs the specified message and exception if the log level is enabled.
            </summary>
            <param name="message">The message to log.</param>
            <param name="exception">The exception to log.</param>
            <param name="level">The log level.</param>
        </member>
        <member name="M:Aspose.Network.Logging.Logger.Log(System.String,Aspose.Network.Logging.LogLevel)">
            <summary>
            Logs the specified message if the log level is enabled.
            </summary>
            <param name="message">The message to log.</param>
            <param name="level">The log level.</param>
        </member>
        <member name="M:Aspose.Network.Logging.Logger.Write(System.String,System.Exception)">
            <summary>
            Writes the specified message and exception to appenders.
            </summary>
            <param name="message">The message to write.</param>
            <param name="exception">The exception to write.</param>
        </member>
        <member name="M:Aspose.Network.Logging.Logger.Write(System.String)">
            <summary>
            Writes the specified message to appenders.
            </summary>
            <param name="message">The message to write.</param>
        </member>
        <member name="M:Aspose.Network.Logging.Logger.Write(System.Object)">
            <summary>
            Writes the specified message to appenders.
            </summary>
            <param name="message">The message to write.</param>
        </member>
        <member name="M:Aspose.Network.Logging.Logger.WriteIf(System.Boolean,System.String)">
            <summary>
            Writes the specified message to appenders if condition is true.
            </summary>
            <param name="condition">The condition to test.</param>
            <param name="message">The message to write.</param>
        </member>
        <member name="M:Aspose.Network.Logging.Logger.WriteIf(System.Boolean,System.Object)">
            <summary>
            Writes the specified message to appenders if condition is true.
            </summary>
            <param name="condition">The condition to test.</param>
            <param name="message">The message to write.</param>
        </member>
        <member name="M:Aspose.Network.Logging.Logger.WriteIf(System.Boolean,System.String,System.Exception)">
            <summary>
            Writes the specified message and exception to appenders if condition is true.
            </summary>
            <param name="condition">The condition to test.</param>
            <param name="message">The message to write.</param>
            <param name="exception">The exception to write.</param>
        </member>
        <member name="P:Aspose.Network.Logging.Logger.Appenders">
            <summary>
            Gets or sets the appender list.
            </summary>
        </member>
        <member name="P:Aspose.Network.Logging.Logger.Severity">
            <summary>
            Gets or sets severity.
            </summary>
        </member>
        <member name="P:Aspose.Network.Logging.Logger.Name">
            <summary>
            Gets or sets name.
            </summary>
        </member>
        <member name="P:Aspose.Network.Logging.Logger.Debug">
            <summary>
            Gets the debug logger.
            </summary>
        </member>
        <member name="T:Aspose.Network.Logging.DebugAppender">
            <summary>
            Represents an appender is only enabled when debugging.
            </summary>
        </member>
        <member name="M:Aspose.Network.Logging.DebugAppender.#ctor">
            <summary>
            Initializes a new instance of the DebugAppender class.
            </summary>
        </member>
        <member name="M:Aspose.Network.Logging.DebugAppender.Append(Aspose.Network.Logging.LogEntry)">
            <summary>
            Appends the specified log entry to the appender.
            </summary>
            <param name="entry">The log entry.</param>
        </member>
        <member name="T:Aspose.Network.Logging.ConsoleAppender">
            <summary>
            Represents an appender for console output.
            </summary>
        </member>
        <member name="M:Aspose.Network.Logging.ConsoleAppender.#ctor">
            <summary>
            Initializes a new instance of the ConsoleAppender class.
            </summary>
        </member>
        <member name="M:Aspose.Network.Logging.ConsoleAppender.Append(Aspose.Network.Logging.LogEntry)">
            <summary>
            Appends the specified log entry to the appender.
            </summary>
            <param name="entry">The log entry.</param>
        </member>
        <member name="T:Aspose.Network.Dns.MFResourceRecord">
            <summary>
            Represents a MF DNS resource record
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.MFResourceRecord.#ctor">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.MFResourceRecord">MFResourceRecord</see>.
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.MFResourceRecord.#ctor(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.MFResourceRecord">MFResourceRecord</see>.
            </summary>
            <param name="buffer">The arry of unsigned bytes from which to create.</param>
            <param name="index">The index into buffer at which this resource record begins</param>
            <param name="count">The length of the bytes to create this resource record</param>
        </member>
        <member name="P:Aspose.Network.Dns.MFResourceRecord.MailAgent">
            <summary>
            Gets or sets the mail agent
            </summary>
        </member>
        <member name="T:Aspose.Network.Dns.QuestionCollection">
            <summary>
            Represents a collection of <see cref="T:Aspose.Network.Dns.Question">Question</see> objects.
            </summary>
            <remarks>
            Provides a simple collection object that can represent a set of <see cref="T:Aspose.Network.Dns.Question">Question</see> objects.
            The <see cref="T:Aspose.Network.Dns.QuestionCollection">QuestionCollection</see> class provides a simple collection object that can be used to store a set of <see cref="T:Aspose.Network.Dns.Question">Question</see> objects.	
            </remarks>
        </member>
        <member name="M:Aspose.Network.Dns.QuestionCollection.#ctor">
            <summary>
            Initialize a new instance of the class <see cref="T:Aspose.Network.Dns.QuestionCollection">QuestionCollection</see>.
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.QuestionCollection.AddRange(Aspose.Network.Dns.Question[])">
            <summary>
            Copies the elements of the specified array to the end of the collection.
            </summary>
            <param name="value">An array of type <see cref="T:Aspose.Network.Dns.Question">Question</see> containing the objects to add to the collection. </param>
        </member>
        <member name="M:Aspose.Network.Dns.QuestionCollection.Add(Aspose.Network.Dns.Question)">
            <summary>
            Adds the specified <see cref="T:Aspose.Network.Dns.Question">Question</see> to the collection.
            </summary>
            <param name="value">The <see cref="T:Aspose.Network.Dns.Question">Question</see> to add.</param>
        </member>
        <member name="M:Aspose.Network.Dns.QuestionCollection.Contains(Aspose.Network.Dns.Question)">
            <summary>
            Gets a value indicating whether the collection contains the specified <see cref="T:Aspose.Network.Dns.Question">Question</see>.
            </summary>
            <param name="value">The <see cref="T:Aspose.Network.Dns.Question">Question</see> to search for in the collection. </param>
            <returns><b>true</b> if the <see cref="T:Aspose.Network.Dns.Question">Question</see> is contained in the collection; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Aspose.Network.Dns.QuestionCollection.IndexOf(Aspose.Network.Dns.Question)">
            <summary>
            Gets the index in the collection of the specified <see cref="T:Aspose.Network.Dns.Question">Question</see>, if it exists in the collection.
            </summary>
            <param name="value">The <see cref="T:Aspose.Network.Dns.Question">Question</see> to locate in the collection. </param>
            <returns>The index in the collection of the specified object, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Aspose.Network.Dns.QuestionCollection.IndexOf(Aspose.Network.Dns.Question,System.Int32)">
            <summary>
            Gets the index in the collection of the specified <see cref="T:Aspose.Network.Dns.Question">Question</see>, if it exists in the collection.
            </summary>
            <param name="value">The <see cref="T:Aspose.Network.Dns.Question">Question</see> to locate in the collection. </param>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <returns>The index in the collection of the specified object, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Aspose.Network.Dns.QuestionCollection.IndexOf(Aspose.Network.Dns.Question,System.Int32,System.Int32)">
            <summary>
            Gets the index in the collection of the specified <see cref="T:Aspose.Network.Dns.Question">Question</see>, if it exists in the collection.
            </summary>
            <param name="value">The <see cref="T:Aspose.Network.Dns.Question">Question</see> to locate in the collection. </param>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="count">The number of elements in the section to search. </param>
            <returns>The index in the collection of the specified object, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Aspose.Network.Dns.QuestionCollection.Insert(System.Int32,Aspose.Network.Dns.Question)">
            <summary>
            Inserts the specified <see cref="T:Aspose.Network.Dns.Question">Question</see> object into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index where the specified <see cref="T:Aspose.Network.Dns.Question">Question</see> should be inserted. </param>
            <param name="value">The <see cref="T:Aspose.Network.Dns.Question">Question</see> to insert. </param>
        </member>
        <member name="P:Aspose.Network.Dns.QuestionCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Aspose.Network.Dns.Question">Question</see> at the specified index.
            </summary>
        </member>
        <member name="T:Aspose.Network.Dns.DnsException">
            <summary>
            Defines the base class for predefined exceptions in the Aspose.Network.Dns namespace.
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.DnsException.#ctor">
            <summary>
            Initializes a new instance of the class <see cref="T:Aspose.Network.Dns.DnsException"/>.
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.DnsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class <see cref="T:Aspose.Network.Dns.DnsException"/>.
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.DnsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class <see cref="T:Aspose.Network.Dns.DnsException"/>.
            </summary>
        </member>
        <member name="T:Aspose.Network.Pop3.Pop3MailboxInfo">
            <summary>
            Represents the status of the mailbox
            </summary>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3MailboxInfo.#ctor(System.Int32,System.Int64)">
            <summary>
            Initialize a new instance of the class <see cref="T:Aspose.Network.Pop3.MailboxInfo" /> . 
            </summary>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3MailboxInfo.ToString">
            <summary>
            Converts this Pop3MailboxInfo structure to a human-readable string. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:Aspose.Network.Pop3.Pop3MailboxInfo.MessageCount">
            <summary>
            Gets the count of messages in the mailbox.
            </summary>
        </member>
        <member name="P:Aspose.Network.Pop3.Pop3MailboxInfo.OccupiedSize">
            <summary>
            Gets the occupied size of the mailbox
            </summary>
        </member>
        <member name="T:Aspose.Network.Pop3.Pop3Exception">
            <summary>
            This exception is thrown when errors occur in Pop3Client.
            </summary>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Exception.#ctor">
            <summary>
            Initializes a new instance of the Pop3Exception class.
            </summary>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Exception.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Pop3Exception class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Exception.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the Pop3Exception class.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Aspose.Network.Outlook.NormalMessageMailMessageInterpretor">
            <summary>
            Represents the default mail message interpretor.
            </summary>
        </member>
        <member name="M:Aspose.Network.Outlook.NormalMessageMailMessageInterpretor.#ctor">
            <summary>
            Initializes a new instance of the NormalMessageMailMessageInterpretor class.
            </summary>
        </member>
        <member name="M:Aspose.Network.Outlook.NormalMessageMailMessageInterpretor.Clone">
            <summary>
            Creates a copy of the current instance.
            </summary>
            <returns>A copy of MailMessageInterpretor.</returns>
        </member>
        <member name="M:Aspose.Network.Mail.MessageTemplateManager.#ctor">
            <summary>
            create template manager using a template
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.MessageTemplateManager.SetValue(System.String,System.Object)">
            <summary>
            sets value for variable called name
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.MessageTemplateManager.GetValue(System.String)">
            <summary>
            gets value for variable called name.
            Throws exception if value is not found
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.MessageTemplateManager.Process(System.IO.TextWriter,Aspose.Network.Template.ElementList)">
            <summary>
            processes current template and sends output to writer
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Aspose.Network.Mail.MessageTemplateManager.ProcessElements(System.IO.TextWriter,Aspose.Network.Template.ElementList)">
            <summary>
            processes list of elements.
            This method is mostly used by extenders of the manager
            from custom functions or custom tags.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.MessageTemplateManager.EvalExpression(System.IO.TextWriter,Aspose.Network.Template.Expression)">
            <summary>
            evaluates expression.
            This method is used by TemplateManager extensibility.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.MessageTemplateManager.WriteValue(System.IO.TextWriter,System.Object)">
            <summary>
            writes value to current writer
            </summary>
            <param name="value">value to be written</param>
        </member>
        <member name="P:Aspose.Network.Mail.MessageTemplateManager.Functions">
            <summary>
            gets library of functions that are available
            for the tempalte execution
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MessageTemplateManager.SilentErrors">
            <summary>
            if silet errors is set to true, then any exceptions will not show in the output
            If set to false, all exceptions will be displayed.
            </summary>
        </member>
        <member name="T:Aspose.Network.Mail.MailPriority">
            <summary>
            Mail Priority can be "normal", "urgent" or "non-urgent" and can influence transmission speed and delivery. 
            Defined in RFC 1327
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.MailPriority.High">
            <summary>
            Priority: urgent
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.MailPriority.Low">
            <summary>
            Priority: non-urgent
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.MailPriority.Normal">
            <summary>
            Priority: normal
            </summary>
        </member>
        <member name="T:Aspose.Network.Mail.LinkedResourceCollection">
            <summary>
            Stores linked resources to be sent as part of an e-mail message. 
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.LinkedResourceCollection.#ctor">
            <summary>
            Initializes a new instance of the LinkedResourceCollection class.
            </summary>
        </member>
        <member name="T:Aspose.Network.Mail.Calendar">
             <summary>
             Represents a calendar to an e-mail.
             </summary>
            <example>
             <p>This example demonstrates how to add a calendar to an E-Mail message.</p>
             [C#]
             <code>
            	    MailMessage msg = new MailMessage();
                 //attendees for the event
            	    MailAddressCollection attendees = new MailAddressCollection();
            	    attendees.Add(new MailAddress("person1@domain.com"));
            	    attendees.Add(new MailAddress("person2@domain.com"));
            	    attendees.Add(new MailAddress("person3@domain.com"));
                 //create calendar
            	    Calendar cal = new Calendar("Room 112",new DateTime(2006,7,17,13,0,0),new DateTime(2006,7,17,14,0,0),new MailAddress("somebody@domain.com"), attendees );
            	    cal.Summary = "Release Meetting";
            	    cal.Description = "Discuss for the next release";
                 //add calendar to the message
            	    msg.AddCalendar(cal);
             
                 //send the email message
                 SmtpClient smtp= new SmtpClient("smtp.server.com", 25, "user", "password");
                 smtp.Send(msg);
             </code>
             [VB.Net]
             <code>
             	Dim msg As MailMessage =  New MailMessage() 
                'attendees for the event
             	Dim attendees As MailAddressCollection =  New MailAddressCollection() 
             	attendees.Add(New MailAddress("person1@domain.com"))
             	attendees.Add(New MailAddress("person2@domain.com"))
             	attendees.Add(New MailAddress("person3@domain.com"))
                'create calendar
             	Dim cal As Calendar =  New Calendar("Room 112",New DateTime(2006,7,17,13,0,0),New DateTime(2006,7,17,14,0,0),New MailAddress("somebody@domain.com"),attendees) 
             	cal.Summary = "Release Meetting"
             	cal.Description = "Discuss for the next release"
                'add calendar to the message
             	msg.AddCalendar(cal)
             </code>
             </example>
        </member>
        <member name="T:Aspose.Network.Mail.AlternateView">
            <summary>
            Represents the format to view an email message. 
            </summary>
            <remarks>Use the AlternateView class to specify copies of an e-mail message in different formats. For example, if you send a message in HTML, you might also want provide a plain text version in case some of the recipients use e-mail readers that cannot display HTML content.</remarks>
        </member>
        <member name="M:Aspose.Network.Mail.AlternateView.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of AlternateView with the specified Stream. 
            </summary>
            <param name="stream">A stream that contains the content for this view.</param>
        </member>
        <member name="M:Aspose.Network.Mail.AlternateView.#ctor(System.IO.Stream,System.String)">
            <summary>
            Initializes a new instance of AlternateView with the specified Stream and MediaType. 
            </summary>
            <param name="stream">A stream that contains the content for this attachment.</param>
            <param name="mediaType">The mediaType of the Content</param>
        </member>
        <member name="M:Aspose.Network.Mail.AlternateView.Save(System.IO.Stream)">
            <summary>
            Save the Content into the specified stream.
            </summary>
            <param name="stream">The Stream to be save the content into.</param>
        </member>
        <member name="M:Aspose.Network.Mail.AlternateView.Save(System.String)">
            <summary>
            Save the content to the specified file.
            </summary>
            <param name="fileName">The file name to be save the content.</param>
        </member>
        <member name="M:Aspose.Network.Mail.AlternateView.SaveRawContent(System.IO.Stream)">
            <summary>
            Saves the raw content of the attachment.
            </summary>
            <param name="stream">Stream to save this attachment</param>
        </member>
        <member name="M:Aspose.Network.Mail.AlternateView.CreateAlternateViewFromString(System.String)">
            <summary>
            Creates a AlternateView to view an email message using the content specified in the string. 
            </summary>
            <param name="content">The String that contains the content of the email message.</param>
            <returns>An AlternateView object. </returns>
        </member>
        <member name="M:Aspose.Network.Mail.AlternateView.CreateAlternateViewFromString(System.String,System.String)">
            <summary>
            Creates a AlternateView to view an email message using the content specified in the string, and the specified MediaType
            </summary>
            <param name="content">A String that contains the content for this attachment.</param>
            <param name="mediaType">The MIME media type of the content.</param>
            <returns>An AlternateView object. </returns>
        </member>
        <member name="M:Aspose.Network.Mail.AlternateView.CreateAlternateViewFromString(System.String,System.Text.Encoding,System.String)">
            <summary>
            Creates a AlternateView to view an email message using the content specified in the string, the specified text encoding and MIME media type. 
            </summary>
            <param name="content">A String that contains the content for this attachment.</param>
            <param name="contentEncoding">An Encoding.</param>
            <param name="mediaType">The MIME media type of the content.</param>
            <returns>An AlternateView object. </returns>
        </member>
        <member name="P:Aspose.Network.Mail.AlternateView.BaseUri">
            <summary>
            Gets or sets the Base URI to use for resolving relative URIs in the AlternateView. 
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.Calendar.#ctor(System.String,System.DateTime,System.DateTime,Aspose.Network.Mail.MailAddress,Aspose.Network.Mail.MailAddressCollection)">
            <summary>
            Initialize a new instance of Calendar object.
            </summary>
            <param name="location">The location of the calendar event.</param>
            <param name="startDate">The start time of the calendar event.</param>
            <param name="endDate">The end time of the calendar event.</param>
            <param name="organizer">The organizer of the calendar event.</param>
            <param name="attendees">The attendees of the calendar event.</param>
        </member>
        <member name="M:Aspose.Network.Mail.Calendar.#ctor(System.String,System.String,System.String,System.DateTime,System.DateTime,Aspose.Network.Mail.MailAddress,Aspose.Network.Mail.MailAddressCollection)">
            <summary>
            Initialize a new instance of Calendar object.
            </summary>
            <param name="location">The location of the calendar event.</param>
            <param name="summary">The summary of the calendar event.</param>
            <param name="description">The description of the calendar event.</param>
            <param name="startDate">The start time of the calendar event.</param>
            <param name="endDate">The end time of the calendar event.</param>
            <param name="organizer">The organizer of the calendar event.</param>
            <param name="attendees">The attendees of the calendar event.</param>
        </member>
        <member name="M:Aspose.Network.Mail.Calendar.#ctor(System.String,System.String,System.String,System.DateTime,System.DateTime,Aspose.Network.Mail.MailAddress,Aspose.Network.Mail.MailAddressCollection,Aspose.Network.Mail.Calendaring.RecurrencePattern)">
            <summary>
            Initialize a new instance of Calendar object.
            </summary>
            <param name="location">The location of the calendar event.</param>
            <param name="summary">The summary of the calendar event.</param>
            <param name="description">The description of the calendar event.</param>
            <param name="startDate">The start time of the calendar event.</param>
            <param name="endDate">The end time of the calendar event.</param>
            <param name="organizer">The organizer of the calendar event.</param>
            <param name="attendees">The attendees of the calendar event.</param>
            <param name="recurrencePattern">The recurrence pattern of the calendar event.</param>
        </member>
        <member name="M:Aspose.Network.Mail.Calendar.Save(System.IO.Stream)">
            <summary>
            Save the Content into the specified stream.
            </summary>
            <param name="stream">The Stream to be save the content into.</param>
        </member>
        <member name="M:Aspose.Network.Mail.Calendar.Save(System.String)">
            <summary>
            Save the content to the specified file.
            </summary>
            <param name="fileName">The file name to be save the content.</param>
        </member>
        <member name="P:Aspose.Network.Mail.Calendar.Location">
            <summary>
            Gets or sets the location.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.Calendar.Summary">
            <summary>
            Gets or sets the summary.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.Calendar.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.Calendar.StartDate">
            <summary>
            Gets or sets the start date.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.Calendar.EndDate">
            <summary>
            Gets or sets the end date.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.Calendar.Attendees">
            <summary>
            Gets or sets the attendees.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.Calendar.Organizer">
            <summary>
            Gets or sets the organizer.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.Calendar.RecurrencePattern">
            <summary>
            Gets or sets recurrence pattern.
            </summary>
        </member>
        <member name="T:Aspose.Network.Imap.ImapSslSecurityMode">
            <summary>
            Represents the SSL security mode for ImapClient
            </summary>
        </member>
        <member name="F:Aspose.Network.Imap.ImapSslSecurityMode.Explicit">
            <summary>
            Explicit mode.
            </summary>
        </member>
        <member name="F:Aspose.Network.Imap.ImapSslSecurityMode.Implicit">
            <summary>
            Implicit mode.
            </summary>
        </member>
        <member name="T:Aspose.Network.Imap.MessageFlags">
            <summary>
            IMAP message flags. 
            This enumeration has a FlagsAttribute attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Aspose.Network.Imap.MessageFlags.Answered">
            <summary>
            Message has been answered.
            </summary>
        </member>
        <member name="F:Aspose.Network.Imap.MessageFlags.Deleted">
            <summary>
            Message is marked as deleted for removal by Purge.
            </summary>
        </member>
        <member name="F:Aspose.Network.Imap.MessageFlags.Draft">
            <summary>
            Message is a draft - not fully composed yet.
            </summary>
        </member>
        <member name="F:Aspose.Network.Imap.MessageFlags.Flagged">
            <summary>
            Message is flagged for special attention.
            </summary>
        </member>
        <member name="F:Aspose.Network.Imap.MessageFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Aspose.Network.Imap.MessageFlags.Recent">
            <summary>
            Message has recently arrived and this is the first and only session notified about this. This flag cannot be modified by the client. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Imap.MessageFlags.Readed">
            <summary>
            Message has been read
            </summary>
        </member>
        <member name="T:Aspose.Network.Imap.ImapFolderInfo">
            <summary>
            Represents an IMAP folder. 
            </summary>
        </member>
        <member name="M:Aspose.Network.Imap.ImapFolderInfo.GetNextUniqueId">
            <summary>
            Gets the unique ID to be assigned to a next message that arrives into this folder
            </summary>
        </member>
        <member name="F:Aspose.Network.Imap.ImapFolderInfo.InBox">
            <summary>
            Gets inbox name.
            </summary>
        </member>
        <member name="P:Aspose.Network.Imap.ImapFolderInfo.Delimiter">
            <summary>
            Gets a string that is used to delimit levels of hieararchy under this folder. It usually contains either '/' or '.'. 
            This value is only set for folders returned by a call to GetFolderList methods. For GetFolderInfo method and CurrentFolder property, this will throw an exception
            </summary>
        </member>
        <member name="P:Aspose.Network.Imap.ImapFolderInfo.Selectable">
            <summary>
            Gets a value indicating whether it is possible to select this folder.
            </summary>
        </member>
        <member name="P:Aspose.Network.Imap.ImapFolderInfo.Marked">
            <summary>
            Gets a value indicating whether it is marked this folder.
            </summary>
        </member>
        <member name="P:Aspose.Network.Imap.ImapFolderInfo.Name">
            <summary>
            Gets the name of the folder. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Imap.ImapFolderInfo.NewMessageCount">
            <summary>
            Gets the number of the new messages.
            </summary>
        </member>
        <member name="P:Aspose.Network.Imap.ImapFolderInfo.ReadOnly">
            <summary>
            Gets a value indicating whether the folder is read-only. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Imap.ImapFolderInfo.RecentMessageCount">
            <summary>
            Gets the number of messages that arrived recently.
            </summary>
        </member>
        <member name="P:Aspose.Network.Imap.ImapFolderInfo.TotalMessageCount">
            <summary>
            Gets the number of messages in the folder. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Imap.ImapFolderInfo.ValidityId">
            <summary>
            Gets the validity ID of the mailbox. 
            </summary>
        </member>
        <member name="T:Aspose.Network.Security.Cryptography.X509Certificates.StoreName">
            <summary>
            Specifies the name of the X.509 certificate store to open.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.StoreName.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.StoreName.AddressBook">
            <summary>
            The X.509 certificate store for other users.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.StoreName.AuthRoot">
            <summary>
            The X.509 certificate store for third-party certificate authorities (CAs).
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.StoreName.CertificateAuthority">
            <summary>
            The X.509 certificate store for intermediate certificate authorities (CAs).
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.StoreName.Disallowed">
            <summary>
            The X.509 certificate store for revoked certificates.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.StoreName.My">
            <summary>
            The X.509 certificate store for personal certificates.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.StoreName.Root">
            <summary>
            The X.509 certificate store for trusted root certificate authorities (CAs).
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.StoreName.TrustedPeople">
            <summary>
            The X.509 certificate store for directly trusted people and resources.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.StoreName.TrustedPublisher">
            <summary>
            The X.509 certificate store for directly trusted publishers.
            </summary>
        </member>
        <member name="T:Aspose.Network.Security.Cryptography.BigInt">
            <summary>
            arbitrary precision integers
            </summary>
        </member>
        <member name="M:Aspose.Network.Security.Cryptography.BigInt.Create(System.Byte[])">
            <summary>
            Create a BigInteger from a little-endian twos-complement byte array
            (inverse of ToByteArray())
            </summary>
        </member>
        <member name="M:Aspose.Network.Security.Cryptography.BigInt.GetBits">
            <summary>
            Return the magnitude of this BigInteger as an array of zero or more uints.
            Element zero is the value of the least significant four bytes, element one is
            the value of the four next most significant bytes, etc.
            
            The returned data is the unsigned magnitude of the number. To determine the sign,
            use GetSign().
            
            It is guaranteed that the highest element of the returned array is never zero.
            This means that if the value of this BigInteger is zero, a zero-length array
            is returned.
            </summary>
        </member>
        <member name="M:Aspose.Network.Security.Cryptography.BigInt.GetSign">
            <summary>
            Return the sign of this BigInteger: -1, 0, or 1.
            </summary>
        </member>
        <member name="M:Aspose.Network.Security.Cryptography.BigInt.makeTwosComplement(System.UInt32[])">
            <summary>
            Do an in-place twos complement of d and also return the result.
            </summary>
        </member>
        <member name="M:Aspose.Network.Security.Cryptography.BigInt.ToByteArray">
            <summary>
            Return the value of this BigInteger as a little-endian twos-complement
            byte array, using the fewest number of bytes possible. If the value is zero,
            return an array of one byte whose element is 0x00.
            </summary>
        </member>
        <member name="M:Aspose.Network.Threading.AsyncEnumerator.EnqueueCompletedOpToInbox(Aspose.Network.Threading.AsyncEnumerator.AsyncOp)">
            <summary>
            Called internally when an async operation completes
            </summary>
            <param name="asyncOp">The AsyncOp that wraps the non-cancelable or cancelable async operation.</param>
        </member>
        <member name="M:Aspose.Network.Threading.AsyncEnumerator.DequeueAsyncResult">
            <summary>
            Dequeues a completed AsyncOp's IAsyncResult object from the inbox.
            </summary>
            <returns>The completed AsyncOp's IAsyncResult object.</returns>
        </member>
        <member name="M:Aspose.Network.Threading.AsyncEnumerator.End(System.Int32,Aspose.Network.Threading.AsyncEnumerator.EndObjectXxx)">
            <summary>
            Pass the result of this method to a BegixXxx method's AsyncCallback argument to have a cancelable operation
            complete to advance the enumerator.
            </summary>
            <param name="discardMarker">Identifies an operation sequence number used for cancelation. The number passed must be >= to the last number passed.</param>
            <param name="callback">The EndXxx method that must be called when this canceled operation eventually completes.</param>
            <returns>The value that should be passed to a BeginXxx method's AsyncCallback argument.</returns>
        </member>
        <member name="M:Aspose.Network.Threading.AsyncEnumerator.EndVoid(System.Int32,Aspose.Network.Threading.AsyncEnumerator.EndVoidXxx)">
            <summary>
            Pass the result of this method to a BegixXxx method's AsyncCallback argument to have a cancelable operation
            complete to advance the enumerator.
            </summary>
            <param name="discardMarker">Identifies an operation sequence number used for cancelation. The number passed must be >= to the last number passed.</param>
            <param name="callback">The EndXxx method that must be called when this canceled operation eventually completes.</param>
            <returns>The value that should be passed to a BeginXxx method's AsyncCallback argument.</returns>
        </member>
        <member name="T:Aspose.Network.Threading.AsyncEnumerator.EndObjectXxx">
            <summary>
            Identifies an EndXxx method that takes an IAsyncResult and returns some result
            </summary>
            <param name="result">The IAsyncResult of the completion operation.</param>
            <returns>The EndXxx method's return value.</returns>
        </member>
        <member name="T:Aspose.Network.Threading.AsyncEnumerator.EndVoidXxx">
            <summary>
            Identifies an EndXxx method that takes an IAsyncResult and doesn't return a value
            </summary>
            <param name="result">The IAsyncResult of the completion operation.</param>
        </member>
        <member name="T:Aspose.Network.Threading.AsyncEnumerator.AsyncOp">
            <summary>
            Base class that wraps an asynchronous operation and its AsyncCallback method.
            </summary>
        </member>
        <member name="M:Aspose.Network.Threading.AsyncEnumerator.AsyncOp.SelfComplete">
            <summary>
            Called when an AsyncOp is being rejected/dicarded to ensure that its EndXxx method is invoked
            </summary>
        </member>
        <member name="T:Aspose.Network.Threading.AsyncEnumerator.WaitAndInboxCounts">
            <summary>
            This struct contains a single Int32 member that encapsulates the  
            number of items the enumerator is waiting for and the number of 
            completed async operations in the inbox. All members of this type
            manipulate the counters atomically.
            </summary>
        </member>
        <member name="F:Aspose.Network.Threading.AsyncEnumerator.WaitAndInboxCounts.c_MaxWait">
            <summary>
            Sentinal value used to indicate that a thread determined that 
            it should call MoveNext again to advance the iterator 
            </summary>
        </member>
        <member name="F:Aspose.Network.Threading.AsyncEnumerator.WaitAndInboxCounts.m_waitAndInboxCounts">
            <summary>
            High 16 bits=number of inbox items to wait for before calling MoveNext
            Low 16 bits=number of items in inbox 
            </summary>
        </member>
        <member name="M:Aspose.Network.Threading.AsyncEnumerator.WaitAndInboxCounts.#ctor(System.Int32)">
            <summary>
            Constructs a WaitAndInboxCounts instance from an Int32
            </summary>
            <param name="waic">The Int32 instance.</param>
        </member>
        <member name="M:Aspose.Network.Threading.AsyncEnumerator.WaitAndInboxCounts.ToInt32">
            <summary>
            Converts a WaitAndInboxCounts instance to an Int32
            </summary>
            <returns>The WaitAndInboxCounts object as an Int32.</returns>
        </member>
        <member name="M:Aspose.Network.Threading.AsyncEnumerator.WaitAndInboxCounts.Initialize">
            <summary>
            Initializes the Wait to the sentinal value because we don't want
            a thread to MoveNext until the iterator has returned a Wait at least once
            </summary>
        </member>
        <member name="M:Aspose.Network.Threading.AsyncEnumerator.WaitAndInboxCounts.AtomicSetWait(System.UInt16)">
            <summary>
            Atomically updates the number of inbox items the enumerator 
            wants to wait for and returns the new value.
            </summary>
            <param name="numberOpsToWaitFor">The number of asynchronous operations that must complete before the enumerator advances.</param>
            <returns>Returns true if the calling thread met the requirements necessary to call the enumerator's MoveNext method.</returns>
        </member>
        <member name="M:Aspose.Network.Threading.AsyncEnumerator.WaitAndInboxCounts.AtomicIncrementInbox">
            <summary>
            Atomically updates the number of inbox items the enumerator 
            wants to wait for and returns the new value. 
            </summary>
            <returns>Returns true if the calling thread met the requirements necessary to call the enumerator's MoveNext method.</returns>
        </member>
        <member name="M:Aspose.Network.Threading.AsyncEnumerator.WaitAndInboxCounts.AtomicDecrementInbox(System.Int32)">
            <summary>
            Atomically subtracts the number of discarded items from the inbox.
            </summary>
            <param name="numRemoved">The number of asynchronous operations that were discarded from the inbox.</param>
        </member>
        <member name="P:Aspose.Network.Threading.AsyncEnumerator.WaitAndInboxCounts.Wait">
            <summary>
            Gets/Sets the number of items the enumerator is waiting for 
            </summary>
        </member>
        <member name="P:Aspose.Network.Threading.AsyncEnumerator.WaitAndInboxCounts.Inbox">
            <summary>
            Gets/Sets the number of items in the inbox
            </summary>
        </member>
        <member name="T:Aspose.Network.Mail.SmtpRecipientRejectedEventHandler">
            <summary>
            Represents the method that will handle the SmtpRecipientRejected event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:Aspose.Network.Icmp.RedirectMessage">
            <summary>
            Represents a redirect message.
            </summary>
        </member>
        <member name="M:Aspose.Network.Icmp.RedirectMessage.#ctor">
            <summary>
            Initializes a new instance of the NDRReportMailMessageInterpretor class.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.RedirectMessage.GatewayAddress">
            <summary>
            Gets the gateway address.
            </summary>
        </member>
        <member name="T:Aspose.Network.Ftp.TransferCompletedEventArgs">
            <summary>
            Represents the event for file transfering completed.
            </summary>
        </member>
        <member name="P:Aspose.Network.Ftp.TransferCompletedEventArgs.TotalTransferedBytes">
            <summary>
            Gets the total number of bytes tranferred.
            </summary>
        </member>
        <member name="P:Aspose.Network.Ftp.TransferCompletedEventArgs.TransferStatus">
            <summary>
            Gets the tranfer status.
            </summary>
        </member>
        <member name="T:Aspose.Network.Ftp.ListItem">
            <summary>
            Represents the item listed in the remote directory.
            </summary>
        </member>
        <member name="M:Aspose.Network.Ftp.ListItem.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
            <returns>String that contains the contents of this ListItem.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.ListItem.Sort(Aspose.Network.Ftp.ListItem[])">
            <summary>
            Sort the list items with the default comparer.
            </summary>
            <param name="items">The list items.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.ListItem.Sort(Aspose.Network.Ftp.ListItem[],System.Collections.IComparer)">
            <summary>
            Sort the list items with the specified comparer.
            </summary>
            <param name="items">The list items.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="P:Aspose.Network.Ftp.ListItem.ItemStyle">
            <summary>
            Gets the style of the item.
            </summary>
        </member>
        <member name="P:Aspose.Network.Ftp.ListItem.Group">
            <summary>
            Gets the group of the item.
            </summary>
        </member>
        <member name="P:Aspose.Network.Ftp.ListItem.Inodes">
            <summary>
            Gets the inodes of the item.
            </summary>
        </member>
        <member name="P:Aspose.Network.Ftp.ListItem.Owner">
            <summary>
            Gets the owner of the item.
            </summary>
        </member>
        <member name="P:Aspose.Network.Ftp.ListItem.Permissions">
            <summary>
            Gets the permissions of the item.
            </summary>
        </member>
        <member name="P:Aspose.Network.Ftp.ListItem.Date">
            <summary>
            Gets the date of the item.
            </summary>
        </member>
        <member name="P:Aspose.Network.Ftp.ListItem.RawContent">
            <summary>
            Gets the raw content that returned from Ftp server.
            </summary>
        </member>
        <member name="P:Aspose.Network.Ftp.ListItem.ItemType">
            <summary>
            Gets the type of the item.
            </summary>
        </member>
        <member name="P:Aspose.Network.Ftp.ListItem.Name">
            <summary>
            Gets the name of the item.
            </summary>
        </member>
        <member name="P:Aspose.Network.Ftp.ListItem.Size">
            <summary>
            Gets the size of the item.
            </summary>
        </member>
        <member name="P:Aspose.Network.Ftp.ListItem.SoftLink">
            <summary>
            Gets the soft link.
            </summary>
        </member>
        <member name="P:Aspose.Network.Ftp.ListItem.Time">
            <summary>
            Get the time of the item.
            </summary>
        </member>
        <member name="T:Aspose.Network.Ftp.ListItem.ListItemComparer">
            <summary>
            Represents the default comparer for list items
            </summary>
        </member>
        <member name="M:Aspose.Network.Ftp.ListItem.ListItemComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares the two list item objects.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>Less than zero, if a is less than b; Zero, if a equals b; Greater than zero, if a is greater then b.</returns>
        </member>
        <member name="T:Aspose.Network.Dns.AAAAResourceRecord">
            <summary>
            Represents an AAAA (IPv6) DNS resource record
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.AAAAResourceRecord.#ctor">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.AAAAResourceRecord">AAAAResourceRecord</see>.
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.AAAAResourceRecord.#ctor(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.AAAAResourceRecord">AAAAResourceRecord</see>.
            </summary>
            <param name="buffer">The arry of unsigned bytes from which to create.</param>
            <param name="index">The index into buffer at which this resource record begins</param>
            <param name="count">The length of the bytes to create this resource record</param>
        </member>
        <member name="P:Aspose.Network.Dns.AAAAResourceRecord.IPv6Address">
            <summary>
            Gets or sets the Ipv6 address.
            </summary>
        </member>
        <member name="T:Aspose.Network.Mail.HeaderType">
            <summary>
            Represents the Internet standards and RFCs define header fields which may occur on Internet Mail Messages .
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.HeaderType.Equals(System.Object)">
            <summary>
            Overrided.
            </summary>        
        </member>
        <member name="M:Aspose.Network.Mail.HeaderType.GetHashCode">
            <summary>
            Returns a hash value for a header type.
            </summary>
            <returns>An integer hash value.</returns>
        </member>
        <member name="M:Aspose.Network.Mail.HeaderType.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
            <returns>String that contains the contents of this HeaderType.</returns>
        </member>
        <member name="M:Aspose.Network.Mail.HeaderType.op_Implicit(Aspose.Network.Mail.HeaderType)~System.String">
            <summary>
            Converts a HeaderType to string implicitly.
            </summary>
            <param name="type">The header type to convert.</param>
            <returns>String that contains the contents of this HeaderType.</returns>
        </member>
        <member name="P:Aspose.Network.Mail.HeaderType.ApparentlyTo">
            <summary>
            Inserted by sending e-mail when there is no "To:" recipient in the original message. This causes the recipients derived from the envelope to be listed in the message heading. 
            This behavior is not quite proper, MTAs should not modify headers (except inserting Received lines), and it can in some cases cause Bcc recipients to be wrongly divulged to non-Bcc recipients. 
            Example:
            Apparently-To: someone@somedomain.com
            
            Non-standard header that is discouraged in use, mentioned in RFC1211.         
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.HeaderType.ApprovedBy">
            <summary>
            Name of the moderator of the mailing list to which this message is sent; necessary on a posting sent to a moderated mailing list to allow its distribution to the list members. 
            Example:
            Approved-By: someone@somedomain.com
            
            Non-standard for use in e-mail. Defined in RFC1036. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.HeaderType.Bcc">
            <summary>
            A copy of the e-mail message that is sent to one or more recipients without the knowledge of the primary recipients. 
            Primary recipients are listed in the To: and Cc: lines. This is useful if you want to copy a message to many people without each of them seeing who the other recipients are. 
            If you see this header on incoming mail, something is wrong because it does not appear in the headers.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.HeaderType.CC">
            <summary>
            This header can be considered an extension of the "To:" field as it is used to specifiy additional recipients. 
            In this case, the copy of an e-mail message sent to a recipient has the recipient's address appearing in the message. 
            This is useful if you want to copy a message to many people with each of them seeing who the other recipients are; contrast with Bcc above. 
            This header does appear in incoming e-mail. 
            Exmple:
            Cc: gboyd@netcom.com
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.HeaderType.Comments">
            <summary>
            This is a free-form header field defined in RFC2822. 
            The header is used to place explanatory text into the header portion of an e-mail message. 
            The field may contain arbitrary text.
            Exmple:
            Comments: Authenticated sender is someone@somedonmain.com.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.HeaderType.ContentType">
            <summary>
             The "Content-Type" defines the format of content (character set etc.) Note that the values for this header are defined in different ways in RFC1049 and in MIME (RFC2045). Look for the MIME-version: header to understand if Content-Type is to be interpreted according to RFC1049 or according to MIME (RFC2045). The MIME definition should be used in generating mail. 
            
             Historically, Content-Type field was proposed in RFC1049. In it, Content-Type did not distinguish type and subtype like RFC2045 does. 
            
             Example:
             Content-Type: text/plain; charset="us-ascii"
             Content-type: text/plain; charset=US-ASCII
             Content-Type: text/plain; charset="iso-8859-1"
             Content-Type: text/plain; charset=koi8-r
             Content-Type: text/plain; charset=unknown-8bit
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.HeaderType.ContentTransferEncoding">
            <summary>
            The third of the MIME-related headers. Indicates the coding method used in a MIME message body. 
            It has no direct relevance to the delivery of e-mail, but it affects how MIME compliant mail programs interpret the content of the message. 
            
            Defined in RFC2045. 
            
            Content-Transfer-Encoding: 8bit
            Content-transfer-encoding: 7BIT
            Content-Transfer-Encoding: 7bit
            Content-Transfer-Encoding: base64
            Content-Transfer-Encoding: quoted-printable
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.HeaderType.Date">
            <summary>
            This header specifies a date (and time), normally the date the message was composed and sent. In X.400 mail systems, the time a message was submitted. Some Internet mail systems also use the date when the message was submitted. If this header is omitted by the sender's computer, it might conceivably be added by a mail server or even by some other machine along the route. 
            What you may not know is that the information in the "Date:" line is supplied by the time on the sender's computer, which may or may not be set correctly. Also, the "Date:" header does not normally indicate when the message was sent, but only when it was composed. 
            The date is in the form 3 character day-of-week (Sun - Sat), day number (1-31) dd, 3-character month name, 4-digit year yyyy, followed by time (24-hour) hh:mm:ss and zone zzz format. Time Zone (zzz) is either the 3-character time zone or the local differential in hours and minutes offset from UTC (Universal Time Coordinated - old Greenwich Mean Time). "-" indicates west and "+" indicates east of UTC. 
            No standard Time Zone definitions seem to exist. Many UNIX versions understand a great range of abbreviations, but the most exhaustive list I found was the GNU tar manual Timezone item and documentation for the Perl date manipulation module TIMEZONES. 
            
            Example:
            Date: Tue, 9 Jan 2001 23:40:00 -0800
            Date: Sun, 1 Apr 2001 22:52:04 EDT
            Date: Mon, 2 Apr 2001 16:02:19 +0200
            Date: Fri, 30 Mar 2001 10:47:15 -0800
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.HeaderType.From">
            <summary>
            This field contains the identity of the person(s) who wished this message to be sent. 
            The message-creation process should default this field to be a single, authenticated machine address, indicating the AGENT (person, system or process) composing the message. 
            If this is not done, the "Sender:" field MUST be present. If the "From:" field IS defaulted this way, the "Sender:" field is optional and is redundant with the "From:" field. 
            
            Example:
            From: "Mr. Some One" someone@somedomain.com
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.HeaderType.FollowupTo">
             <summary>
            Used in Usenet News to indicate that future discussions (=follow-up) on an article should go to a different set of newsgroups than the replied-to article. 
            The most common usage is when an article is posted to several newsgroups, and further discussions is to take place in only one of them. 
            
             Defined in RFC 1036: 2.2.3, not standardized for use in e-mail. 
              
             </summary>
        </member>
        <member name="P:Aspose.Network.Mail.HeaderType.InReplyTo">
            <summary>
            Reference to message which this message is a reply to. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.HeaderType.MessageID">
            <summary>
            Unique ID of this message. 
            Defined In RFC 822: 4.6.1 ,RFC 1036: 2.1.5. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.HeaderType.MIMEVersion">
            <summary>
            An indicator that this message is formatted according to the MIME standard, and an indication of which version of MIME is utilized. 
            
            Defined in RFC 2045
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.HeaderType.Newsgroups">
            <summary>
            In Usenet News: group(s) to which this article was posted. 
            Some systems provide this header field also in e-mail although it is not standardized there. 
            Unfortunately, the header field can appear in e-mail with three different and contradictory meanings: 
            (a) Indicating the newsgroup recipient of an article/message sent to both e-mail and Usenet News recipients. 
            (b) In a message adressed to some mail to news gateways, indicates the newsgroup(s) that the message is to be posted to. 
            (c) In a personally addressed reply to an article in a news-group, indicating the newsgroup in which this discussion originated. 
            
            Defined in RFC 1036: 2.1.3, not standardized and controversial for use in e-mail.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.HeaderType.Received">
            <summary>
            Trace of MTAs which a message has passed. 
            
            Defined in RFC 822
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.HeaderType.ReturnPath">
            <summary>
            Used to convey the information from the MAIL FROM envelope attribute in final delivery, when the message leaves the SMTP environment in which "MAIL FROM" is used. /// 
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.HeaderType.Sender">
            <summary>
            The person or agent submitting the message to the network, if other than shown by the From: header field. Should be authenticated, according to RFC 822, but what kind of authentication is not clear. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.HeaderType.ReplyTo">
            <summary>
            This header field is meant to indicate where the sender wants replies to go. 
            Unfortunately, this is ambiguous, since there are different kinds of replies, which the sender may wish to go to different addresses. 
            In particular, there are personal replies intended for only one person, and group replies, intended for the whole group of people who read the replied-to message (often a mailing list, anewsgroup name cannot appear here because of different syntax, see "FollowupTo" .). 
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.HeaderType.Subject">
            <summary>
            Title, heading, subject. Often used as thread indicator for messages replying to or commenting on other messages. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.HeaderType.To">
            <summary>
            Primary recipients. 
            
            Example:
            To: someone@somedomain.com
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.HeaderType.References">
            <summary>
            Reference to other related messages. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.HeaderType.XMailer">
            <summary>
            Information about the client software of the originator. 
            
            Example:
            X-Mailer: Aspose.Network
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.HeaderType.XConfirmReadingTo">
            <summary>
            This header requests an automated confirmation notice when the message is received or read. It is typically ignored; presumably some software acts on it. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.HeaderType.Importance">
            <summary>
            This header requests an importance of the message is received or read.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.HeaderType.Sensitivity">
            <summary>
            This header requests a sensitivity of the message is received or read.
            </summary>
        </member>
        <member name="F:Aspose.Network.BigInteger.DEFAULT_LEN">
            <summary>
            Default length of a BigInteger in bytes
            </summary>
        </member>
        <member name="F:Aspose.Network.BigInteger.length">
            <summary>
            The Length of this BigInteger
            </summary>
        </member>
        <member name="F:Aspose.Network.BigInteger.data">
            <summary>
            The data for this BigInteger
            </summary>
        </member>
        <member name="F:Aspose.Network.BigInteger.smallPrimes">
            <summary>
            	Table of primes below 2000.
            </summary>
            <remarks>
            	<para>
            	This table was generated using Mathematica 4.1 using the following function:
            	</para>
            	<para>
            		<code>
            		PrimeTable [x_] := Prime [Range [1, PrimePi [x]]]
            		PrimeTable [6000]
            		</code>
            	</para>
            </remarks>
        </member>
        <member name="M:Aspose.Network.BigInteger.TestBit(System.UInt32)">
            <summary>
            Tests if the specified bit is 1.
            </summary>
            <param name="bitNum">The bit to test. The least significant bit is 0.</param>
            <returns>True if bitNum is set to 1, else false.</returns>
        </member>
        <member name="M:Aspose.Network.BigInteger.Normalize">
            <summary>
                Normalizes this by setting the length to the actual number of
                uints used in data and by setting the sign to Sign.Zero if the
                value of this is 0.
            </summary>
        </member>
        <member name="T:Aspose.Network.BigInteger.Kernel">
            <summary>
            Low level functions for the BigInteger
            </summary>
        </member>
        <member name="M:Aspose.Network.BigInteger.Kernel.AddSameSign(Aspose.Network.BigInteger,Aspose.Network.BigInteger)">
            <summary>
            Adds two numbers with the same sign.
            </summary>
            <param name="bi1">A BigInteger</param>
            <param name="bi2">A BigInteger</param>
            <returns>bi1 + bi2</returns>
        </member>
        <member name="M:Aspose.Network.BigInteger.Kernel.Compare(Aspose.Network.BigInteger,Aspose.Network.BigInteger)">
            <summary>
            Compares two BigInteger
            </summary>
            <param name="bi1">A BigInteger</param>
            <param name="bi2">A BigInteger</param>
            <returns>The sign of bi1 - bi2</returns>
        </member>
        <member name="M:Aspose.Network.BigInteger.Kernel.SingleByteDivideInPlace(Aspose.Network.BigInteger,System.UInt32)">
            <summary>
            Performs n / d and n % d in one operation.
            </summary>
            <param name="n">A BigInteger, upon exit this will hold n / d</param>
            <param name="d">The divisor</param>
            <returns>n % d</returns>
        </member>
        <member name="T:Aspose.Network.Logging.FileAppender">
            <summary>
            Reprensents a file appender.
            </summary>
        </member>
        <member name="M:Aspose.Network.Logging.FileAppender.#ctor">
            <summary>
            Initializes a new instance of the FileAppender class.
            </summary>
        </member>
        <member name="M:Aspose.Network.Logging.FileAppender.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FileAppender class.
            </summary>
            <param name="fileName">The file name.</param>
        </member>
        <member name="M:Aspose.Network.Logging.FileAppender.Append(Aspose.Network.Logging.LogEntry)">
            <summary>
            Appends the log entry information to the appender.
            </summary>
            <param name="logEntry">The log entry.</param>
        </member>
        <member name="M:Aspose.Network.Logging.FileAppender.Append(Aspose.Network.Logging.LogEntry[])">
            <summary>
            Appends a set of log entries to the appender.
            </summary>
            <param name="logEntries">A set of log entries to log.</param>
        </member>
        <member name="M:Aspose.Network.Logging.FileAppender.Close">
            <summary>
            Closes the file(s) opened for writing.
            </summary>
        </member>
        <member name="P:Aspose.Network.Logging.FileAppender.FileName">
            <summary>
            Gets or sets file name.
            </summary>
        </member>
        <member name="P:Aspose.Network.Logging.FileAppender.BufferSize">
            <summary>
            Gets or sets the buffer size.
            </summary>
        </member>
        <member name="P:Aspose.Network.Logging.FileAppender.Encoding">
            <summary>
            Gets or sets the encoding.
            </summary>
        </member>
        <member name="T:Aspose.Network.Icmp.EchoCompletedEventHandler">
            <summary>
            Represents the method that will handle the EchoCompleted event of an IcmpClient object.
            </summary>
        </member>
        <member name="T:Aspose.Network.Ftp.ListItemStyle">
            <summary>
            Represents the style of the list item.
            </summary>
        </member>
        <member name="F:Aspose.Network.Ftp.ListItemStyle.MSDOS">
            <summary>
            MS-DOS style
            </summary>
        </member>
        <member name="F:Aspose.Network.Ftp.ListItemStyle.Unix">
            <summary>
            Unix style
            </summary>
        </member>
        <member name="F:Aspose.Network.Ftp.ListItemStyle.VMS">
            <summary>
            VAX/VMS style
            </summary>
        </member>
        <member name="T:Aspose.Network.Ftp.TransferType">
            <summary>
            Represents the type for data tranfering.
            </summary>
        </member>
        <member name="F:Aspose.Network.Ftp.TransferType.Ascii">
            <summary>
            ASCII (7 bit) file transfers
            </summary>
        </member>
        <member name="F:Aspose.Network.Ftp.TransferType.Binary">
            <summary>
            Binary (8 bit) file transfers
            </summary>
        </member>
        <member name="T:Aspose.Network.Outlook.MapiMessage">
             <summary>
             Represents a Outlook Message format document that can be parsed.
             </summary>
             <remarks>
             Instances of the MapiMessage class are used to represent Microsoft Outlook Message document files that are 
             parsed by MapiMessageReader class. 
             To access the sender, recipient, and contents of an e-mail message, use the associated properties of the MapiMessage class.
            </remarks>
             <example>
             <p>The following exmaple demonstrates how to read Outlook Message files.</p>
             [C#]
             <code>
            		//Open Outlook Message files
            		MapiMessage msg = MapiMessage.FromFile(@"c:\outlookmessage.msg");
            		
                    //read subject
                    Console.WriteLine("Subject:" + msg.Subject);
             
                    //sender name
                    Console.WriteLine("From:" + msg.SenderName);
                    
                    //message body
                    Console.WriteLine("Body:" + msg.Body);
             
                    //Attachments
                    foreach(MapiAttachment att in msg.Attachments)
                    {
                        Console.WriteLine("Attachment Name:"+att.FileName);
                        att.Save(att.FileName);
                    }    
             </code>
             [VB.NET]
             <code>
                    'Open Outlook Message files 
                    Dim msg As MapiMessage = MapiMessage.FromFile("c:\outlookmessage.msg") 
            
                    'read subject 
                    Console.WriteLine("Subject:" + msg.Subject) 
            
                    'sender name 
                    Console.WriteLine("From:" + msg.SenderName) 
            
                    'message body 
                    Console.WriteLine("Body:" + msg.Body) 
            
                    'Attachments 
                    For Each att As MapiAttachment In msg.Attachments 
                        Console.WriteLine("Attachment Name:" + att.FileName) 
                        att.Save(att.FileName) 
                    Next
             </code>
             </example>
        </member>
        <member name="T:Aspose.Network.Outlook.MapiPropertyContainer">
            <summary>
            Represents the base class for <seealso cref="T:Aspose.Network.Outlook.MapiAttachment"/>, <seealso cref="T:Aspose.Network.Outlook.MapiRecipient"/>, <seealso cref="T:Aspose.Network.Outlook.MapiMessage"/>.
            </summary>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiPropertyContainer.TryGetPropertyString(System.Int64,System.Int32)">
            <summary>
            Try to get a property data as string with specified tag and code page.
            </summary>
            <param name="tag">The property tag key.</param>
            <param name="codepage">The code page.</param>
            <returns>String that contains the contents of property data.</returns>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiPropertyContainer.TryGetPropertyData(System.Int64)">
            <summary>
            Try to get the property data with specified tag key.
            </summary>
            <param name="tag">The tag key.</param>
            <returns>The property data.</returns>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiPropertyContainer.TryGetPropertyString(System.Int64)">
            <summary>
            Try to get a property data as string with specified tag.
            </summary>
            <param name="tag">The property tag key.</param>
            <returns>String that contains the contents of property data.</returns>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiPropertyContainer.GetPropertyString(System.Int64,System.Int32)">
            <summary>
            Gets the string value of the property specified by tag
            </summary>
            <param name="tag">The MAPI property tag.</param>
            <param name="codepage">The specified codepage used to get string value</param>
            <returns>The value of the property. If the property does not exist, returns NULL; otherwise, returns the value.</returns>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiPropertyContainer.GetPropertyString(System.Int64)">
            <summary>
            Gets the string value of the property specified by tag.
            </summary>
            <param name="tag">The MAPI property tag.</param>
            <returns>The value of the property. If the property does not exist, returns NULL; otherwise, returns the value.</returns>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiPropertyContainer.GetPropertyBytes(System.Int64)">
            <summary>
            Gets the string value of the property specified by tag.
            </summary>
            <param name="tag">The MAPI property tag.</param>
            <returns>The value of the property. If the property does not exist, returns NULL; otherwise, returns the value.</returns>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiPropertyContainer.GetPropertyInt32(System.Int64)">
            <summary>
            Gets the int32 value of the property specified by tag.
            </summary>
            <param name="tag">The MAPI property tag.</param>
            <returns>The value of the property. If the property does not exist, returns NULL; otherwise, returns the value.</returns>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiPropertyContainer.GetPropertyLong(System.Int64)">
            <summary>
            Gets the value of the property specified by tag as Long (int64) type.
            </summary>
            <param name="tag">The MAPI property tag.</param>
            <returns>The value of the property. If the property does not exist, returns NULL; otherwise, returns the value.</returns>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiPropertyContainer.GetPropertyShort(System.Int64)">
            <summary>
            Gets the value of the property specified by tag as Short type.
            </summary>
            <param name="tag">The MAPI property tag.</param>
            <returns>The value of the property. If the property does not exist, returns NULL; otherwise, returns the value.</returns>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiPropertyContainer.GetPropertyBoolean(System.Int64)">
            <summary>
            Gets the value of the property specified by tag as Boolean type.
            </summary>
            <param name="tag">The MAPI property tag.</param>
            <returns>The value of the property. If the property does not exist, returns NULL; otherwise, returns the value.</returns>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiPropertyContainer.GetPropertyDateTime(System.Int64)">
            <summary>
            Gets the value of the property specified by tag as DateTime type.
            </summary>
            <param name="key">The MAPI property tag.</param>
            <returns>The value of the property. If the property does not exist, returns NULL; otherwise, returns the value.</returns>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiPropertyContainer.TryGetPropertyString(System.Int64,System.String@,System.Int32)">
            <summary>
            Gets the value of the specified property as String type. A return value indicates whether the operation succeeded.
            </summary>
            <param name="tag">The MAPI property tag.</param>
            <param name="value">When this method returns, contains the value of the specified property, if the property exists. This parameter is passed uninitialized. </param>
            <param name="codepage">The specified codepage used to get string value</param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiPropertyContainer.TryGetPropertyString(System.Int64,System.String@)">
            <summary>
            Gets the value of the specified property as String type. A return value indicates whether the operation succeeded.
            </summary>
            <param name="tag">The MAPI property tag.</param>
            <param name="value">When this method returns, contains the value of the specified property, if the property exists. This parameter is passed uninitialized. </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiPropertyContainer.TryGetPropertyDateTime(System.Int64,System.DateTime@)">
            <summary>
            Gets the value of the specified property as DateTime type. A return value indicates whether the operation succeeded.
            </summary>
            <param name="tag">The MAPI property tag.</param>
            <param name="value">When this method returns, contains the value of the specified property, if the property exists. This parameter is passed uninitialized. </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiPropertyContainer.TryGetPropertyLong(System.Int64,System.Int64@)">
            <summary>
            Gets the value of the specified property as Long type. A return value indicates whether the operation succeeded.
            </summary>
            <param name="tag">The MAPI property tag.</param>
            <param name="value">When this method returns, contains the value of the specified property, if the property exists. This parameter is passed uninitialized. </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiPropertyContainer.TryGetPropertyInt32(System.Int64,System.Int32@)">
            <summary>
            Gets the value of the specified property as Int32 type. A return value indicates whether the operation succeeded.
            </summary>
            <param name="tag">The MAPI property tag.</param>
            <param name="value">When this method returns, contains the value of the specified property, if the property exists. This parameter is passed uninitialized. </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiPropertyContainer.Properties">
            <summary>
            The collection of properties.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiPropertyContainer.CodePage">
            <summary>
            The code page used.
            </summary>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiMessage.#ctor">
            <summary>
            Create an instance of MapiMessage.
            </summary>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiMessage.FromFile(System.String)">
            <summary>
            Create an instance of MapiMessage from the specified file.
            </summary>
            <param name="path">The name of the file to be loaded. </param>
            <returns>Returns a MapiMessage instance which is loaded from the specified file.</returns>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiMessage.FromStream(System.IO.Stream)">
            <summary>
            Create an instance of MapiMessage from the specified stream.
            </summary>
            <param name="stream">The stream to be loaded. </param>
            <returns>Returns a MapiMessage instance which is loaded from the specified stream.</returns>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiMessage.FromProperties(Aspose.Network.Outlook.MapiPropertyCollection)">
            <summary>
            Creates an instance of MapiMessage from a collection of Mapi properties.
            </summary>
            <param name="properties">A collection of MapiProperty.</param>
            <returns>Returns a MapiMessage instance which is loaded from the specified properties.</returns>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiMessage.RemoveAttachments(System.String)">
            <summary>
            Removes all of the attachments from the specified Outlook Message files.
            </summary>
            <param name="path">The name of the Outlook Message file. </param>
            <example>
            <p>The following exmaple demonstrates how to destroy attachments in Outlook Message files.</p>
            [C#]
            <code>
            	//Remove attachments from Outlook Message files
            	MapiAttachmentCollection attachments = MapiMessage.RemoveAttachments(@"c:\outlookmessage.msg");
                   
                   //Attachments
                   foreach(MapiAttachment att in attachments)
                   {
                       Console.WriteLine("Attachment Name:"+att.FileName);
                       att.Save(att.FileName);
                   }
            </code>
            [VB.NET]
            <code>
            	'Remove attachments from Outlook Message files
                   MapiAttachmentCollection attachments = MapiMessage.RemoveAttachments("c:\outlookmessage.msg");
            
                   'Attachments 
                   For Each att As MapiAttachment In msg.Attachments 
                       Console.WriteLine("Attachment Name:" + att.FileName) 
                       att.Save(att.FileName) 
                   Next
            </code>
            </example>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiMessage.DestroyAttachments(System.String)">
            <summary>
            Destroies the attachments in the specified Outlook Message files. DestroyAttachments will ignore the attachment parsing.
            </summary>
            <param name="path">The name of the Outlook Message file.</param>
            <example>
            <p>The following exmaple demonstrates how to destroy attachments in Outlook Message files.</p>
            [C#]
            <code>
            	//Destroy attachments from Outlook Message files
            	MapiMessage.DestroyAttachment(@"c:\outlookmessage.msg");
            </code>
            [VB.NET]
            <code>
            	'Destroy attachments from Outlook Message files
            	MapiMessage.DestroyAttachment("c:\outlookmessage.msg")
            </code>
            </example>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiMessage.BodyRtf">
            <summary>
            Gets the RTF formatted message text.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiMessage.Body">
            <summary>
            Gets the message text.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiMessage.NormalizedSubject">
            <summary>
            Gets normalized subject of the message.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiMessage.DisplayTo">
            <summary>
            Gets a list of the display names of the primary (To) message recipients, separated by semicolons (;). 
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiMessage.DisplayNamePrefix">
            <summary>
            Gets a prefix of the display name.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiMessage.DisplayName">
            <summary>
            Gets the display name for the message. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiMessage.DisplayCc">
            <summary>
            Gets a list of the display names of any carbon copy (CC) message recipients, separated by semicolons (;). 
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiMessage.DisplayBcc">
            <summary>
            Gets a list of the display names of any blind carbon copy (BCC) message recipients, separated by semicolons (;).
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiMessage.SenderEmailAddress">
            <summary>
            Gets the message sender's e-mail address.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiMessage.SenderAddressType">
            <summary>
            Gets the message sender's e-mail address type.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiMessage.SenderName">
            <summary>
            Gets the message sender's display name.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiMessage.TransportMessageHeaders">
            <summary>
            Gets the transport-specific message envelope information.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiMessage.InternetMessageId">
            <summary>
            Gets the message id of the message.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiMessage.ConversationTopic">
            <summary>
            Gets the topic of the first message in a conversation thread. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiMessage.SentRepresentingEmailAddress">
            <summary>
            Gets the e-mail address for the messaging user represented by the sender.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiMessage.SentRepresentingAddressType">
            <summary>
            Gets the address type for the messaging user represented by the sender.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiMessage.SentRepresentingName">
            <summary>
            Gets the display name for the messaging user represented by the sender.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiMessage.SubjectPrefix">
            <summary>
            Gets a subject prefix that typically indicates some action on a message, such as "FW: " for forwarding. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiMessage.Subject">
            <summary>
            Gets the subject of the message.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiMessage.MessageClass">
            <summary>
            Gets a subject prefix that typically indicates some action on a message, such as "FW: " for forwarding. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiMessage.Attachments">
            <summary>
            Gets the attachments in the message.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiMessage.Recipients">
            <summary>
            Gets the recipients of the message.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiMessage.ClientSubmitTime">
            <summary>
            Gets the client submit time of the message.
            </summary>
        </member>
        <member name="T:Aspose.Network.Outlook.MapiPropertyCollection">
            <summary>
            Represents the collection of MapiProperty items.
            </summary>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiPropertyCollection.#ctor">
            <summary>
            Creates a new instance of class MapiProperty.
            </summary>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiPropertyCollection.Add(System.Int64,Aspose.Network.Outlook.MapiProperty)">
            <summary>
            adds a MapiProperty item with specified tag.
            </summary>
            <param name="tag"></param>
            <param name="value"></param>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiPropertyCollection.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the specified key and value to the collection.
            </summary>
            <param name="tag">The tag key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiPropertyCollection.Clear">
            <summary>
            Removes all of the elements from the collection.
            </summary>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiPropertyCollection.Contains(System.Object)">
            <summary>
            Determines whether the collection contains the specified tag.
            </summary>
            <param name="tag">The tag.</param>
            <returns>true if the collection contains an element with the specified tag; otherwise, false.</returns>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiPropertyCollection.Contains(System.Int64)">
            <summary>
            Determines whether the collection contains the specified tag.
            </summary>
            <param name="tag">The tag.</param>
            <returns>true if the collection contains an element with the specified tag; otherwise, false.</returns>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiPropertyCollection.GetEnumerator">
            <summary>
            Returns an System.Collections.IDictionaryEnumerator that iterates through the collection.
            </summary>
            <returns>An System.Collections.IDictionaryEnumerator for the collection.</returns>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiPropertyCollection.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the collection.
            </summary>
            <param name="tag">The key tag of the element to remove.</param>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiPropertyCollection.Remove(System.Int64)">
            <summary>
            Removes the element with the specified key from the collection.
            </summary>
            <param name="tag">The key tag of the element to remove.</param>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiPropertyCollection.CopyTo(System.Array,System.Int32)">
            <summary>
             Copies the collection elements to a one-dimensional System.Array instance at the specified index.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the System.Collections.DictionaryEntry objects copied from the collection. The System.Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiPropertyCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiPropertyCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read only.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiPropertyCollection.Keys">
            <summary>
            Gets an System.Collections.ICollection containing the keys in the collection.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiPropertyCollection.Values">
            <summary>
            Gets an System.Collections.ICollection containing the values in the collection.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiPropertyCollection.Item(System.Object)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="tag">The tag key whose value to get or set.</param>
            <returns>The value associated with the specified key.</returns>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiPropertyCollection.Item(System.Int64)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="tag">The tag key whose value to get or set.</param>
            <returns>The value associated with the specified key.</returns>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiPropertyCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiPropertyCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiPropertyCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="T:Aspose.Network.Outlook.FileAccessViolationException">
            <summary>
            This exception wile be thrown when the file open and locked by another caller.
            </summary>
        </member>
        <member name="M:Aspose.Network.Outlook.FileAccessViolationException.#ctor">
            <summary>
            Initializes a new instance of the class with default error message.
            </summary>
        </member>
        <member name="M:Aspose.Network.Outlook.FileAccessViolationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message.
            </summary>
            <param name="message">Error message.</param>
        </member>
        <member name="M:Aspose.Network.Outlook.FileAccessViolationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the Exception class with
            a specified error message and a reference to the inner
            exception that is the cause of this exception.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception.
            If the innerException parameter is not a NULL reference
            (Nothing in Visual Basic), the current exception is raised
            in a catch block that handles the inner exception.
            </param>
        </member>
        <member name="T:Aspose.Network.Dns.PXResourceRecord">
            <summary>
            Represents a PX DNS resource record
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.PXResourceRecord.#ctor">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.PXResourceRecord">PXResourceRecord</see>.
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.PXResourceRecord.#ctor(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.PXResourceRecord">PXResourceRecord</see>.
            </summary>
            <param name="buffer">The arry of unsigned bytes from which to create.</param>
            <param name="index">The index into buffer at which this resource record begins</param>
            <param name="count">The length of the bytes to create this resource record</param>
        </member>
        <member name="P:Aspose.Network.Dns.PXResourceRecord.Preference">
            <summary>
            Gets or sets the preference
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.PXResourceRecord.MapX400">
            <summary>
            Gets or sets the MapX400
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.PXResourceRecord.Map822">
            <summary>
            Gets or sets the Map822
            </summary>
        </member>
        <member name="T:Aspose.Network.Dns.ISDNResourceRecord">
            <summary>
            Represents an ISDN DNS resource record
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.ISDNResourceRecord.#ctor">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.ISDNResourceRecord">ISDNResourceRecord</see>.
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.ISDNResourceRecord.#ctor(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.ISDNResourceRecord">ISDNResourceRecord</see>.
            </summary>
            <param name="buffer">The arry of unsigned bytes from which to create.</param>
            <param name="index">The index into buffer at which this resource record begins</param>
            <param name="count">The length of the bytes to create this resource record</param>
        </member>
        <member name="P:Aspose.Network.Dns.ISDNResourceRecord.Address">
            <summary>
            Gets or sets the address
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.ISDNResourceRecord.SubAddress">
            <summary>
            Gets or sets the sub address
            </summary>
        </member>
        <member name="T:Aspose.Network.Dns.GPOSResourceRecord">
            <summary>
            Represents a GPOS DNS resource record
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.GPOSResourceRecord.#ctor">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.GPOSResourceRecord">GPOSResourceRecord</see>.
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.GPOSResourceRecord.#ctor(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.GPOSResourceRecord">GPOSResourceRecord</see>.
            </summary>
            <param name="buffer">The arry of unsigned bytes from which to create.</param>
            <param name="index">The index into buffer at which this resource record begins</param>
            <param name="count">The length of the bytes to create this resource record</param>
        </member>
        <member name="P:Aspose.Network.Dns.GPOSResourceRecord.Altitude">
            <summary>
            Gets or sets the altitude
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.GPOSResourceRecord.Latitude">
            <summary>
            Gets or sets the latitude
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.GPOSResourceRecord.Longitude">
            <summary>
            Gets or sets the longitude
            </summary>
        </member>
        <member name="T:Aspose.Network.Outlook.MailMessageInterpretorFactory">
            <summary>
            Represents the object factory for MailMessageInterpretor class.
            </summary>
        </member>
        <member name="M:Aspose.Network.Outlook.MailMessageInterpretorFactory.AddInterpretor(Aspose.Network.Outlook.MailMessageInterpretor,System.String)">
            <summary>
            Adds an interpretor instance with specified message class.
            </summary>
            <param name="interpretor">The interpretor to add.</param>
            <param name="messageClass">The mapping message class.</param>
        </member>
        <member name="M:Aspose.Network.Outlook.MailMessageInterpretorFactory.GetIntepretor(System.String)">
            <summary>
            Gets an interpretor intance from the factory with specified message class.
            </summary>
            <param name="messageClass">The mapping message class.</param>
            <returns>An interpretor.</returns>
        </member>
        <member name="P:Aspose.Network.Outlook.MailMessageInterpretorFactory.DefaultInterpretor">
            <summary>
            Gets or sets the defalut interpretor.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MailMessageInterpretorFactory.Instance">
            <summary>
            Gets an instance of the MailMessageInterpretorFactory class.
            </summary>
        </member>
        <member name="T:Aspose.Network.Mime.ContentType">
            <summary>
            Represents a MIME protocol Content-Type header. 
            </summary>
        </member>
        <member name="M:Aspose.Network.Mime.ContentType.#ctor">
            <summary>
            Initializes a new default instance of the ContentType class with application/octet-stream content type.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mime.ContentType.#ctor(System.String)">
            <summary>
            Initializes a new default instance of the ContentType class. 
            </summary>
            <param name="contentType">A String, for example, "text/plain; charset=us-ascii", that contains the MIME media type, subtype, and optional parameters.</param>
        </member>
        <member name="M:Aspose.Network.Mime.ContentType.Equals(System.Object)">
            <summary>
            Overrided.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mime.ContentType.GetHashCode">
            <summary>
            Overrided.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mime.ContentType.ToString">
            <summary>
            Overrided.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mime.ContentType.Clone">
            <summary>
            Creates a copy.
            </summary>
            <returns>A copy of ContentType.</returns>
        </member>
        <member name="P:Aspose.Network.Mime.ContentType.Boundary">
            <summary>
            Gets or sets the value of the boundary parameter included in the Content-Type header represented by this instance. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Mime.ContentType.Name">
            <summary>
            Gets or sets the value of the name parameter included in the Content-Type header represented by this instance. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Mime.ContentType.CharSet">
            <summary>
            Gets or sets the value of the charset parameter included in the Content-Type header represented by this instance. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Mime.ContentType.MediaType">
            <summary>
            Gets or sets the media type value included in the Content-Type header represented by this instance. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Mime.ContentType.Parameters">
            <summary>
            Gets the dictionary that contains the parameters included in the Content-Type header represented by this instance. 
            </summary>
        </member>
        <member name="T:Aspose.Network.Mail.MailMessageCollection">
            <summary>
            Represents a collection of <see cref="T:Aspose.Network.Mail.MailMessage">MailMessage</see> objects.
            </summary>
            <remarks>
            Provides a simple collection object that can represent a set of <see cref="T:Aspose.Network.Mail.MailMessage">MailMessage</see> objects.
            The <see cref="T:Aspose.Network.Mail.MailMessageCollection">MailMessageCollection</see> class provides a simple collection object that can be used to store a set of <see cref="T:Aspose.Network.Mail.MailMessage">MailMessage</see> objects.	
            </remarks>
        </member>
        <member name="M:Aspose.Network.Mail.MailMessageCollection.#ctor">
            <summary>
            Initialize a new instance of the class <see cref="T:Aspose.Network.Mail.MailMessageCollection">MailMessageCollection</see>.
            </summary>
        </member>
        <member name="T:Aspose.Network.Mail.MailException">
            <summary>
            Defines the base class for predefined exceptions in the Aspose.Network.Mail namespace
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.MailException.#ctor">
            <summary>
            Initializes a new intances of the MailException class.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.MailException.#ctor(System.String)">
            <summary>
            Initializes a new intances of the MailException class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Aspose.Network.Mail.MailException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new intances of the MailException class.
            </summary>
            <param name="message">The error message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="T:Aspose.Network.ConnectionState">
            <summary>
            Describes the current state of the connection to a data source.
            <p>This enumeration has a FlagsAttribute attribute that allows a bitwise combination of its member values.</p>
            </summary>
        </member>
        <member name="F:Aspose.Network.ConnectionState.Broken">
            <summary>
            The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened. (This value is reserved for future versions of the product.)
            </summary>
        </member>
        <member name="F:Aspose.Network.ConnectionState.Closed">
            <summary>
            The connection is closed.
            </summary>
        </member>
        <member name="F:Aspose.Network.ConnectionState.Connecting">
            <summary>
            The connection object is connecting to the data source. 
            </summary>
        </member>
        <member name="F:Aspose.Network.ConnectionState.Executing">
            <summary>
            The connection object is executing a command. (This value is reserved for future versions of the product.)
            </summary>
        </member>
        <member name="F:Aspose.Network.ConnectionState.Fetching">
            <summary>
            The connection object is retrieving data. (This value is reserved for future versions of the product.)
            </summary>
        </member>
        <member name="F:Aspose.Network.ConnectionState.Open">
            <summary>
            The connection is open.
            </summary>
        </member>
        <member name="T:Aspose.Network.Mail.SmtpFailedBulkSendException">
            <summary>
            Represents the exception thrown in bulk sending email message.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpFailedBulkSendException.#ctor">
            <summary>
            Initializes a new instance of the SmtpFailedBulkSendException class.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpFailedBulkSendException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SmtpFailedBulkSendException class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpFailedBulkSendException.#ctor(System.String,Aspose.Network.Mail.MailMessageCollection,System.Collections.ArrayList)">
            <summary>
            Initializes a new instance of the SmtpFailedBulkSendException class.
            </summary>
            <param name="message">The error message.</param>
            <param name="failedMessages">The email message fail to send.</param>
            <param name="innerExceptions">The inner exceptions.</param>
        </member>
        <member name="P:Aspose.Network.Mail.SmtpFailedBulkSendException.FailedSentMessages">
            <summary>
            Gets the email message that fail to send.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.SmtpFailedBulkSendException.InnerExceptions">
            <summary>
            Gets a list of inner exceptions.
            </summary>
        </member>
        <member name="T:Aspose.Network.Icmp.ParameterProblemMessage">
            <summary>
            Represents a parameter problem message.
            </summary>
        </member>
        <member name="M:Aspose.Network.Icmp.ParameterProblemMessage.#ctor">
            <summary>
            Initializes a new instance of the ParameterProblemMessage class.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.ParameterProblemMessage.Pointer">
            <summary>
            Gets or sets pointer.
            </summary>
        </member>
        <member name="T:Aspose.Network.Ftp.TransferCompletedEventHandler">
            <summary>
            Represent the method to hanle the TransferCompleted Event
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:Aspose.Network.Dns.SRVResourceRecord">
            <summary>
            Represents a SRV DNS resource record
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.SRVResourceRecord.#ctor">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.SRVResourceRecord">SRVResourceRecord</see>.
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.SRVResourceRecord.#ctor(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.SRVResourceRecord">SRVResourceRecord</see>.
            </summary>
            <param name="buffer">The arry of unsigned bytes from which to create.</param>
            <param name="index">The index into buffer at which this resource record begins</param>
            <param name="count">The length of the bytes to create this resource record</param>
        </member>
        <member name="P:Aspose.Network.Dns.SRVResourceRecord.Port">
            <summary>
            Gets or sets the port
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.SRVResourceRecord.Priority">
            <summary>
            Gets or sets the priority
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.SRVResourceRecord.Target">
            <summary>
            Gets or sets the target
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.SRVResourceRecord.Weight">
            <summary>
            Gets or sets the weight
            </summary>
        </member>
        <member name="T:Aspose.Network.Dns.MRResourceRecord">
            <summary>
            Represents a MR DNS resource record
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.MRResourceRecord.#ctor">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.MRResourceRecord">MRResourceRecord</see>.
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.MRResourceRecord.#ctor(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.MRResourceRecord">MRResourceRecord</see>.
            </summary>
            <param name="buffer">The arry of unsigned bytes from which to create.</param>
            <param name="index">The index into buffer at which this resource record begins</param>
            <param name="count">The length of the bytes to create this resource record</param>
        </member>
        <member name="P:Aspose.Network.Dns.MRResourceRecord.NewName">
            <summary>
            Gets or sets the new name
            </summary>
        </member>
        <member name="T:Aspose.Network.Dns.MGResourceRecord">
            <summary>
            Represents a MG DNS resource record
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.MGResourceRecord.#ctor">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.MGResourceRecord">MGResourceRecord</see>.
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.MGResourceRecord.#ctor(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.MGResourceRecord">MGResourceRecord</see>.
            </summary>
            <param name="buffer">The arry of unsigned bytes from which to create.</param>
            <param name="index">The index into buffer at which this resource record begins</param>
            <param name="count">The length of the bytes to create this resource record</param>
        </member>
        <member name="P:Aspose.Network.Dns.MGResourceRecord.MailBox">
            <summary>
            Gets or sets the mail box
            </summary>
        </member>
        <member name="T:Aspose.Network.Pop3.Pop3Client">
            <summary>
            <p>The Pop3Client calss allows applications to manage E-Mail box by using the Post Office Protocol Version 3 (POP3).</p>
            
            <p>The Pop3Client class fully supports the Pop3 commands and functions.</p>
            
            <p>The Pop3Client class fully supports the Asynchronous and Synchronous programming model.</p>
            
            <p>The Pop3Client the major entry for the developers who want to add Pop3 management to their .Net applications.</p>
            </summary>
            <example>
            <p>The following exmaple demonstrates how to use Pop3Client class to fetch e-mail messages from the server.</p>
            [C#]
            <code>
            //create Pop3client with specified server, username and password.
            Pop3client client = new Pop3client("pop3.yourdomain.com", "username", "password");
            try
            {
            	//connect and login to the pop3 server
            	client.Connect(true);
            	//save the message
            	client.SaveMessage(1, "file.eml");
            }
            catch (Pop3Exception ex)
            {
            	System.Diagnostics.Debug.WriteLine(ex.ToString());
            }
            </code>
            [VB.NET]
            <code>
            'create Pop3client with specified server, username and password.
            Dim client As Pop3client =  New Pop3client("pop3.yourdomain.com","username","password") 
            Try
            	'connect and login to the pop3 server
            	client.Connect(True)
            	'save the message
            	client.SaveMessage(1, "file.eml")
            Catch ex As Pop3Exception
            	System.Diagnostics.Debug.WriteLine(ex.ToString())
            End Try
            </code>
            </example>
            <note>
            Post Office Protocol Version 3 (POP3) is defined in RFC 1939, which is available at http://www.ietf.org.
            </note>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.#ctor">
            <summary>
            Initialize a new instance of the class <see cref="T:Aspose.Network.Pop3.Pop3Client">Pop3Client</see>.
            </summary>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.#ctor(System.String)">
            <summary>
            Initialize a new instance of the class <see cref="T:Aspose.Network.Pop3.Pop3Client">Pop3Client</see>.
            </summary>
            <param name="host">The host address of the Pop3 server</param>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.#ctor(System.String,System.Int32)">
            <summary>
            Initialize a new instance of the class <see cref="T:Aspose.Network.Pop3.Pop3Client">Pop3Client</see>.
            </summary>
            <param name="host">The host address of the Pop3 server</param>
            <param name="port">The port of the Pop3 server</param>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.#ctor(System.String,System.String,System.String)">
            <summary>
            Initialize a new instance of the class <see cref="T:Aspose.Network.Pop3.Pop3Client">Pop3Client</see>.
            </summary>
            <param name="host">The host address of the Pop3 server</param>
            <param name="username">The username used to log into the Pop3 server</param>
            <param name="password">The password used to log into the Pop3 server</param>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Initialize a new instance of the class <see cref="T:Aspose.Network.Pop3.Pop3Client">Pop3Client</see>.
            </summary>
            <param name="host">The host address of the Pop3 server</param>
            <param name="port">The port of the Pop3 server</param>
            <param name="username">The username used to log into the Pop3 server</param>
            <param name="password">The password used to log into the Pop3 server</param>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.Connect">
            <summary>
            Set up a connection between local client and the remote Pop3 server.
            </summary>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.Connect(System.Boolean)">
            <summary>
            Set up a connection between local client and the reomote Pop3 server.
            </summary>
            <param name="autoLogin">Determines whether to login the Pop3 server, after connected.</param>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.DeleteAllMessages">
            <summary>
            Marks deleted to all the messages in the mailbox 
            </summary>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.DeleteMessage(System.Int32)">
            <summary>
            Marks deleted to the message in the mailbox.
            </summary>
            <param name="sequenceNumber"></param>   
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.KeepAlive">
            <summary>
            Keeps the connection alive
            </summary>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.Disconnect">
            <summary>
            Diconnect to the Pop3 Server.
            </summary>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.GetMailboxSize">
            <summary>
            Gets the size of the mailbox.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.GetMailboxInfo">
            <summary>
            Gets the mailbox status info.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.FetchMessage(System.Int32)">
             <summary>
             Fetch mail messages from pop3 server
             </summary>
             <example>
             <p>The example demonstrates how to fetch E-Mail messages from Pop3 server.</p>
             [C#]
             <code>
            	Aspose.Network.Pop3.Pop3Client client = null;
            	client = new Aspose.Network.Pop3.Pop3Client();
            	client.Host = "www.your.pop3.host";
            	client.Username = "user";
            	client.Password = "password";
            
            	Aspose.Network.Mail.MailMessage msg = null;        
            	client.Connect(true);
            	int messageCount = client.GetMessageCount();
            	for (int i = 1; i &lt;= messageCount; i++)
            	{
            	    msg = client.FetchMessage(i);
            	    msg.Save("test.eml");
            	}
            	</code>
            	[VB.NET]
            	<code>
            	Dim client As Aspose.Network.Pop3.Pop3Client
            	client = New Aspose.Network.Pop3.Pop3Client()
            	client.Host = "gzmail.bamboonetworks.com"
            	client.Username = "andrew.chen"
            	client.Password = "12345678"
            
            	Dim msg As Aspose.Network.Mail.MailMessage
            	client.Connect(True)
            	Dim messageCount As Integer = client.GetMessageCount()
            	For i As Integer = 1 To messageCount
            	    msg = client.FetchMessage(messageCount)
            	    msg.Save("test.eml")
            	Next
             </code>
             </example>
             <param name="sequenceNumber">an identifier stands for this message</param>
             <returns>Aspose.Network.Mail.MailMessage</returns>        
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.SaveMessage(System.Int32,System.IO.Stream)">
            <summary>
            Save message to a stream
            </summary>
            <param name="sequenceNumber">an identifier stands for the message</param>
            <param name="output"></param>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.SaveMessage(System.Int32,System.String)">
             <summary>
             Save message to a file
             </summary>
             <param name="sequenceNumber">an identifier stands for the message</param>
             <param name="fileName">the file name you want to save</param>
             <example>
             <code>
             [C#]
                Aspose.Network.Pop3.Pop3Client client = null;
                client = new Aspose.Network.Pop3.Pop3Client();
                client.Host = "www.your.pop3.host";
                client.Username = "username";
                client.Password = "password";
                client.Connect(true);
            
                int messageCount = client.GetMessageCount();
            
                for (int i = 1; i &lt;= messageCount; i++)
                {
                    client.SaveMessage(i, "test" + i + ".eml");
                }
             
             [VB.NET]
                Dim client As Aspose.Network.Pop3.Pop3Client
                client = New Aspose.Network.Pop3.Pop3Client()
                client.Host = "www.your.pop3.host"
                client.Username = "username"
                client.Password = "password"
                client.Connect(True)
            
                Dim messageCount As Integer = client.GetMessageCount()
            
                For i As Integer = 1 To messageCount
                  client.SaveMessage(i, "test" + i + ".eml")
                Next
             
             </code>
             </example>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.GetMessageCount">
            <summary>
            Get total mail messges number, starting from 1
            </summary>
            <returns>mail messages number</returns>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.GetMessageHeaders(System.Int32)">
            <summary>
            Get a mail message's headers
            </summary>
            <param name="sequenceNumber">an identifier stands for this message</param>
            <returns>MimeHeaderCollection</returns>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.ListMessage(System.Int32)">
            <summary>
            Get infomation about a specific mail message
            </summary>
            <param name="sequenceNumber">an identifier stands for this mail message</param>
            <returns>A Pop3MessageInfo contains the information of the message.</returns>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.ListMessage(System.Int32,System.Boolean)">
            <summary>
            Get infomation about a specific mail message
            </summary>
            <param name="sequenceNumber">an identifier stands for this mail message</param>
            <param name="ignoreHeaders">whether to retrieve headers</param>
            <returns>A Pop3MessageInfo contains the information of the message.</returns>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.GetMessageSize(System.Int32)">
            <summary>
            Get the size of an mail message with specified sequence number, measured in bytes
            </summary>
            <param name="sequenceNumber">The sequence number of the mail message.</param>
            <returns>The size of the message.</returns>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.RetrieveMessageSize(System.Int32)">
            <summary>
            Get the size of an mail message with specified sequence number, measured in bytes
            </summary>
            <param name="sequenceNumber">The sequence number of the mail message.</param>
            <returns>The size of the message.</returns>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.ListMessages(System.Boolean)">
            <summary>
            Get infomation about all the mail messages
            </summary>
            <param name="ignoreHeaders">Whether to include headers</param>
            <returns>A collection of message.</returns>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.ListMessages">
            <summary>
            Get the infomation about all the mail messages, including headers.
            </summary>
            <returns>A collection of message.</returns>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.GetMessageUniqueId(System.Int32)">
            <summary>
            Get the unique id of the message with specified sequence number.
            </summary>
            <param name="sequenceNumber">The sequence number of the message.</param>
            <returns>A string contains the unique id.</returns>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.ListIdentifier(System.Int32)">
            <summary>
            Obsoleted. Use the GetMessageUniqueId method instead.
            </summary>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.ListIdentifiers">
            <summary>
            Obsoleted. Use ListMessages method instead.
            </summary>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.Login">
            <summary>
            Log in to Pop3 server
            </summary>  
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.Login(Aspose.Network.Pop3.Pop3Authentication)">
            <summary>
            Log in to Pop3 server with specified authentication method
            </summary>
            <param name="authenticationMethod"></param>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.CommitDeletes">
            <summary>
            Commit the deletes to the Pop3 server.
            </summary>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.CommitDeletes(System.Int32)">
            <summary>
            Commit the deletes to the Pop3 server.
            </summary>
            <param name="sleep">The amount of time to sleep.</param>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.CancelDeletes">
            <summary>
            Cancel the delete opertions.
            </summary>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.UndeleteMessages">
            <summary>
            Cancel the pending deletes.
            </summary>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.Logout">
            <summary>
            Obsoleted. Use Disconnect method instead.
            </summary>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.CheckMessages">
            <summary>
            Obsoleted. Use GetMessageCount method instead.
            </summary>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.Quit">
            <summary>
            Sends the QUIT command to the Pop3 server.
            </summary>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.Reset">
            <summary>
            Sends the RESET command to the Pop3 server.
            </summary>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.Top(System.Int32,System.Int32)">
            <summary>
            Sends the TOP command with specified sequence number and line count.
            </summary>
            <param name="sequenceNumber">The sequence number of the message.</param>
            <param name="lines">The line count.</param>
            <returns>A string contains the top lines.</returns>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Pop3Client, and optionally disposes of the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to releases only unmanaged resources.</param>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.BeginConnect(System.AsyncCallback,System.Object)">
            <summary>
            Begin async request connecting to pop3 server
            </summary>
            <param name="callback">the method you want to be called when connect complete</param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.BeginConnect(System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begin async request of connecting to pop3 server
            </summary>
            <param name="autoLogin">whether login when connected</param>
            <param name="callback">the method you want to be called when connect complete</param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.BeginDeleteMessage(System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begin async request of deleting a mail message
            </summary>
            <param name="sequenceNumber">an identifier stands for this mail message</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.BeginDisconnect(System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begin async request of disconnecting from pop3 server 
            </summary>
            <param name="rollbackChanges">whether cancel former operations</param>
            <param name="callback">the method you want to be called when disconnect complete</param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.BeginGetMailboxSize(System.AsyncCallback,System.Object)">
            <summary>
            Begin async request of getting mail box size
            </summary>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.BeginFetchMessage(System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begin async request of fetching mail messages from pop3 server
            </summary>
            <param name="sequenceNumber">an identifier stands for this mail message</param>
            <param name="callback">the method you want to be called when fetch complete</param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.BeginSaveMessage(System.Int32,System.IO.Stream,System.AsyncCallback,System.Object)">
            <summary>
            Begin async request of fetching mail message and save it to output stream
            </summary>
            <param name="sequenceNumber">an identifier stands for this mail</param>
            <param name="output">the output stream</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.BeginSaveMessage(System.Int32,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begin async request of fetching mail message and save it to file
            </summary>
            <param name="sequenceNumber">an identifier stands for this mail</param>
            <param name="fileName">the file name you want to save as</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.BeginGetMessageCount(System.AsyncCallback,System.Object)">
            <summary>
            Begin async request of getting mail message's number
            </summary>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.BeginListMessage(System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an async request of listing the mail message, paried with EndListMessage.
            </summary>
            <param name="sequenceNumber">The sequence number of the mail message.</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.BeginListMessages(System.AsyncCallback,System.Object)">
            <summary>
            Begins an async request of listing the mail message, paried with EndListMessages.
            </summary>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.BeginLogin(Aspose.Network.Pop3.Pop3Authentication,System.AsyncCallback,System.Object)">
            <summary>
            Begin async request of logging onto pop3 server
            </summary>
            <param name="method">pop3 authentication method</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.BeginLogin(System.AsyncCallback,System.Object)">
            <summary>
            Begin async request of logging onto pop3 server
            </summary>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.BeginCancelDeletes(System.AsyncCallback,System.Object)">
            <summary>
            Begin async request of sending the command of cancel delete
            </summary>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.EndConnect(System.IAsyncResult)">
            <summary>
            End async request of Connect, paired with BeginConnect
            </summary>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.EndDelete(System.IAsyncResult)">
            <summary>
            End async request of Delete, paired with BeginDelete
            </summary>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.EndDisconnect(System.IAsyncResult)">
            <summary>
            End async request of disconnect, paired with BeginDisconnect
            </summary>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.EndGetMailboxSize(System.IAsyncResult)">
            <summary>
            End async request of getting mailbox's size, paired with BeginGetMailboxSize
            </summary>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.EndFetchMessage(System.IAsyncResult)">
            <summary>
            End async request of fetching mail message, paired with BeginFetchMessage
            </summary>
            <returns>A <see cref="T:Aspose.Network.Mail.MailMessage">MailMessage</see> that fetched from the Pop3 server.</returns>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.EndSaveMessage(System.IAsyncResult)">
            <summary>
            End async request of saving mail message, paired with BeginSaveMessage
            </summary>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.EndGetMessageCount(System.IAsyncResult)">
            <summary>
            End async request of getting the number of mail message, paired with BeginGetMessageCount
            </summary>
            <returns>The number of E-Mail messages</returns>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.EndListMessage(System.IAsyncResult)">
            <summary>
            End async request of listing the mail message, paired with BeginListMessage.
            </summary>
            <returns>A Pop3MessageInfo contains the information of the message.</returns>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.EndListMessages(System.IAsyncResult)">
            <summary>
            End async request of listing a set of mail messages, paired with BeginListMessages.
            </summary>
            <returns>A Pop3MessageInfo Collection contains the information of the messages.</returns>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.EndLogin(System.IAsyncResult)">
            <summary>
            End async request of log in, paired with BeginLogin
            </summary>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3Client.EndCancelDeletes(System.IAsyncResult)">
            <summary>
            End async request of cancel deletes, paired with BeginCancelDeletes
            </summary>
        </member>
        <member name="P:Aspose.Network.Pop3.Pop3Client.Encoding">
            <summary>
            Gets or sets the encoding to getting strings from Pop3 server.
            </summary>
        </member>
        <member name="P:Aspose.Network.Pop3.Pop3Client.State">
            <summary>
            Gets the connection state.
            </summary>
        </member>
        <member name="P:Aspose.Network.Pop3.Pop3Client.Username">
            <summary>
            Gets or sets the username.
            </summary>
        </member>
        <member name="P:Aspose.Network.Pop3.Pop3Client.Password">
            <summary>
            Gets or sets the password.
            </summary>
        </member>
        <member name="P:Aspose.Network.Pop3.Pop3Client.AuthenticationMethod">
            <summary>
            Gets or sets the authencation method.
            </summary>
        </member>
        <member name="P:Aspose.Network.Pop3.Pop3Client.SecurityMode">
            <summary>
            Specifies which security mode will be used when Secure Sockets Layer (SSL) to encrypt the connection.
            </summary>
        </member>
        <member name="P:Aspose.Network.Pop3.Pop3Client.EnableSsl">
            <summary>
            Specify whether the PopClient uses Secure Sockets Layer (SSL) to encrypt the connection.
            </summary>
            <example>
            <p>The following exmaple demonstrates how to use Pop3Client class to fetch e-mail messages from gmail.</p>
            [C#]
            <code>
            //create Pop3client with specified server, username and password.
            Pop3client client = new Pop3client("pop.gmail.com", 995, "username@gmail.com", "password");
               //enable ssl
               client.EnableSsl = true;
               client.SecurityMode = Pop3SslSecurityMode.Implicit;
            try
            {
            	//connect and login to the pop3 server
            	client.Connect(true);
            	//get message count
            	int count = client.GetMessageCount();
                   //save message
                   client.Save(1, "file.eml");
            }
            catch (Pop3Exception ex)
            {
            	System.Diagnostics.Debug.WriteLine(ex.ToString());
            }
            </code>
            [VB.NET]
            <code>
            'create Pop3client with specified server, username and password.
            Pop3client client = new Pop3client("pop.gmail.com", 995, "username@gmail.com", "password");
               client.EnableSsl = true
               client.SecurityMode = Pop3SslSecurityMode.Implicit
            Try
            	'connect and login to the pop3 server
            	client.Connect(True)
            	'save the message
            	client.SaveMessage(1, "file.eml")
            Catch ex As Pop3Exception
            	System.Diagnostics.Debug.WriteLine(ex.ToString())
            End Try
            </code>
            </example>
        </member>
        <member name="T:Aspose.Network.Outlook.ContactMailMessageInterpretor">
            <summary>
            Represents a Contact message type interpretor.
            </summary>
        </member>
        <member name="M:Aspose.Network.Outlook.ContactMailMessageInterpretor.#ctor">
            <summary>
            Initializes a new instance of the ContactMailMessageInterpretor class.
            </summary>
        </member>
        <member name="M:Aspose.Network.Outlook.ContactMailMessageInterpretor.Clone">
            <summary>
            Creates a copy of the current instance.
            </summary>
            <returns>A ContactMailMessageInterpretor copy.</returns>
        </member>
        <member name="M:Aspose.Network.Outlook.ContactMailMessageInterpretor.LoadMessageBodyHtml(Aspose.Network.Mail.MailMessage,Aspose.Network.Outlook.MapiMessage)">
            <summary>
            Creates the HtmlBody property of the MailMessage according to the specified MapiMessage instance.
            </summary>
            <param name="mailMessage">The target MailMessage.</param>
            <param name="mapiMessage">The source MapiMessage.</param>
        </member>
        <member name="M:Aspose.Network.Outlook.ContactMailMessageInterpretor.Save(Aspose.Network.Outlook.MapiMessage,System.IO.Stream,Aspose.Network.Mail.MessageFormat)">
            <summary>
            Saves the specified MapiMessage to a Stream.
            </summary>
            <param name="mapiMessage">The source MapiMessage instance.</param>
            <param name="stream">The target stream</param>
            <param name="messageFormat">The message format.</param>
        </member>
        <member name="P:Aspose.Network.Outlook.ContactMailMessageInterpretor.FormatTemplates">
            <summary>
            Gets the format templates.
            </summary>
        </member>
        <member name="T:Aspose.Network.Security.Cryptography.X509Certificates.X500DistinguishedName">
            <summary>
            Represents the distinguished name of an X509 certificate. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Aspose.Network.Security.Cryptography.X509Certificates.X500DistinguishedName.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the FileAppender class.
            </summary>
            <param name="encodedDistinguishedName">A byte array that contains distinguished name information.</param>
        </member>
        <member name="M:Aspose.Network.Security.Cryptography.X509Certificates.X500DistinguishedName.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="distinguishedName">A string that represents the distinguished name.</param>
        </member>
        <member name="M:Aspose.Network.Security.Cryptography.X509Certificates.X500DistinguishedName.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
            <returns>String that contains the contents of this X500DistinguishName.</returns>
        </member>
        <member name="T:Aspose.Network.Icmp.MessageTypes">
            <summary>
            Represents the type of message.
            </summary>
        </member>
        <member name="F:Aspose.Network.Icmp.MessageTypes.DestinationUnreachable">
            <summary>
            Destination Unreachable message.
            </summary>
        </member>
        <member name="F:Aspose.Network.Icmp.MessageTypes.Echo">
            <summary>
            Echo message.
            </summary>
        </member>
        <member name="F:Aspose.Network.Icmp.MessageTypes.EchoReply">
            <summary>
            Echo Replay message.
            </summary>
        </member>
        <member name="F:Aspose.Network.Icmp.MessageTypes.InformationReply">
            <summary>
            Information Reply message.
            </summary>
        </member>
        <member name="F:Aspose.Network.Icmp.MessageTypes.InformationRequest">
            <summary>
            Inforamtion Request message.
            </summary>
        </member>
        <member name="F:Aspose.Network.Icmp.MessageTypes.ParameterProblem">
            <summary>
            Parameter Problem message.
            </summary>
        </member>
        <member name="F:Aspose.Network.Icmp.MessageTypes.Redirect">
            <summary>
            Redirect message.
            </summary>
        </member>
        <member name="F:Aspose.Network.Icmp.MessageTypes.SourceQuench">
            <summary>
            Source Quench message.
            </summary>
        </member>
        <member name="F:Aspose.Network.Icmp.MessageTypes.TimeExceeded">
            <summary>
            Time Exceeded message.
            </summary>
        </member>
        <member name="F:Aspose.Network.Icmp.MessageTypes.Timestamp">
            <summary>
            Timestamp message.
            </summary>
        </member>
        <member name="F:Aspose.Network.Icmp.MessageTypes.TimestampReply">
            <summary>
            Timestamp Reply message.
            </summary>
        </member>
        <member name="T:Aspose.Network.Icmp.DestinationUnreachableReason">
            <summary>
            Represents the reason of destination unreachable.
            </summary>
        </member>
        <member name="F:Aspose.Network.Icmp.DestinationUnreachableReason.NetworkUnreachable">
            <summary>
            NetworkUnreachable.
            </summary>
        </member>
        <member name="F:Aspose.Network.Icmp.DestinationUnreachableReason.HostUnreachable">
            <summary>
            HostUnreachable.
            </summary>
        </member>
        <member name="F:Aspose.Network.Icmp.DestinationUnreachableReason.ProtocolUnreachable">
            <summary>
            ProtocolUnreachable.
            </summary>
        </member>
        <member name="F:Aspose.Network.Icmp.DestinationUnreachableReason.PortUnreachable">
            <summary>
            PortUnreachable.
            </summary>
        </member>
        <member name="F:Aspose.Network.Icmp.DestinationUnreachableReason.FragmentationNeededAndDFFlagSet">
            <summary>
            FragmentationNeededAndDFFlagSet.
            </summary>
        </member>
        <member name="F:Aspose.Network.Icmp.DestinationUnreachableReason.SourceRouteFailed">
            <summary>
            SourceRouteFailed.
            </summary>
        </member>
        <member name="F:Aspose.Network.Icmp.DestinationUnreachableReason.DestinationNetworkUnknown">
            <summary>
            DestinationNetworkUnknown.
            </summary>
        </member>
        <member name="F:Aspose.Network.Icmp.DestinationUnreachableReason.DestinationHostUnknow">
            <summary>
            DestinationHostUnknow.
            </summary>
        </member>
        <member name="F:Aspose.Network.Icmp.DestinationUnreachableReason.SourceHostIsolated">
            <summary>
            SourceHostIsolated.
            </summary>
        </member>
        <member name="F:Aspose.Network.Icmp.DestinationUnreachableReason.CommunicationWithDestinationNetworkProhibited">
            <summary>
            CommunicationWithDestinationNetworkProhibited.
            </summary>
        </member>
        <member name="F:Aspose.Network.Icmp.DestinationUnreachableReason.CommunicationWithDestinationHostProhibited">
            <summary>
            CommunicationWithDestinationHostProhibited.
            </summary>
        </member>
        <member name="F:Aspose.Network.Icmp.DestinationUnreachableReason.NetworkUnreachableForTypeOfService">
            <summary>
            NetworkUnreachableForTypeOfService.
            </summary>
        </member>
        <member name="F:Aspose.Network.Icmp.DestinationUnreachableReason.HostUnreachableForTypeOfService">
            <summary>
            HostUnreachableForTypeOfService.
            </summary>
        </member>
        <member name="T:Aspose.Network.Ftp.FtpException">
            <summary>
            Represents the exception thrown in Ftp
            </summary>
        </member>
        <member name="T:Aspose.Network.Outlook.MapiPropertyType">
            <summary>
            Represents the data type of MapiProperty data.
            </summary>
        </member>
        <member name="F:Aspose.Network.Outlook.MapiPropertyType.PT_SHORT">
            <summary>
            Signed 16-bit integer. This property type is the same as PT_SHORT and the OLE type VT_I2.
            </summary>
        </member>
        <member name="F:Aspose.Network.Outlook.MapiPropertyType.PT_LONG">
            <summary>
            Signed or unsigned 32-bit integer. This property type is the same as PT_I4 and the OLE type VT_I4.
            </summary>
        </member>
        <member name="F:Aspose.Network.Outlook.MapiPropertyType.PT_ERROR">
            <summary>
            SCODE value; 32-bit unsigned integer. This property type is the same as the OLE type VT_ERROR.
            </summary>
        </member>
        <member name="F:Aspose.Network.Outlook.MapiPropertyType.PT_BOOLEAN">
            <summary>
            16-bit Boolean value where zero equals FALSE and non-zero equals TRUE. This property type is the same as the OLE type VT_BOOL.
            </summary>
        </member>
        <member name="F:Aspose.Network.Outlook.MapiPropertyType.PT_OBJECT">
            <summary>
            Pointer to an object that implements the IUnknown interface. This property type is similar to several OLE types such as VT_UNKNOWN. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Outlook.MapiPropertyType.PT_LONGLONG">
            <summary>
            Signed or unsigned 64-bit integer. This property type is the same as PT_I8 and the OLE type VT_I8.
            </summary>
        </member>
        <member name="F:Aspose.Network.Outlook.MapiPropertyType.PT_STRING8">
            <summary>
            Null-terminated 8-bit character string. This property type is the same as the OLE type VT_LPSTR.
            </summary>
        </member>
        <member name="F:Aspose.Network.Outlook.MapiPropertyType.PT_UNICODE">
            <summary>
            PT_UNICODE
            </summary>
        </member>
        <member name="F:Aspose.Network.Outlook.MapiPropertyType.PT_SYSTIME">
            <summary>
            64-bit integer data and time value in the form of a FILETIME structure. This property type is the same as the OLE type VT_FILETIME.
            </summary>
        </member>
        <member name="F:Aspose.Network.Outlook.MapiPropertyType.PT_CLSID">
            <summary>
            CLSID structure value. This property type is the same as the OLE type VT_CLSID.
            </summary>
        </member>
        <member name="F:Aspose.Network.Outlook.MapiPropertyType.PT_SRESTRICTION">
            <summary>
            PT_SRESTRICTION
            </summary>
        </member>
        <member name="F:Aspose.Network.Outlook.MapiPropertyType.PT_ACTIONS">
            <summary>
            PT_ACTIONS
            </summary>
        </member>
        <member name="F:Aspose.Network.Outlook.MapiPropertyType.PT_BINARY">
            <summary>
            SBinary structure value, a counted byte array.
            </summary>
        </member>
        <member name="F:Aspose.Network.Outlook.MapiPropertyType.PT_MV_xxx">
            <summary>
            PT_MV_xxx
            </summary>
        </member>
        <member name="T:Aspose.Network.Outlook.MapiProperty">
            <summary>
            Represents the mapi property.
            </summary>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiProperty.#ctor(System.Int64,System.Int64,System.Byte[])">
            <summary>
            Initializes a new instance of the MapiProperty class.
            </summary>
            <param name="tag">The tag key of the property.</param>
            <param name="signed">Indicates the data is signed or not.</param>
            <param name="data">The binary data of the property.</param>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiProperty.#ctor(System.Int64,System.Byte[])">
            <summary>
            Initializes a new instance of the MapiProperty class.
            </summary>
            <param name="tag">The tag key of the property.</param>
            <param name="data">The binary data of the property.</param>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiProperty.GetLong">
            <summary>
            Gets the first 8 bytes of the binary data as long.
            </summary>
            <returns>The long value.</returns>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiProperty.GetInt32">
            <summary>
            Gets the first 4 bytes of the binary data as int32.
            </summary>
            <returns>The int32 value.</returns>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiProperty.GetShort">
            <summary>
            Gets the first 2 bytes of the binary data as short.
            </summary>
            <returns>The short value.</returns>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiProperty.GetBoolean">
            <summary>
            Gets the first bytes of the binary data as boolean.
            </summary>
            <returns>The boolean value.</returns>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiProperty.GetDateTime">
            <summary>
            Gets the first bytes of the binary data as datetime.
            </summary>
            <returns>The datetime value.</returns>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiProperty.GetString(System.Int32)">
            <summary>
            Gets the binary data as string using the specified code page.
            </summary>
            <param name="codepage">The code page.</param>
            <returns>A string contains the binary data.</returns>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiProperty.GetString">
            <summary>
            Gets the binary data as string.
            </summary>
            <returns>A string contains the binary data.</returns>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiProperty.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiProperty.Identifier">
            <summary>
            Gets the indifier.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiProperty.Tag">
            <summary>
            Gets the tag.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiProperty.DataType">
            <summary>
            Gets the data type.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiProperty.Data">
            <summary>
            Gets the binary data.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiProperty.IsSigned">
            <summary>
            Indicates whether the binary data is signed.
            </summary>
        </member>
        <member name="T:Aspose.Network.Outlook.MapiRecipientCollection">
            <summary>
            Represents a collection of MapiRecipient objects. 
            </summary>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiRecipientCollection.#ctor">
            <summary>
            Initializes a new instance of the MapiRecipientCollection class.
            </summary>
        </member>
        <member name="T:Aspose.Network.Dns.TXTResourceRecord">
            <summary>
            Represents a TXT DNS resource record
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.TXTResourceRecord.#ctor">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.TXTResourceRecord">TXTResourceRecord</see>.
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.TXTResourceRecord.#ctor(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.TXTResourceRecord">TXTResourceRecord</see>.
            </summary>
            <param name="buffer">The arry of unsigned bytes from which to create.</param>
            <param name="index">The index into buffer at which this resource record begins</param>
            <param name="count">The length of the bytes to create this resource record</param>
        </member>
        <member name="P:Aspose.Network.Dns.TXTResourceRecord.Text">
            <summary>
            Gets or sets the text
            </summary>
        </member>
        <member name="T:Aspose.Network.Dns.MXResourceRecord">
            <summary>
            Represents a MX DNS resource record
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.MXResourceRecord.#ctor">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.MXResourceRecord">MXResourceRecord</see>.
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.MXResourceRecord.#ctor(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.MXResourceRecord">MXResourceRecord</see>.
            </summary>
            <param name="buffer">The arry of unsigned bytes from which to create.</param>
            <param name="index">The index into buffer at which this resource record begins</param>
            <param name="count">The length of the bytes to create this resource record</param>
        </member>
        <member name="P:Aspose.Network.Dns.MXResourceRecord.ExchangeName">
            <summary>
            Gets or sets the exchange name
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.MXResourceRecord.Preference">
            <summary>
            Gets or sets the preference
            </summary>
        </member>
        <member name="T:Aspose.Network.Dns.LOCResourceRecord">
            <summary>
            Represents a LOC DNS resource record
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.LOCResourceRecord.#ctor">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.LOCResourceRecord">LOCResourceRecord</see>.
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.LOCResourceRecord.#ctor(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.LOCResourceRecord">LOCResourceRecord</see>.
            </summary>
            <param name="buffer">The arry of unsigned bytes from which to create.</param>
            <param name="index">The index into buffer at which this resource record begins</param>
            <param name="count">The length of the bytes to create this resource record</param>
        </member>
        <member name="P:Aspose.Network.Dns.LOCResourceRecord.Altitude">
            <summary>
            Gets or sets the altitude
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.LOCResourceRecord.HorizontalPrecision">
            <summary>
            Gets or sets the horizontal precision
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.LOCResourceRecord.Latitude">
            <summary>
            Gets or sets the latitude
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.LOCResourceRecord.Longitude">
            <summary>
            Gets or sets the longitude
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.LOCResourceRecord.Size">
            <summary>
            Gets or sets the  size
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.LOCResourceRecord.Version">
            <summary>
            Gets or sets the version
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.LOCResourceRecord.VerticalPrecision">
            <summary>
            Gets or sets the vertical precision
            </summary>
        </member>
        <member name="T:Aspose.Network.Pop3.Pop3MessageInfoCollection">
            <summary>
            Represents the information of a mail message from Pop3 server.
            </summary>
        </member>
        <member name="M:Aspose.Network.Pop3.Pop3MessageInfoCollection.#ctor">
            <summary>
            Initializes a new instance of the Pop3MessageInfoCollection class.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.Calendaring.SystemTime.ToDateTime">
            <summary>
            Converts the SystemTime structure to a System.DateTime structure
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.Network.Mail.Calendaring.SystemTime.ToDateTime(Aspose.Network.Mail.Calendaring.SystemTime)">
            <summary>
            Converts a SystemTime structure to a System.DateTime structure
            </summary>
            <param name="time">The SystemTime structure to be converted</param>
            <returns>A System.DateTime structure that was created based on
            the value of the SystemTime structure.</returns>
        </member>
        <member name="M:Aspose.Network.Mail.Calendaring.SystemTime.FromDateTime(System.DateTime)">
            <summary>
            Converts a System.DateTime structure to a SystemTime structure
            </summary>
            <param name="time">System.DateTime structure to be converted</param>
            <returns>A SystemTime structure that was created based on
            the value of the System.DateTime structure.</returns>
        </member>
        <member name="P:Aspose.Network.Mail.Calendaring.SystemTime.UtcNow">
            <summary>
            Get the current time in Utc Format
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.Calendaring.SystemTime.Now">
            <summary>
            Get the current time in local format
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.Calendaring.Win32TimeZoneInfo.GetSystemTimeZones">
            <summary>
            Retrieves an array of TimeZoneInfo structures by pulling values from the 
            Registry.
            </summary>
            <returns>Array of TimeZoneInfo structures</returns>
        </member>
        <member name="M:Aspose.Network.Mail.Calendaring.Win32TimeZoneInfo.Convert(Aspose.Network.Mail.Calendaring.Win32TimeZoneInfo,Aspose.Network.Mail.Calendaring.Win32TimeZoneInfo,System.DateTime)">
            <summary>
            Converts the local time of the source time-zone to the local time of the
            destination time-zone.
            </summary>
            <param name="source">The source time-zone</param>
            <param name="destination">The destination time-zone</param>
            <param name="sourceLocalTime">The local time of the source time-zone that is
            to be converted to the local time in the destination time-zone</param>
            <returns>The local time in the destination time-zone.</returns>
        </member>
        <member name="M:Aspose.Network.Mail.Calendaring.Win32TimeZoneInfo.ToLocalTime(Aspose.Network.Mail.Calendaring.Win32TimeZoneInfo,System.DateTime)">
            <summary>
            Converts the UtcTime to the local time of the destination time-zone.
            </summary>
            <param name="destination">The destination time-zone</param>
            <param name="utcTime">Utc time that is to be converted to the local time of
            the destination time-zone.</param>
            <returns>DateTime that represents the local time in the destination time-zone</returns>
        </member>
        <member name="M:Aspose.Network.Mail.Calendaring.Win32TimeZoneInfo.ToUniversalTime(Aspose.Network.Mail.Calendaring.Win32TimeZoneInfo,System.DateTime)">
            <summary>
            Converts a local time of the source time-zone to a Utc time
            </summary>
            <param name="source">The source time-zone</param>
            <param name="sourceLocalTime">The local time in the source time-zone</param>
            <returns>The Utc time that is equivalent to the local time in the source time-zone.</returns>
        </member>
        <member name="M:Aspose.Network.Mail.Calendaring.Win32TimeZoneInfo.getChangeDate(System.Int32,Aspose.Network.Mail.Calendaring.SystemTime)">
            <summary>
            Calculates the date that a time change is going to occur given the year and
            the SystemTime structure that represents either the StandardDate or DaylightDate
            values in the TimeZoneInfo structure
            </summary>
            <param name="year">The year to calculate the change for</param>
            <param name="changeTime">The SystemTime structure that contains information
            for calculating the date a time change is to occur.</param>
            <returns>A DateTime object the represents when a time change will occur</returns>
            <remarks>Returns DateTime.MinValue when no time change is to occur</remarks>
        </member>
        <member name="M:Aspose.Network.Mail.Calendaring.Win32TimeZoneInfo.Convert(Aspose.Network.Mail.Calendaring.Win32TimeZoneInfo,System.DateTime)">
            <summary>
            Converts the local time of the current time-zone to the local time of the 
            destination time-zone.
            </summary>
            <param name="destination">The destination time-zone</param>
            <param name="localTime">The local time in the current time zone that is 
            to be converted to the local time in the destination time-zone</param>
            <returns>The local time in the destination time-zone.</returns>
        </member>
        <member name="M:Aspose.Network.Mail.Calendaring.Win32TimeZoneInfo.ToUniversalTime(System.DateTime)">
            <summary>
            Converts a local time of the current time-zone to a Utc time
            </summary>
            <param name="sourceLocalTime">The local time in the current time-zone</param>
            <returns>The Utc time that is equivalent to the local time in the current time-zone.</returns>
        </member>
        <member name="M:Aspose.Network.Mail.Calendaring.Win32TimeZoneInfo.ToLocalTime(System.DateTime)">
            <summary>
            Converts the UtcTime to the local time of the current time-zone.
            </summary>
            <param name="utcTime">Utc time that is to be converted to the local time of
            the current time-zone.</param>
            <returns>DateTime that represents the local time in the current time-zone</returns>
        </member>
        <member name="M:Aspose.Network.Mail.Calendaring.Win32TimeZoneInfo.GetTimeZoneName(System.DateTime)">
            <summary>
            The name of the current TimeZoneInfo structure (Daylight or Standard) based on the date/time.
            </summary>
            <param name="time">The time to evaluate determine the correct time zone name from</param>
            <returns>Either the standard or daylight name of the time zone</returns>
        </member>
        <member name="M:Aspose.Network.Mail.Calendaring.Win32TimeZoneInfo.IsDaylightSavingTime(System.DateTime)">
            <summary>
            Returns a value indicating whether the specified date and time is within a 
            daylight saving time period.
            </summary>
            <param name="time">DateTime to evaluate</param>
            <returns>True if the time value occurs during the daylight saving time
            period for the given year, otherwise false.</returns>
            <remarks>The summary description is lifted right from the MSDN docs for the
            same method on the TimeZone class.</remarks>
        </member>
        <member name="M:Aspose.Network.Mail.Calendaring.Win32TimeZoneInfo.IsDaylightSavingTime(System.DateTime,System.Globalization.DaylightTime)">
            <summary>
            Returns a value indicating whether the specified date and time is within a 
            daylight saving time period.
            </summary>
            <param name="time">DateTime to evaluate</param>
            <param name="daylightTime">The DaylightTime object that represents a daylight time
            period.</param>
            <returns>True if the time value occurs during the daylight saving time
            period for the given year, otherwise false.</returns>
            <remarks>The summary description is lifted right from the MSDN docs for the
            same method on the TimeZone class.</remarks>
        </member>
        <member name="M:Aspose.Network.Mail.Calendaring.Win32TimeZoneInfo.GetStandardDateTime(System.Int32)">
            <summary>
            The date of the standard time change
            </summary>
            <param name="year">The year to calculate the standard change for</param>
            <returns>DateTime that represents when the standard time change occurs</returns>
            <remarks>Returns DateTime.MinValue if there is no time change</remarks>
        </member>
        <member name="M:Aspose.Network.Mail.Calendaring.Win32TimeZoneInfo.GetDaylightDateTime(System.Int32)">
            <summary>
            The date of the daylight time change.
            </summary>
            <param name="year">The year to calculate the daylight change for</param>
            <returns>DateTime that represents when the daylight time change occurs</returns>
            <remarks>Returns DateTime.MinValue if there is no time change</remarks>
        </member>
        <member name="M:Aspose.Network.Mail.Calendaring.Win32TimeZoneInfo.GetDaylightChanges(System.Int32)">
            <summary>
            The daylight time changes for the current time-zone
            </summary>
            <param name="year">Year to retrieve the daylight changes for</param>
            <returns>A DaylightTime object that represents the daylight time for a given year</returns>
            <remarks>Returns null if there is no time change</remarks>
        </member>
        <member name="P:Aspose.Network.Mail.Calendaring.Win32TimeZoneInfo.CurrentTimeZone">
            <summary>
            Retrieves the TimeZoneInfo structure based on the current system TimeZone.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.Calendaring.Win32TimeZoneInfo.ObservesDaylightTime">
            <summary>
            Wether daylight saving time is observed in the time-zone
            </summary>
        </member>
        <member name="T:Aspose.Network.Imap.ImapException">
            <summary>
            The exception that is thrown when an error occurs while using Imap component.		
            </summary>
        </member>
        <member name="M:Aspose.Network.Imap.ImapException.#ctor">
            <summary>
            Initializes a new instance of the ImapException class. 
            </summary>
        </member>
        <member name="M:Aspose.Network.Imap.ImapException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ImapException class with the specified error message. 
            </summary>
            <param name="message">The specified error message. </param>
        </member>
        <member name="M:Aspose.Network.Imap.ImapException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the ImapException class with the specified error message and a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">The specified error message</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="T:Aspose.Network.Security.Cryptography.X509Certificates.X509Store">
            <summary>
            Represents an X.509 store, which is a physical store where certificates are persisted and managed. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Aspose.Network.Security.Cryptography.X509Certificates.X509Store.#ctor(Aspose.Network.Security.Cryptography.X509Certificates.StoreName)">
            <summary>
            Initializes a new instance of the X509Store class using the specified StoreName value.
            </summary>
            <param name="storeName">One of the StoreName values.</param>
        </member>
        <member name="M:Aspose.Network.Security.Cryptography.X509Certificates.X509Store.#ctor(System.String)">
            <summary>
            Initializes a new instance of the X509Store class using the specified store name.
            </summary>
            <param name="storeName">A string value representing the store name. See StoreName for more information.</param>
        </member>
        <member name="M:Aspose.Network.Security.Cryptography.X509Certificates.X509Store.#ctor(Aspose.Network.Security.Cryptography.X509Certificates.StoreName,Aspose.Network.Security.Cryptography.X509Certificates.StoreLocation)">
            <summary>
            Initializes a new instance of the X509Store class using the specified StoreName and StoreLocation values.
            </summary>
            <param name="storeName">One of the StoreLocation values. </param>
            <param name="location">One of the StoreName values.</param>
        </member>
        <member name="M:Aspose.Network.Security.Cryptography.X509Certificates.X509Store.#ctor(System.String,Aspose.Network.Security.Cryptography.X509Certificates.StoreLocation)">
            <summary>
            Initializes a new instance of the X509Store class using a string representing a value from the StoreName enumeration and a value from the StoreLocation enumeration.
            </summary>
            <param name="storeName">One of the StoreLocation values. </param>
            <param name="location">A string representing a value from the StoreName enumeration.</param>
        </member>
        <member name="M:Aspose.Network.Security.Cryptography.X509Certificates.X509Store.Add(Aspose.Network.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Adds a certificate to an X.509 certificate store.
            </summary>
            <param name="certificate">An X509Certificate2 object.</param>
        </member>
        <member name="M:Aspose.Network.Security.Cryptography.X509Certificates.X509Store.Dispose">
            <summary>
            Releases the unmanaged resources used by the X509Store.
            </summary>
        </member>
        <member name="M:Aspose.Network.Security.Cryptography.X509Certificates.X509Store.Finalize">
            <summary>
            Frees resources used by the X509Store class.
            </summary>
        </member>
        <member name="M:Aspose.Network.Security.Cryptography.X509Certificates.X509Store.Remove(Aspose.Network.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Removes a certificate from an X.509 certificate store.
            </summary>
            <param name="certificate">The certificate to remove.</param>
        </member>
        <member name="P:Aspose.Network.Security.Cryptography.X509Certificates.X509Store.StoreHandle">
            <summary>
            Gets an IntPtr handle to an HCERTSTORE store. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Security.Cryptography.X509Certificates.X509Store.Location">
            <summary>
            Gets the location of the X.509 certificate store.
            </summary>
        </member>
        <member name="P:Aspose.Network.Security.Cryptography.X509Certificates.X509Store.Name">
            <summary>
            Gets the name of the X.509 certificate store.
            </summary>
        </member>
        <member name="T:Aspose.Network.Verify.ValidationResult">
            <summary>
            Present the result of the email validating process.
            </summary>
        </member>
        <member name="M:Aspose.Network.Verify.ValidationResult.#ctor">
            <summary>
            Create an instance of the ValidationResult class
            </summary>
        </member>
        <member name="M:Aspose.Network.Verify.ValidationResult.#ctor(Aspose.Network.Verify.ValidationResponseCode)">
            <summary>
            Create an instance of the ValidationResult class, with the specified <seealso cref="T:Aspose.Network.Verify.ValidationResponseCode">ValidationResponseCode</seealso>
            </summary>
            <param name="responseCode">The response code of the validating process.</param>
        </member>
        <member name="M:Aspose.Network.Verify.ValidationResult.#ctor(Aspose.Network.Verify.ValidationResponseCode,System.Exception)">
            <summary>
            Create an instance of the ValidationResult class, with the specified <seealso cref="T:Aspose.Network.Verify.ValidationResponseCode">ValidationResponseCode</seealso>, and the last exception.
            </summary>
            <param name="responseCode">The response code of the validating process.</param>
            <param name="lastException">The last exception met in the validating process.</param>
        </member>
        <member name="P:Aspose.Network.Verify.ValidationResult.ReturnCode">
            <summary>
            Gets or ses the response code of the validating process.
            </summary>
        </member>
        <member name="P:Aspose.Network.Verify.ValidationResult.Message">
            <summary>
            Gets the detail message about the result.
            </summary>
        </member>
        <member name="P:Aspose.Network.Verify.ValidationResult.LastException">
            <summary>
            The last error met in the validating process.
            </summary>
        </member>
        <member name="T:Aspose.Network.Verify.ValidationResponseCode">
            <summary>
            Represents the response status of the mail validating process.
            </summary>
        </member>
        <member name="F:Aspose.Network.Verify.ValidationResponseCode.ValidationSuccess">
            <summary>
            The mail address validating is successful.
            </summary>
        </member>
        <member name="F:Aspose.Network.Verify.ValidationResponseCode.SyntaxValidationFailed">
            <summary>
            The mail address validating process failed at the syntax validation.
            </summary>
        </member>
        <member name="F:Aspose.Network.Verify.ValidationResponseCode.DomainValidationFailed">
            <summary>
            The mail address validating process failed at the domain validation.
            </summary>
        </member>
        <member name="F:Aspose.Network.Verify.ValidationResponseCode.MailServerValidationError">
            <summary>
            The mail address validating process failed at the mail server validation.
            </summary>
        </member>
        <member name="T:Aspose.Network.Mail.SmtpClientBulkSendAgent">
            <summary>
            Represents a multi-threading agent for E-mail delivery using SmtpClient.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpClientBulkSendAgent.#ctor(Aspose.Network.Mail.SmtpClient)">
            <summary>
            Initialize an instance of SmtpclientBulkSendAgent class with specified SmtpClient.
            </summary>
            <param name="client">The SmtpClient settings used to send E-mail messages.</param>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpClientBulkSendAgent.#ctor(Aspose.Network.Mail.SmtpClient,System.Int32)">
            <summary>
            Initialize an instance of SmtpclientBulkSendAgent class with specified SmtpClient.
            </summary>
            <param name="client">The SmtpClient settings used to send E-mail messages.</param>
            <param name="concurrent">The concurrent threads number.</param>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpClientBulkSendAgent.WaitForIdle">
            <summary>
            Wait for the thread pool to be idle
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpClientBulkSendAgent.WaitForIdle(System.Int32)">
            <summary>
            Wait for the thread pool to be idle
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpClientBulkSendAgent.AddMessages(Aspose.Network.Mail.MailMessageCollection)">
            <summary>
            Add messages to Message Pool.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpClientBulkSendAgent.AddMessage(Aspose.Network.Mail.MailMessage)">
            <summary>
            Add messages to Message Pool.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpClientBulkSendAgent.Start">
            <summary>
            Start the Bulk send.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpClientBulkSendAgent.Stop">
            <summary>
            Stop the bulk sending.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpClientBulkSendAgent.ClearMessages">
            <summary>
            Clear the Email messages in the Message Pool.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpClientBulkSendAgent.DoSendMailMessage(System.Object)">
            <summary>
            Do email message sending in each thread.
            </summary>
            <param name="state">The state object.</param>
            <returns>The state object.</returns>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpClientBulkSendAgent.Dispose">
            <summary>
            Releases the unmanaged resources used by the SmtpClientBulkSendAgent.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpClientBulkSendAgent.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the SmtpClientBulkSendAgent, and optionally disposes of the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to releases only unmanaged resources.</param>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpClientBulkSendAgent.Finalize">
            <summary>
            Frees resources used by the SmtpClientBulkSendAgent class.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.SmtpClientBulkSendAgent.FailedDeliveryMessages">
            <summary>
            Gets the failed delivery Email messages.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.SmtpClientBulkSendAgent.MessagePool">
            <summary>
            Gets the message pool.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.SmtpClientBulkSendAgent.ActiveThreads">
            <summary>
            Gets the number of active threads.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.SmtpClientBulkSendAgent.TotolSent">
            <summary>
            Gets the number of total sent Email messages.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.SmtpClientBulkSendAgent.TotalFailed">
            <summary>
            Gets the number of total failed Email messages.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.SmtpClientBulkSendAgent.TotalQueued">
            <summary>
            Gets the number of total queued Email messages.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.SmtpClientBulkSendAgent.TotalProcessed">
            <summary>
            Gets the number of total processed Email messages.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.SmtpClientBulkSendAgent.Client">
            <summary>
            Gets or sets the smtpclient.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.SmtpClientBulkSendAgent.InnerExceptions">
            <summary>
            Gets the exception list.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.SmtpClientBulkSendAgent.DeliveryInterval">
            <summary>
            Gets the interval of mail message delivery.
            </summary>
        </member>
        <member name="E:Aspose.Network.Mail.SmtpClientBulkSendAgent.LastMessageSending">
            <summary>
            Occurs if the the last message in MessagePool send is begining.
            </summary>
        </member>
        <member name="T:Aspose.Network.RsaSignatureVerifier">
            <summary>
            Performs RSA digital signature verification.
            </summary>
        </member>
        <member name="T:Aspose.Network.Pkcs1">
            <summary>
            Provides different Public-Key Cryptography Standards methods.
            </summary>
        </member>
        <member name="T:Aspose.Network.Rsa">
            <summary>
            Performs RSA encryption.
            </summary>
        </member>
        <member name="T:Aspose.Network.SmartComparator1">
            <summary>
            One of the comparators used for complication of byte buffers comparison.
            </summary>
        </member>
        <member name="M:Aspose.Network.SmartComparator1.AddBuffer1(System.IO.MemoryStream,System.Byte[],System.Int32)">
            <summary>
            The first buffer to compare should be passed here.
            </summary>
            <param name="dummyParam1"></param>
            <param name="buffer1">The buffer.</param>
            <param name="dummyParam2"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.Network.SmartComparator2">
            <summary>
            One of the comparators used for complication of byte buffers comparison.
            </summary>
        </member>
        <member name="M:Aspose.Network.SmartComparator2.#ctor(Aspose.Network.SmartComparator1,System.Byte[],System.Boolean,System.Boolean)">
            <summary>
            The second buffer to compare must be passed here.
            </summary>
            <param name="dummyParam1"></param>
            <param name="buffer2">The buffer.</param>
            <param name="dummyParam2"></param>
            <param name="dummyParam3"></param>
        </member>
        <member name="M:Aspose.Network.SmartComparator2.AddComparator1(System.Int32[],Aspose.Network.SmartComparator1)">
            <summary>
            The first comparator must be added here.
            </summary>
            <param name="dummyParam1"></param>
            <param name="comparator1">The comparator.</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.Network.SmartComparator2.PerformComparison1(System.Boolean)">
            <summary>
            Performs comparison of the second half of the buffers.
            </summary>
            <param name="dummyParam1"></param>
        </member>
        <member name="M:Aspose.Network.SmartComparator2.PassControlToComparator3(System.String,System.Boolean)">
            <summary>
            Passes control to the comparator 3.
            </summary>
            <param name="dummyParam1"></param>
            <param name="isDummy">Must be false to really pass control.</param>
        </member>
        <member name="T:Aspose.Network.SmartComparator3">
            <summary>
            One of the comparators used for complication of byte buffers comparison.
            </summary>
        </member>
        <member name="M:Aspose.Network.SmartComparator3.#ctor(Aspose.Network.SmartComparator2)">
            <summary>
            Comparator 2 should be passed here.
            </summary>
            <param name="comparator2">Comparator 2.</param>
        </member>
        <member name="T:Aspose.Network.VerificationSupervisor">
            <summary>
            Contains flags set by the meaningful comparer methods. This is necessary to ensure
            that crackers have not cut out the entry point of the verification algorithm located
            in LicenseCore.VerifySignature() and all the methods have been called. The flags should
            be set by 3 comparer methods subsequently, each method must check if the previous method
            has been invoked. 
            
            Also see SignatureInvalidFlag in this class.
            </summary>
        </member>
        <member name="M:Aspose.Network.VerificationSupervisor.Clear">
            <summary>
            Made accessible so license unit tests can reset the static state properly.
            </summary>
        </member>
        <member name="M:Aspose.Network.VerificationSupervisor.EnsureIfAllMethodsInvoked">
            <summary>
            Returns 0x100 if all methods have been invoked properly, returns 0x1000 otherwise.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Aspose.Network.VerificationSupervisor.SignatureInvalidFlag">
            <summary>
            If EnsureIfAllMethodsInvoked says that verification methods were called and 
            SignatureInvalidFlag is zero, then the  signature was verified and it was correct.
            
            This is set to greater than zero if signature verification failed at some stage.
            </summary>
        </member>
        <member name="P:Aspose.Network.VerificationSupervisor.MethodCalledFlag1">
            <summary>
            Used for checking if methods 1 and 2 were invoked. Initial value = 0x30. Method 1
            must check it and if it is 0x30, set it to 0xff, otherwise leave intact.
            Method 2 then must check it and if it is 0xff, set it to 0x80, otherwise leave intact.
            </summary>
        </member>
        <member name="P:Aspose.Network.VerificationSupervisor.MethodCalledFlag2">
            <summary>
            Used for checking if method 3 was invoked. Initial value = true. Method 3 must
            set it to false.
            </summary>
        </member>
        <member name="T:Aspose.Network.Icmp.SendCompletedEventArgs">
            <summary>
            Provides data for the SendCompleted event. When your asynchronous send operation calls an event handler, an instance of this class is passed to the handler.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.SendCompletedEventArgs.AsyncResult">
            <summary>
            Gets the result of the asynchronous operation requested.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.SendCompletedEventArgs.Sender">
            <summary>
            Gets the sender of the event
            </summary>
        </member>
        <member name="T:Aspose.Network.Icmp.InformationRequestMessage">
            <summary>
            Represents the information request message.
            </summary>
        </member>
        <member name="M:Aspose.Network.Icmp.InformationRequestMessage.#ctor">
            <summary>
            Initializes a new instance of the InformationRequestMessage class.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.InformationRequestMessage.Identifier">
            <summary>
            Gets or sets the identifier.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.InformationRequestMessage.SequenceNumber">
            <summary>
            Gets or sets the sequence number.
            </summary>
        </member>
        <member name="T:Aspose.Network.Icmp.InformationReplyMessage">
            <summary>
            Represents the informaton reply message.
            </summary>
        </member>
        <member name="M:Aspose.Network.Icmp.InformationReplyMessage.#ctor">
            <summary>
            Initializes a new instance of the InformationReplyMessage class.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.InformationReplyMessage.Identifier">
            <summary>
            Gets or sets the identifier.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.InformationReplyMessage.SequenceNumber">
            <summary>
            Gets or sets the sequence number.
            </summary>
        </member>
        <member name="T:Aspose.Network.Icmp.IcmpClient">
            <summary>
            Implements an Internet Control Message Protocol (ICMP) client.
            </summary>
        </member>
        <member name="M:Aspose.Network.Icmp.IcmpClient.#ctor(System.Net.IPAddress)">
            <summary>
            Initialize a new instance of the class <see cref="T:Aspose.Network.Icmp.IcmpClient"/>.
            </summary>
            <param name="host">The host address.</param>
        </member>
        <member name="M:Aspose.Network.Icmp.IcmpClient.#ctor(System.Net.IPEndPoint)">
            <summary>
            Initialize a new instance of the class <see cref="T:Aspose.Network.Icmp.IcmpClient"/>.
            </summary>
            <param name="host">The IPEndPoint that represents the host.</param>
        </member>
        <member name="M:Aspose.Network.Icmp.IcmpClient.#ctor(System.Net.IPEndPoint,System.Int32)">
            <summary>
            Initialize a new instance of the class <see cref="T:Aspose.Network.Icmp.IcmpClient"/>.
            </summary>
            <param name="host">The IPEndPoint that represents the host.</param>
            <param name="receiveTimeout">The receive timeout.</param>
        </member>
        <member name="M:Aspose.Network.Icmp.IcmpClient.#ctor(System.String)">
            <summary>
            Initialize a new instance of the class <see cref="T:Aspose.Network.Icmp.IcmpClient"/>.
            </summary>
            <param name="host">The host address.</param>
        </member>
        <member name="M:Aspose.Network.Icmp.IcmpClient.#ctor(System.String,System.Int32)">
            <summary>
            Initialize a new instance of the class <see cref="T:Aspose.Network.Icmp.IcmpClient"/>.
            </summary>
            <param name="host">The host address.</param>
            <param name="receiveTimeout">The receive timeout.</param>
        </member>
        <member name="M:Aspose.Network.Icmp.IcmpClient.BeginReceive">
            <summary>
            Initiates an asynchronous receive operation by spcified message
            </summary>		
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Icmp.IcmpClient.BeginReceive(System.Object)">
            <summary>
            Initiates an asynchronous receive operation by spcified message
            </summary>		
            <param name="stateObject">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Icmp.IcmpClient.BeginReceive(System.Object,System.AsyncCallback)">
            <summary>
            Initiates an asynchronous receive operation by spcified message
            </summary>		
            <param name="stateObject">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>		
            <param name="asyncCallback">The AsyncCallback that will receive the notification of the asynchronous operation completion. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Icmp.IcmpClient.BeginSend(Aspose.Network.Icmp.IcmpMessage)">
            <summary>
            Initiates an asynchronous send operation by spcified message
            </summary>
            <param name="icmpMessage">An IcmpMessage, to be sent to the server</param>		
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Icmp.IcmpClient.BeginSend(Aspose.Network.Icmp.IcmpMessage,System.Object)">
            <summary>
            Initiates an asynchronous send operation by spcified message
            </summary>
            <param name="icmpMessage">An IcmpMessage, to be sent to the server</param>
            <param name="stateObject">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>				
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Icmp.IcmpClient.BeginSend(Aspose.Network.Icmp.IcmpMessage,System.Object,System.AsyncCallback)">
            <summary>
            Initiates an asynchronous send operation by spcified message
            </summary>
            <param name="icmpMessage">An EchoMessage, to be sent to the server</param>
            <param name="stateObject">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>		
            <param name="asyncCallback">The AsyncCallback that will receive the notification of the asynchronous operation completion. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Icmp.IcmpClient.Dispose">
            <summary>
            Dispose the instance
            </summary>
        </member>
        <member name="M:Aspose.Network.Icmp.IcmpClient.EndReceive(System.IAsyncResult)">
            <summary>
            Completes the specified asynchronous receive operation.
            </summary>
            <param name="asyncResult">The IAsyncResult that identifies the asynchronous receive operation to finish, and from which to retrieve an end result.</param>
            <returns>The IcmpMessage received from the server.</returns>
        </member>
        <member name="M:Aspose.Network.Icmp.IcmpClient.EndSend(System.IAsyncResult)">
            <summary>
            Completes the specified asynchronous send operation.
            </summary>
            <param name="asyncResult">The IAsyncResult that identifies the asynchronous send operation to finish, and from which to retrieve an end result.</param>		
        </member>
        <member name="M:Aspose.Network.Icmp.IcmpClient.Receive">
            <summary>
            Receive messages from the server.
            </summary>
            <returns>The ICMP messages returned.</returns>
        </member>
        <member name="M:Aspose.Network.Icmp.IcmpClient.Send(Aspose.Network.Icmp.IcmpMessage)">
            <summary>
            Send the icmp message to the server
            </summary>
            <param name="icmpMessage">An IcmpMessage, to be sent to the server. </param>
        </member>
        <member name="E:Aspose.Network.Icmp.IcmpClient.ReceiveCompleted">
            <summary>
            Occurs when a message has been received from the server.This event is raised by the asynchronous operation, BeginReceive.
            </summary>
        </member>
        <member name="E:Aspose.Network.Icmp.IcmpClient.SendCompleted">
            <summary>
            Occurs when a message has been sent to the server.This event is raised by the asynchronous operation, BeginSend.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.IcmpClient.Host">
            <summary>
            Gets or sets the host.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.IcmpClient.SendTimeout">
            <summary>
            Gets or sets the send timeout
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.IcmpClient.ReceiveTimeout">
            <summary>
            Gets or sets the receive timeout
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.IcmpClient.SynchronizingObject">
            <summary>
            Gets or sets the object used to marshal the event handler calls issued as a result of an IcmpClient send or receive event.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.IcmpClient.TimeToLive">
            <summary>
            Gets or sets the time to live
            </summary>
        </member>
        <member name="T:Aspose.Network.Icmp.EchoCompletedEventArgs">
            <summary>
            Provides data for the EchoCompleted event. When your asynchronous receive operation calls an event handler, an instance of this class is passed to the handler.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.EchoCompletedEventArgs.AsyncResult">
            <summary>
            Gets the result of the asynchronous operation requested.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.EchoCompletedEventArgs.Sender">
            <summary>
            Gets the sender of the event
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.EchoCompletedEventArgs.Message">
            <summary>
            Gets the message from the server.
            </summary>
        </member>
        <member name="T:Aspose.Network.Icmp.EchoClient">
            <summary>
            Allows applications to ping a host using the Internet Control Message Protocol (ICMP) 
            </summary>
        </member>
        <member name="M:Aspose.Network.Icmp.EchoClient.#ctor(System.Net.IPAddress)">
            <summary>
            Intialize a new instance of the class <see cref="T:Aspose.Network.Icmp.EchoClient"/>.
            </summary>
            <param name="host">The address of the host</param>
        </member>
        <member name="M:Aspose.Network.Icmp.EchoClient.#ctor(System.Net.IPEndPoint)">
            <summary>
            Intialize a new instance of the class <see cref="T:Aspose.Network.Icmp.EchoClient"/>.
            </summary>
            <param name="host">The address of the host</param>
        </member>
        <member name="M:Aspose.Network.Icmp.EchoClient.#ctor(System.String)">
            <summary>
            Intialize a new instance of the class <see cref="T:Aspose.Network.Icmp.EchoClient"/>.
            </summary>
            <param name="host">The address of the host</param>
        </member>
        <member name="M:Aspose.Network.Icmp.EchoClient.BeginEcho(Aspose.Network.Icmp.EchoMessage)">
            <summary>
            Initiates an asynchronous echo operation by spcified message.
            </summary>
            <param name="message">An EchoMessage, to be sent to the server</param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Icmp.EchoClient.BeginEcho(System.Byte[])">
            <summary>
            Initiates an asynchronous echo operation by spcified message.
            </summary>
            <param name="message">The binary message data.</param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Icmp.EchoClient.BeginEcho(System.String)">
            <summary>
            Initiates an asynchronous echo operation by spcified message.
            </summary>
            <param name="message">The string message data.</param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Icmp.EchoClient.BeginEcho(Aspose.Network.Icmp.EchoMessage,System.Object)">
            <summary>
            Initiates an asynchronous echo operation by spcified message.
            </summary>
            <param name="message">An EchoMessage, to be sent to the server</param>
            <param name="stateObject">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Icmp.EchoClient.BeginEcho(System.Byte[],System.Object)">
            <summary>
            Initiates an asynchronous echo operation by spcified message.
            </summary>
            <param name="message">The binary message data.</param>
            <param name="stateObject">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Icmp.EchoClient.BeginEcho(System.String,System.Object)">
            <summary>
            Initiates an asynchronous echo operation by spcified message.
            </summary>
            <param name="message">The string message data.</param>
            <param name="stateObject">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Icmp.EchoClient.BeginEcho(Aspose.Network.Icmp.EchoMessage,System.Object,System.AsyncCallback)">
            <summary>
            Initiates an asynchronous echo operation by spcified message.
            </summary>
            <param name="message">An EchoMessage, to be sent to the server</param>
            <param name="stateObject">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>		
            <param name="asyncCallback">The AsyncCallback that will receive the notification of the asynchronous operation completion. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Icmp.EchoClient.BeginEcho(System.Byte[],System.Object,System.AsyncCallback)">
            <summary>
            Initiates an asynchronous echo operation by spcified message.
            </summary>
            <param name="message">The bianry message data.</param>
            <param name="stateObject">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>		
            <param name="asyncCallback">The AsyncCallback that will receive the notification of the asynchronous operation completion. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Icmp.EchoClient.BeginEcho(System.String,System.Object,System.AsyncCallback)">
            <summary>
            Initiates an asynchronous echo operation by spcified message.
            </summary>
            <param name="message">The string message data.</param>
            <param name="stateObject">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>		
            <param name="asyncCallback">The AsyncCallback that will receive the notification of the asynchronous operation completion. </param>
            <returns>The IAsyncResult that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:Aspose.Network.Icmp.EchoClient.Echo(System.Byte[])">
            <summary>
            Send an echo message to the server
            </summary>
            <param name="message">The message to be sent</param>
            <returns>An EchoRelyMessage, that returns from the server</returns>
        </member>
        <member name="M:Aspose.Network.Icmp.EchoClient.Echo(System.String)">
            <summary>
            Send an echo message to the server
            </summary>
            <param name="message">The message to be sent</param>
            <returns>An EchoRelyMessage, that returns from the server</returns>
        </member>
        <member name="M:Aspose.Network.Icmp.EchoClient.Echo">
            <summary>
            Send an echo message to the server
            </summary>		
            <returns>An EchoRelyMessage, that returns from the server</returns>
        </member>
        <member name="M:Aspose.Network.Icmp.EchoClient.Echo(Aspose.Network.Icmp.EchoMessage)">
            <summary>
            Send an echo message to the server
            </summary>
            <param name="message">The message to be sent</param>
            <returns>An EchoRelyMessage, that returns from the server</returns>
        </member>
        <member name="M:Aspose.Network.Icmp.EchoClient.EndEcho(System.IAsyncResult)">
            <summary>
            Completes the specified asynchronous Echo operation.
            </summary>
            <param name="asyncResult">The IAsyncResult that identifies the asynchronous echo operation to finish, and from which to retrieve an end result.</param>
            <returns>The EchoReplyMessage received from the server.</returns>
        </member>
        <member name="M:Aspose.Network.Icmp.EchoClient.IncreaseSequenceNumber">
            <summary>
            Increases the sequence number.
            </summary>
            <returns>The sequence number.</returns>
        </member>
        <member name="E:Aspose.Network.Icmp.EchoClient.EchoCompleted">
            <summary>
            Occurs when an echo message has been received from the server.This event is raised by the asynchronous operation, BeginEcho.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.EchoClient.Identifier">
            <summary>
            Gets or sets the indifier.
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.EchoClient.ResponseTime">
            <summary>
            Gets the response time
            </summary>
        </member>
        <member name="P:Aspose.Network.Icmp.EchoClient.ResponseTimeToLive">
            <summary>
            Gets the response time to live
            </summary>
        </member>
        <member name="T:Aspose.Network.Outlook.MapiAttachment">
            <summary>
            Represents the attachment in the E-mail message.
            </summary>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiAttachment.Save(System.String)">
            <summary>
            Save attachment content.
            </summary>
            <param name="filename">The file name to save.</param>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiAttachment.Save(System.IO.Stream)">
            <summary>
            Save attachment content.
            </summary>
            <param name="stream">The stream to save.</param>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiAttachment.Extension">
            <summary>
            Gets a filename extension that indicates the document type of an attachment.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiAttachment.FileName">
            <summary>
            Gets an attachment's base filename and extension, excluding path. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiAttachment.LongFileName">
            <summary>
            Gets an attachment's long filename and extension, excluding path.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiAttachment.DisplayName">
            <summary>
            Gets the display name of the ole object in an attachment.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiAttachment.MimeTag">
            <summary>
            Gets formatting information about a Multipurpose Internet Mail Extensions (MIME) attachment.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiAttachment.BinaryData">
            <summary>
            Gets binary attachment data typically accessed through the OLE IStream interface. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiAttachment.ObjectData">
            <summary>
            Gets an attachment object typically accessed through the OLE IStorage interface. 
            </summary>
        </member>
        <member name="T:Aspose.Network.Outlook.MapiMessageReader">
            <summary>
            Represents a reader that can read a Microsoft Outlook Message format document.
            </summary>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiMessageReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MapiMessageReader class for the specified file name.
            </summary>
            <param name="path">The complete file path to be read. </param>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiMessageReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the MapiMessageReader class for the specified stream.
            </summary>
            <param name="stream">The stream to be read. </param>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiMessageReader.ReadMessage">
            <summary>
            Parse the current stream and returns the data as a MapiMessage.
            </summary>
            <returns>The MapiMessage from the input stream.</returns>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiMessageReader.ReadAttachments">
            <summary>
            Extracts the attachment from the Outlook Message files.
            </summary>
            <returns>The Attachment collection.</returns>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiMessageReader.RemoveAttachments">
            <summary>
            Remove the attachments from the Outlook Message files.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiMessageReader.Dispose">
            <summary>
            Releases the unmanaged resources used by the MapiMessageReader.
            </summary>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiMessageReader.Finalize">
            <summary>
            Frees resources used by the MapiMessageReader class.
            </summary>
        </member>
        <member name="T:Aspose.Network.Win32.IPropertyStorage">
            <summary>
            The IPropertyStorage interface manages the persistent properties of a single property set.
            Persistent properties consist of information that can be stored persistently in a
            property set, such as the summary information associated with a file.
            </summary>
        </member>
        <member name="M:Aspose.Network.Win32.IPropertyStorage.ReadMultiple(System.UInt32,Aspose.Network.Win32.tagPROPSPEC@,System.IntPtr)">
            <summary>
            The ReadMultiple method reads specified properties from the current property set.
            </summary>
            <param name="cpspec">The numeric count of properties to be specified in the rgpspec array.</param>
            <param name="rgpspec">An array of PROPSPEC structures specifies which properties are read.
            Properties can be specified either by a property ID or by an optional string name.</param>
            <param name="rgpropvar">Caller-allocated array of a PROPVARIANT structure that, on return,
            contains the values of the properties specified by the corresponding elements in the rgpspec array.</param>
        </member>
        <member name="M:Aspose.Network.Win32.IPropertyStorage.WriteMultiple(System.UInt32,Aspose.Network.Win32.tagPROPSPEC@,System.IntPtr,Aspose.Network.Win32.PID)">
            <summary>
            The WriteMultiple method writes a specified group of properties to the current property set.
            If a property with a specified name or property identifier already exists, it is replaced,
            even when the old and new types for the property value are different.
            </summary>
            <param name="cpspec">The number of properties set. The value of this parameter can be set to zero;</param>
            <param name="rgpspec"> An array of the property IDs (PROPSPEC) to which properties are set.</param>
            <param name="rgpropvar">An array (of size cpspec) of PROPVARIANT structures that contain the property values to be written.</param>
            <param name="propidNameFirst">The minimum value for the property IDs that the method must assign if the
            rgpspec parameter specifies string-named properties for which no property IDs currently exist.</param>
        </member>
        <member name="M:Aspose.Network.Win32.IPropertyStorage.DeleteMultiple(System.UInt32,Aspose.Network.Win32.tagPROPSPEC@)">
            <summary>
            The DeleteMultiple method deletes as many of the indicated properties as exist in this property set.
            </summary>
            <param name="cpspec">The numerical count of properties to be deleted. The value of this parameter can
            legally be set to zero, however that defeats the purpose of the method as no properties are thereby
            deleted, regardless of the value set in rgpspec. </param>
            <param name="rgpspec">Properties to be deleted. A mixture of property identifiers and string-named
            properties is permitted. There may be duplicates, and there is no requirement that properties be
            specified in any order. </param>
        </member>
        <member name="M:Aspose.Network.Win32.IPropertyStorage.ReadPropertyNames(System.UInt32,System.UInt32@,System.String@)">
            <summary>
            The ReadPropertyNames method retrieves any existing string names for the specified property IDs.
            </summary>
            <param name="cpropid">The number of elements on input of the array rgpropid.
            The value of this parameter can be set to zero.</param>
            <param name="rgpropid">An array of property IDs for which names are to be retrieved.</param>
            <param name="rglpwstrName">A caller-allocated array of size cpropid of LPWSTR members.
            On return, the implementation fills in this array.</param>
        </member>
        <member name="M:Aspose.Network.Win32.IPropertyStorage.WritePropertyNames(System.UInt32,System.UInt32@,System.String@)">
            <summary>
            The WritePropertyNames method assigns string names to a specified array of property IDs in the current property set.
            </summary>
            <param name="cpropid">The size on input of the array rgpropid. Can be zero.
            However, making it zero causes this method to become non-operational.</param>
            <param name="rgpropid">An array of the property IDs for which names are to be set.</param>
            <param name="rglpwstrName">Array of new names to be assigned to the corresponding property
            IDs in the rgpropid array. These names may not exceed 255 characters (not including the NULL terminator).</param>
        </member>
        <member name="M:Aspose.Network.Win32.IPropertyStorage.DeletePropertyNames(System.UInt32,System.UInt32@)">
            <summary>
            The DeletePropertyNames method deletes specified string names from the current property set.
            </summary>
            <param name="cpropid">The size on input of the array rgpropid. If 0, no property names are deleted.</param>
            <param name="rgpropid">Property identifiers for which string names are to be deleted.</param>
        </member>
        <member name="M:Aspose.Network.Win32.IPropertyStorage.Commit(Aspose.Network.Win32.STGC)">
            <summary>
            The IPropertyStorage::Commit method saves changes made to a property storage
            object to the parent storage object.
            </summary>
            <param name="grfCommitFlags">The flags that specify the conditions under which the commit is to be performed.</param>
        </member>
        <member name="M:Aspose.Network.Win32.IPropertyStorage.Revert">
            <summary>
            The Revert method discards all changes to the named property set since it was last opened or
            discards changes that were last committed to the property set.
            </summary>
        </member>
        <member name="M:Aspose.Network.Win32.IPropertyStorage.Enum(Aspose.Network.Win32.IEnumSTATPROPSTG@)">
            <summary>
            The Enum method creates an enumerator object designed to enumerate data of type STATPROPSTG,
            which contains information on the current property set.
            </summary>
            <param name="ppenum">Pointer to IEnumSTATPROPSTG pointer variable that receives the interface
            pointer to the new enumerator object.</param>
        </member>
        <member name="M:Aspose.Network.Win32.IPropertyStorage.SetTimes(System.Runtime.InteropServices.FILETIME@,System.Runtime.InteropServices.FILETIME@,System.Runtime.InteropServices.FILETIME@)">
            <summary>
            The SetTimes method sets the modification, access, and creation times of this property set,
            if supported by the implementation. Not all implementations support all these time values.
            </summary>
            <param name="pctime">Pointer to the new creation time for the property set. May be NULL,
            indicating that this time is not to be modified by this call.</param>
            <param name="patime">Pointer to the new access time for the property set. May be NULL,
            indicating that this time is not to be modified by this call.</param>
            <param name="pmtime">Pointer to the new modification time for the property set. May be
            NULL, indicating that this time is not to be modified by this call.</param>
        </member>
        <member name="M:Aspose.Network.Win32.IPropertyStorage.SetClass(System.Guid@)">
            <summary>
            The SetClass method assigns a new CLSID to the current property storage object, and
            persistently stores the CLSID with the object.
            </summary>
            <param name="clsid">New CLSID to be associated with the property set.</param>
        </member>
        <member name="M:Aspose.Network.Win32.IPropertyStorage.Stat(Aspose.Network.Win32.tagSTATPROPSETSTG@)">
            <summary>
            The Stat method retrieves information about the current open property set.
            </summary>
            <param name="pstatpsstg">Pointer to a STATPROPSETSTG structure, which contains
            statistics about the current open property set.</param>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiMessageUtil.DestroyAttachments(System.String)">
            <summary>
            Destroies the attachments in the specified Outlook Message files
            </summary>
            <param name="path">The name of the Outlook Message file</param>
        </member>
        <member name="M:Aspose.Network.Outlook.MapiMessageUtil.RemoveAttachments(System.String)">
            <summary>
            Removes the attachments from the specified Outlook Message files
            </summary>
            <param name="path">The name of the Outlook Message file</param>
            <returns>The attachments removed.</returns>
        </member>
        <member name="T:Aspose.Network.Exchange.ExchangeException">
            <summary>
            Represents the exception that is thrown when the ExchangeClient gets errors.
            </summary>
        </member>
        <member name="M:Aspose.Network.Exchange.ExchangeException.#ctor">
            <summary>
            Initializes a new instance of the ExchangeException class.
            </summary>
        </member>
        <member name="M:Aspose.Network.Exchange.ExchangeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ExchangeException class.
            </summary>
            <param name="message">A String that describes the error that occurred.</param>
        </member>
        <member name="M:Aspose.Network.Exchange.ExchangeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the ExchangeException class.
            </summary>
            <param name="message">A String that describes the error that occurred.</param>
            <param name="innerException">The exception that is the cause of the current exception. </param>
        </member>
        <member name="T:Aspose.Network.Dns.RTResourceRecord">
            <summary>
            Represents a RT DNS resource record
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.RTResourceRecord.#ctor">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.RTResourceRecord">RTResourceRecord</see>.
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.RTResourceRecord.#ctor(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.RTResourceRecord">RTResourceRecord</see>.
            </summary>
            <param name="buffer">The arry of unsigned bytes from which to create.</param>
            <param name="index">The index into buffer at which this resource record begins</param>
            <param name="count">The length of the bytes to create this resource record</param>
        </member>
        <member name="P:Aspose.Network.Dns.RTResourceRecord.IntermediateHost">
            <summary>
            Gets or sets the intermediate host
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.RTResourceRecord.Preference">
            <summary>
            Gets or sets the preference
            </summary>
        </member>
        <member name="T:Aspose.Network.Dns.NSResourceRecord">
            <summary>
            Represents a NS DNS resource record
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.NSResourceRecord.#ctor">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.NSResourceRecord">NSResourceRecord</see>.
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.NSResourceRecord.#ctor(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.NSResourceRecord">NSResourceRecord</see>.
            </summary>
            <param name="buffer">The arry of unsigned bytes from which to create.</param>
            <param name="index">The index into buffer at which this resource record begins</param>
            <param name="count">The length of the bytes to create this resource record</param>
        </member>
        <member name="P:Aspose.Network.Dns.NSResourceRecord.NameServer">
            <summary>
            Gets or sets the name server
            </summary>
        </member>
        <member name="T:Aspose.Network.Dns.MBResourceRecord">
            <summary>
            Represents a MB DNS resource record
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.MBResourceRecord.#ctor">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.MBResourceRecord">MBResourceRecord</see>.
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.MBResourceRecord.#ctor(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.MBResourceRecord">MBResourceRecord</see>.
            </summary>
            <param name="buffer">The arry of unsigned bytes from which to create.</param>
            <param name="index">The index into buffer at which this resource record begins</param>
            <param name="count">The length of the bytes to create this resource record</param>
        </member>
        <member name="P:Aspose.Network.Dns.MBResourceRecord.Mailbox">
            <summary>
            Gets or sets the mail box
            </summary>
        </member>
        <member name="T:Aspose.Network.Dns.AFSDBResourceRecord">
            <summary>
            Represents an AFSDB DNS resource record
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.AFSDBResourceRecord.#ctor">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.AFSDBResourceRecord">AFSDBResourceRecord</see>.
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.AFSDBResourceRecord.#ctor(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.AFSDBResourceRecord">AFSDBResourceRecord</see>.
            </summary>
            <param name="buffer">The arry of unsigned bytes from which to create.</param>
            <param name="index">The index into buffer at which this resource record begins</param>
            <param name="count">The length of the bytes to create this resource record</param>
        </member>
        <member name="P:Aspose.Network.Dns.AFSDBResourceRecord.HostName">
            <summary>
            Gets or sets the host name
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.AFSDBResourceRecord.Subtype">
            <summary>
            Gets or sets the sub type
            </summary>
        </member>
        <member name="T:Aspose.Network.Dns.MailExchangeResolvor">
            <summary>
            Represents the mail exchange information resolver.
            </summary>
        </member>
        <member name="T:Aspose.Network.Dns.DnsClient">
            <summary>
            Allows applications to resolve domain names by using the Domain Name System Protocol (DNS).
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.DnsClient.#ctor">
            <summary>
            Initialize a new instance of the class <see cref="T:Aspose.Network.Dns.DnsClient">DnsClient</see>.
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.DnsClient.Resolve(Aspose.Network.Dns.Question)">
            <summary>
            Resolve the Dns query question.
            </summary>
            <param name="question">The query question to be resolved.</param>
            <returns><b>true</b>, if received message is available; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Aspose.Network.Dns.DnsClient.BeginResolve(Aspose.Network.Dns.Question,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously resolves the question. 
            </summary>
            <param name="quesion">The Dns question to be resolved.</param>
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Dns.DnsClient.BeginResolve(Aspose.Network.Dns.QueryMessage,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously resolves the question. 
            </summary>
            <param name="queryMessage">The Dns question message to be resolved</param>
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Dns.DnsClient.EndResolve(System.IAsyncResult)">
            <summary>
            Ends an asynchronous resolving process.
            </summary>		
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="M:Aspose.Network.Dns.DnsClient.Resolve(Aspose.Network.Dns.QueryMessage)">
            <summary>
            Delivery the query message to the DNS servers
            </summary>
            <param name="queryMessge">The query message to be sent.</param>
            <returns><b>true</b>, if the response message is available; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Aspose.Network.Dns.DnsClient.ReverseResolve(System.Net.IPAddress)">
            <summary>
            Reverse resolve the host address.
            </summary>
            <param name="host">The host to be resolved.</param>
            <returns><b>true</b>, if the response message is available; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Aspose.Network.Dns.DnsClient.GetAvailableDnsServers">
            <summary>
            Gets the available DNS servers list.
            </summary>
            <returns>The IP address list of the local DNS servers.</returns>
        </member>
        <member name="P:Aspose.Network.Dns.DnsClient.LastException">
            <summary>
            Gets the last exception and error messages.
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.DnsClient.DnsServers">
            <summary>
            Gets or sets the DNS servers used to query.
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.DnsClient.Port">
            <summary>
            Gets or sets the TCP socket port when connecting to the romote servers.
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.DnsClient.ReceiveTimeout">
            <summary>
            Gets or set the receive timeout. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.DnsClient.ReceivedMessage">
            <summary>
            Gets the <see cref="T:Aspose.Network.Dns.QueryMessage">QueryMessage</see>	received from the remote servers. 
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.MailExchangeResolvor.#ctor">
            <summary>
            Initializes a new instance of the MailExchangeResolvor class.
            </summary>
        </member>
        <member name="T:Aspose.Network.Dns.DnsUtility">
            <summary>
            Summary description for DnsUtility.
            </summary>
        </member>
        <member name="T:Aspose.Network.Mail.MailAddressCollection">
            <summary>
            Store e-mail addresses that are associated with an e-mail message.
            <remark>
            The MailMessage.To, MailMessage.CC, and MailMessage.Bcc properties return instances of this class that are used to hold the respective e-mail addresses.
            </remark>
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.MailAddressCollection.#ctor">
            <summary>
            Initializes an instance of the MailAddressCollection class.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.MailAddressCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the entire collection.
            </summary>
            <returns>An System.Collections.IEnumerator for the entire collection.</returns>
        </member>
        <member name="M:Aspose.Network.Mail.MailAddressCollection.#ctor(System.String)">
            <summary>
            Initializes an instance of the MailAddressCollection class.
            </summary>
            <param name="addresses">The email address.</param>
        </member>
        <member name="M:Aspose.Network.Mail.MailAddressCollection.Add(Aspose.Network.Mail.MailAddress)">
            <summary>
            Adds a mail address.
            </summary>
            <param name="item">The mail address to add.</param>
        </member>
        <member name="M:Aspose.Network.Mail.MailAddressCollection.Clear">
            <summary>
            Removes the elements in the collection.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.MailAddressCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Aspose.Network.Mail.MailAddressCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional System.Array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements copied from the collection. The System.Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Aspose.Network.Mail.MailAddressCollection.op_Implicit(Aspose.Network.Mail.MailAddress)~Aspose.Network.Mail.MailAddressCollection">
            <summary>
            Converts a MailAddress instance to a MailAddressCollection instance implicitly.
            </summary>
            <param name="mailaddress">The mail address to convert.</param>
            <returns>A MailAddressCollection contains the MailAddress instance.</returns>
        </member>
        <member name="M:Aspose.Network.Mail.MailAddressCollection.op_Implicit(System.String)~Aspose.Network.Mail.MailAddressCollection">
            <summary>
            Converts a mail addresses string to a MailAddressCollection instance implicitly.
            </summary>
            <param name="addresses">The string contains the mail addresses.</param>
            <returns>A MailAddressCollection contains the mail addresses.</returns>
        </member>
        <member name="M:Aspose.Network.Mail.MailAddressCollection.ToString">
            <summary>
            Overridden. Returns a string representation of this instance. 
            </summary>
            <returns>A string contains the mail addresses.</returns>
        </member>
        <member name="M:Aspose.Network.Mail.MailAddressCollection.Insert(System.Int32,Aspose.Network.Mail.MailAddress)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="item">The MailAddress to insert. </param>
        </member>
        <member name="M:Aspose.Network.Mail.MailAddressCollection.IndexOf(Aspose.Network.Mail.MailAddress)">
            <summary>
            Searches for the specified MailAddress and returns the zero-based index of the first occurrence within the entire System.Collections.ArrayList.
            </summary>
            <param name="item">The MailAddress to locate in the collection.</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.Network.Mail.MailAddressCollection.Contains(Aspose.Network.Mail.MailAddress)">
            <summary>
            Determines whether an element is in the collection.
            </summary>
            <param name="item">The MailAddress to locate in the collection</param>
            <returns>true if item is found in the collection; otherwise, false.</returns>
        </member>
        <member name="P:Aspose.Network.Mail.MailAddressCollection.Count">
            <summary>
            Gets the number of elements actually contained in the collection.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.MailAddressCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:Aspose.Network.Mail.MailAddressCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="T:Aspose.Network.Security.Cryptography.X509Certificates.X509ChainStatusFlags">
            <summary>
            Defines the status of an X509 chain.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509ChainStatusFlags.CaNotTrusted">
            <summary>
            CaNotTrusted.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509ChainStatusFlags.CnNotMatch">
            <summary>
            CnNotMatch.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509ChainStatusFlags.CtlSignatureNotValid">
            <summary>
            Specifies that the certificate trust list (CTL) contains an invalid signature.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509ChainStatusFlags.CtlTimeNotValid">
            <summary>
            Specifies that the certificate trust list (CTL) is not valid because of an invalid time value, such as one that indicates that the CTL has expired.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509ChainStatusFlags.CtlNotValidForUsage">
            <summary>
            Specifies that the certificate trust list (CTL) is not valid for this use.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509ChainStatusFlags.Cyclic">
            <summary>
            Specifies that the X509 chain could not be built.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509ChainStatusFlags.HasExcludedNameConstraint">
            <summary>
            ExcludedNameConstraint.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509ChainStatusFlags.ExplicitDistrust">
            <summary>
            ExplicitDistrust.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509ChainStatusFlags.PartialChain">
            <summary>
            Specifies that the X509 chain could not be built up to the root certificate.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509ChainStatusFlags.InvalidBasicConstraints">
            <summary>
            Specifies that the X509 chain is invalid due to invalid basic constraints.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509ChainStatusFlags.InvalidChain">
             <summary>
            InvalidChain.
             </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509ChainStatusFlags.InvalidExtension">
            <summary>
            Specifies that the X509 chain is invalid due to an invalid extension.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509ChainStatusFlags.InvalidNameConstraints">
            <summary>
            Specifies that the X509 chain is invalid due to invalid name constraints.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509ChainStatusFlags.InvalidPolicyConstraints">
            <summary>
            Specifies that the X509 chain is invalid due to invalid policy constraints.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509ChainStatusFlags.Malformed">
            <summary>
            Malformed.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509ChainStatusFlags.MoreErrors">
            <summary>
            MoreErrors.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NoIssuanceChainPolicy">
            <summary>
            Specifies that there is no certificate policy extension in the certificate. This error would occur if a group policy has specified that all certificates must have a certificate policy.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509ChainStatusFlags.HasNotDefinedNameConstraint">
            <summary>
            Specifies that the certificate has an undefined name constant.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509ChainStatusFlags.HasNotPermittedNameConstraint">
            <summary>
            Specifies that the certificate has an impermissible name constraint.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509ChainStatusFlags.OfflineRevocation">
            <summary>
            Specifies that the online certificate revocation list (CRL) the X509 chain relies on is currently offline.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509ChainStatusFlags.PathTooLong">
            <summary>
            PathTooLong.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509ChainStatusFlags.Revoked">
            <summary>
            Specifies that the X509 chain is invalid due to a revoked certificate.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509ChainStatusFlags.UntrustedRoot">
            <summary>
            Specifies that the X509 chain is invalid due to an untrusted root certificate.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NotSignatureValid">
            <summary>
            Specifies that the X509 chain is invalid due to an invalid certificate signature.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509ChainStatusFlags.TimeNotNested">
            <summary>
            Specifies that the CA (certificate authority) certificate and the issued certificate have validity periods that are not nested. For example, the CA cert can be valid from January 1 to December 1 and the issued certificate from January 2 to December 2, which would mean the validity periods are not nested.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509ChainStatusFlags.TimeNotValid">
            <summary>
            Specifies that the X509 chain is not valid due to an invalid time value, such as a value that indicates an expired certificate.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509ChainStatusFlags.UnknownCa">
            <summary>
            UnknownCa.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509ChainStatusFlags.UnknownCriticalExtension">
            <summary>
            UnknownCriticalExtension.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509ChainStatusFlags.UnknownError">
            <summary>
            UnknownError.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509ChainStatusFlags.RevocationStatusUnknown">
            <summary>
            Specifies that it is not possible to determine whether the certificate has been revoked. This can be due to the certificate revocation list (CRL) being offline or unavailable.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509ChainStatusFlags.HasNotSupportedNameConstraint">
            <summary>
            Specifies that the certificate does not have a supported name constant or has a name constant that is unsupported.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NotValidForUsage">
            <summary>
            Specifies that the key usage is not valid.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NoError">
            <summary>
            Specifies that the X509 chain has no errors.
            </summary>
        </member>
        <member name="T:Aspose.Network.Verify.SyntaxValidatingEventArgs">
            <summary>
            Provides data for the SyntaxValidating event.
            </summary>
        </member>
        <member name="M:Aspose.Network.Verify.SyntaxValidatingEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SyntaxValidatingEventArgs class.
            </summary>
            <param name="mail">The mail address.</param>
        </member>
        <member name="P:Aspose.Network.Verify.SyntaxValidatingEventArgs.Mail">
            <summary>
            Gets the mail address is being validating.
            </summary>
        </member>
        <member name="P:Aspose.Network.Verify.SyntaxValidatingEventArgs.Skip">
            <summary>
            Indicates whether to ignore the check.
            </summary>
        </member>
        <member name="P:Aspose.Network.Verify.SyntaxValidatingEventArgs.Result">
            <summary>
            Gets or sets the validation result.
            </summary>
        </member>
        <member name="T:Aspose.Network.Verify.DomainValidatingEventArgs">
            <summary>
            Provides data for the DomainValidating event.
            </summary>
        </member>
        <member name="M:Aspose.Network.Verify.DomainValidatingEventArgs.#ctor(System.String,Aspose.Network.Mail.MailAddress)">
            <summary>
            Initializes a new instance of the SyntaxValidatingEventArgs class.
            </summary>
            <param name="mail">The mail address.</param>
            <param name="mailaddress">The mail address.</param>
        </member>
        <member name="P:Aspose.Network.Verify.DomainValidatingEventArgs.Domain">
            <summary>
            Gets the domain.
            </summary>
        </member>
        <member name="P:Aspose.Network.Verify.DomainValidatingEventArgs.MailAddress">
            <summary>
            Gets the mail address.
            </summary>
        </member>
        <member name="T:Aspose.Network.Verify.MailServerValidatingEventArgs">
            <summary>
            Provides data for the MailServerValidatingEvent event.
            </summary>
        </member>
        <member name="M:Aspose.Network.Verify.MailServerValidatingEventArgs.#ctor(System.String,Aspose.Network.Mail.MailAddress,System.String[])">
            <summary>
            Initializes a new instance of the SyntaxValidatingEventArgs class.
            </summary>
            <param name="mail">A string contains the original copy of the mail address.</param>
            <param name="mailaddress">The MailAddress.</param>
            <param name="mailExchangeList">A set of mail exchange server list.</param>
        </member>
        <member name="P:Aspose.Network.Verify.MailServerValidatingEventArgs.MailExchangeServers">
            <summary>
            Gets the mail exchange server list.
            </summary>
        </member>
        <member name="T:Aspose.Network.Verify.DomainValidatingEventHandler">
            <summary>
            Represents the event handler for DomainValidatingEvent.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:Aspose.Network.Verify.SyntaxValidatingEventHandler">
            <summary>
            Represents the event handler for SyntaxValidatingEvent.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:Aspose.Network.Verify.MailServerValidatingEventHandler">
            <summary>
            Represents the event handler for MailServerValidatingEvent.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:Aspose.Network.Verify.EmailValidator">
            <summary>
            EmailValidator class provides the capability to validate e-mail addresses.
            </summary>	
            <example>
            <para>The following example demonstrates how to use EmailValidator to validate e-mail addresses.</para>
            <para>[C#]</para>
            <code>
            Aspose.Network.DataSource.EmailValidator ev = new Aspose.Network.Verfiy.EmailValidator();
            Aspose.Network.Verfiy.ValidationResult result;
            ev.Validate("", out result);
            if (result.ReturnCode == ValidationResponseCode.ValidationSucess)
            {
            	MessageBox.Show("the email address is valid.");
            }
            else
            {
            	MessageBox.Show("the mail address is invalid,for the {0}", result.Message);
            }
            </code>
            <para>[Visual Basic]</para>
            <code>
            Dim ev As New Aspose.Network.Verfiy.EmailValidator
            Dim result As Aspose.Network.Verfiy.ValidationResult
            ev.Validate("guangzhou@aspose.com", result)
            If (result.ReturnCode = Aspose.Network.Verfiy.ValidationResponseCode.ValidationSuccess) Then
            	MessageBox.Show("the mail address is valid")
            Else
            	MessageBox.Show("the mail is invalid")
            End If
            </code>
            </example>
        </member>
        <member name="M:Aspose.Network.Verify.EmailValidator.#ctor">
            <summary>
            Create an instance of EmailValidator.
            </summary>
        </member>
        <member name="M:Aspose.Network.Verify.EmailValidator.Validate(System.String,Aspose.Network.Verify.ValidationPolicy,Aspose.Network.Verify.ValidationResult@)">
            <summary>
            Validating the email address
            </summary>
            <param name="mailAddress">The mail address to be validated.</param>
            <param name="policy">The policy of the validating process.</param>
            <param name="result">The result of the validating process.</param>
        </member>
        <member name="M:Aspose.Network.Verify.EmailValidator.Validate(System.String,Aspose.Network.Verify.ValidationResult@)">
            <summary>
            Validate email address, with the MailServer validation policy.
            </summary>
            <param name="mailAddress">The Email address to be validated.</param>
            <param name="result">The result of the validation.</param>
        </member>
        <member name="M:Aspose.Network.Verify.EmailValidator.BeginValidate(System.String,Aspose.Network.Verify.ValidationPolicy,Aspose.Network.Verify.ValidationResult@,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous validating process for an email address.
            </summary>
            <param name="mailAddress">The email address to be validated.</param>
            <param name="policy">The policy of the validating process.</param>
            <param name="result">The result of the validating process.</param>
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>		
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Verify.EmailValidator.EndValidate(Aspose.Network.Verify.ValidationResult@,System.IAsyncResult)">
            <summary>
            Ends an asynchronous validating process for an email address.
            </summary>
            <param name="validationResult">The result of the validating process.</param>
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="E:Aspose.Network.Verify.EmailValidator.SyntaxValidating">
            <summary>
            This event occurs when validating the syntax of an email addresss.
            </summary>
        </member>
        <member name="E:Aspose.Network.Verify.EmailValidator.DomainValidating">
            <summary>
            This event occurs when validating the domain of an email addresss.
            </summary>
        </member>
        <member name="E:Aspose.Network.Verify.EmailValidator.MailServerValidating">
            <summary>
            This event occurs when validating an email addresss on its mail server.
            </summary>
        </member>
        <member name="P:Aspose.Network.Verify.EmailValidator.DnsServers">
            <summary>
            Gets or sets the Dns server list to use in the email validation.
            </summary>
        </member>
        <member name="P:Aspose.Network.Verify.EmailValidator.Timeout">
            <summary>
            Gets or sets the length of time until the request times out.
            </summary>
        </member>
        <member name="T:Aspose.Network.Mail.SendCompletedEventHandler">
            <summary>
             Event handler for Send an E-Mail message.
            </summary>
        </member>
        <member name="T:Aspose.Network.Mail.BulkSendCompletedEventHandler">
            <summary>
            Event handler for BulkSend a collection fo E-Mail messages.
            </summary>    
        </member>
        <member name="T:Aspose.Network.Mail.SmtpClient">
            <summary>
            <p>The SmtpClient calss allows applications to send e-mail by using the Simple Mail Transfer Protocol (SMTP).</p>
            <p>Not only be able to deliver e-mail message to SMTP server, SmtpClient also provide other common e-mail delivery methods, 
            including writing e-mail messages to the File System, and Message Queque etc.</p>
            
            <p>The SmtpClient class fully supports the Asynchronous and Synchronous programming model.</p>
            
            <p>The SmptClient the major entry for the developers who want to send out mail messages.</p>
            </summary>
            <example>
            <p>The following exmaple demonstrates how to use SmtpClient class to send out e-mail messages.</p>
            [C#]
            <code>
               MailMessage msg = new MailMessage();
               msg.From = "somebody@somedomain.com";
               msg.To = "onebody@onedomain.com";
               msg.Subject = "Hello";
               msg.TextBody = "Hello, nice to know you!";            
               SmtpClient client = new SmtpClient("smtp.somebody.com", "somebody", "password");        
               client.Send(msg);
            </code>
            [VB.NET]
            <code>
               Dim to As String = "onebody@somedomain.com" 
               Dim from As String = "somebody@somedomain.com" 
               Dim subject As String = "Say Hello" 
               Dim body As String = "Hello, how are you?" 
               Dim message As MailMessage = New MailMessage(from, to, subject, body) 
               Dim client As SmtpClient = New SmtpClient("Smtp.somedomain.com", "somebody", "password") 
               client.Send(message)
            </code>
            </example>
            <note>
            Simple Mail Transfer Protocol (SMTP) is defined in RFC 2821, which is available at http://www.ietf.org.
            </note>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpClient.#ctor">
            <summary>
            Initializes a new instance of the SmtpClient class
            </summary>
            <example>
            The following code example demonstrates calling this constructor.
            [C#]        
            <code>
                string to = "onebody@somedomain.com";
                string from = "somebody@somedomain.com";
                string subject = "Say Hello";
                string body = "Hello, how are you?";
                MailMessage message = new MailMessage(from, to, subject, body);
                SmtpClient client = new SmtpClient();                
                client.Host = "Smtp.somedomain.com";
                client.Username = "somebody";
                client.Password = "password";
                client.Send(message);
            </code>
             [VB.NET]
            <code>
               Dim to As String = "onebody@somedomain.com" 
               Dim from As String = "somebody@somedomain.com" 
               Dim subject As String = "Say Hello" 
               Dim body As String = "Hello, how are you?" 
               Dim message As MailMessage = New MailMessage(from, to, subject, body) 
               Dim client As SmtpClient = New SmtpClient() 
               client.Host = "Smtp.somedomain.com"
               client.Username = "somebody"
               client.Password = "password"
               client.Send(message)
            </code>
            </example>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpClient.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SmtpClient class that sends e-mail by using the specified SMTP server.
            </summary>
            <remarks>
            The host parameter is used to initialize the value of the Host property.
            </remarks>
            <example>
            The following code example demonstrates calling this constructor.
            [C#]        
            <code>
                string to = "onebody@somedomain.com";
                string from = "somebody@somedomain.com";
                string subject = "Say Hello";
                string body = "Hello, how are you?";
                MailMessage message = new MailMessage(from, to, subject, body);
                SmtpClient client = new SmtpClient("Smtp.somedomain.com");                
                client.Username = "somebody";
                client.Password = "password";
                client.Send(message);
            </code>
             [VB.NET]
            <code>
               Dim to As String = "onebody@somedomain.com" 
               Dim from As String = "somebody@somedomain.com" 
               Dim subject As String = "Say Hello" 
               Dim body As String = "Hello, how are you?" 
               Dim message As MailMessage = New MailMessage(from, to, subject, body) 
               Dim client As SmtpClient = New SmtpClient("Smtp.somedomain.com") 
               client.Username = "somebody"
               client.Password = "password"
               client.Send(message)
            </code>
            </example>
            <param name="host">A String that contains the name or IP address of the host computer used for SMTP transactions.</param>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpClient.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the SmtpClient class that sends e-mail by using the specified SMTP server and port. 
            </summary>
            <remarks>
            The host and port parameters set the value of the Host and Port properties, respectively.
            </remarks>
            <example>
            The following code example demonstrates calling this constructor.
            [C#]        
            <code>
                string to = "onebody@somedomain.com";
                string from = "somebody@somedomain.com";
                string subject = "Say Hello";
                string body = "Hello, how are you?";
                MailMessage message = new MailMessage(from, to, subject, body);
                SmtpClient client = new SmtpClient("Smtp.somedomain.com", 25);                
                client.Username = "somebody";
                client.Password = "password";
                client.Send(message);
            </code>
             [VB.NET]
            <code>
               Dim to As String = "onebody@somedomain.com" 
               Dim from As String = "somebody@somedomain.com" 
               Dim subject As String = "Say Hello" 
               Dim body As String = "Hello, how are you?" 
               Dim message As MailMessage = New MailMessage(from, to, subject, body) 
               Dim client As SmtpClient = New SmtpClient("Smtp.somedomain.com", 25) 
               client.Username = "somebody"
               client.Password = "password"
               client.Send(message)
            </code>
            </example>
            <param name="host">A String that contains the name or IP address of the host used for SMTP transactions.</param>
            <param name="port">An Int32 greater than zero that contains the port to be used on host.</param>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpClient.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the SmtpClient class. 
            </summary>
            <remarks>
            The host , username and password parameters set the value of the Host, Username, and Password properties, respectively.
            </remarks>
            <example>
            The following code example demonstrates calling this constructor.
            [C#]        
            <code>
                string to = "onebody@somedomain.com";
                string from = "somebody@somedomain.com";
                string subject = "Say Hello";
                string body = "Hello, how are you?";
                MailMessage message = new MailMessage(from, to, subject, body);
                SmtpClient client = new SmtpClient("Smtp.somedomain.com", "somebody", "password");                
                client.Send(message);
            </code>
             [VB.NET]
            <code>
               Dim to As String = "onebody@somedomain.com" 
               Dim from As String = "somebody@somedomain.com" 
               Dim subject As String = "Say Hello" 
               Dim body As String = "Hello, how are you?" 
               Dim message As MailMessage = New MailMessage(from, to, subject, body) 
               Dim client As SmtpClient = New SmtpClient("Smtp.somedomain.com", "somebody", "password") 
               client.Send(message)
            </code>
            </example>
            <param name="host">A String that contains the name or IP address of the host used for SMTP transactions.</param>
            <param name="username">A String that contains the username for SMTP server authentication.</param>
            <param name="password">A String that contains the password for SMTP authentication</param>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpClient.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the SmtpClient class. 
            </summary>
            <remarks>
            <para>The host , port, username and password parameters set the value of the Host, Port, Username, and Password properties, respectively.</para>
            <para>The default Smtp server port is 25.</para>
            </remarks>
            <example>
            The following code example demonstrates calling this constructor.
            [C#]        
            <code>
                string to = "onebody@somedomain.com";
                string from = "somebody@somedomain.com";
                string subject = "Say Hello";
                string body = "Hello, how are you?";
                MailMessage message = new MailMessage(from, to, subject, body);        
                SmtpClient client = new SmtpClient("Smtp.somedomain.com", 25, "somebody", "password");                
                client.Send(message);
            </code>
             [VB.NET]
            <code>
               Dim to As String = "onebody@somedomain.com" 
               Dim from As String = "somebody@somedomain.com" 
               Dim subject As String = "Say Hello" 
               Dim body As String = "Hello, how are you?" 
               Dim message As MailMessage = New MailMessage(from, to, subject, body) 
               Dim client As SmtpClient = New SmtpClient("Smtp.somedomain.com", 25, "somebody", "password") 
               client.Send(message)
            </code>
            </example>
            <param name="host">A String that contains the name or IP address of the host used for SMTP transactions.</param>
            <param name="port">An Int32 greater than zero that contains the port to be used on host.</param>
            <param name="username">A String that contains the username for SMTP server authentication.</param>
            <param name="password">A String that contains the password for SMTP authentication</param>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpClient.Send(Aspose.Network.Mail.MailMessage)">
             <summary>
             Sends the specified message to an SMTP server for delivery. 
             </summary>
             <param name="message">A MailMessage that contains the message to send.</param>
             <remarks>
             This method blocks while the e-mail is transmitted. You can specify a time-out value using the Timeout property to ensure that the method returns after a specified amount of time elapses.
            
             Before calling this method, the Host and Port properties must be set by passing this information into the SmtpClient(String,Int32) constructor. 
             
             You cannot call this method if there is a message being sent asynchronously.
             </remarks>
             <example>
             The following code example demonstrates using this method.
             [C#]
             <code>
                MailMessage msg = new MailMessage();
                msg.From = "somebody@somedomain.com";
                msg.To = "onebody@somedomain.com, onebody2@somedomain.com";
                msg.Subject = "Hello, Smtp";
                msg.TextBody = "Send e-mail using SmptClient";
                SmtpClient client = new SmtpClient("Smtp.somedomain.com", 25);        
                client.Send(msg);
             </code>
             [VB.NET]
             <code>
                Dim msg As MailMessage = New MailMessage 
                msg.From = "somebody@somedomain.com" 
                msg.To = "onebody@somedomain.com, onebody2@somedomain.com" 
                msg.Subject = "Hello, Smtp" 
                msg.TextBody = "Send e-mail using SmptClient" 
                Dim client As SmtpClient = New SmtpClient("Smtp.somedomain.com", 25) 
                client.Send(msg)
             </code>
             </example>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpClient.Send(Aspose.Network.Mail.MailMessage,Aspose.Network.Mail.MailAddress)">
            <summary>
            Sends the specified message to an SMTP server with specified sender.
            </summary>
            <param name="message">A MailMessage that contains the message to send.</param>
            <param name="sender">The sender address that uses to talk to smtp server.</param>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpClient.Send(System.String,System.String,System.String,System.String)">
             <summary>
             Sends the specified e-mail message to an SMTP server for delivery. The message sender, recipients, subject, and message body are specified using String objects. 
             </summary>
             <param name="from">A String that contains the address information of the message sender.</param>
             <param name="recipients">A String that contains the addresses that the message is sent to.</param>
             <param name="subject">A String that contains the subject line for the message.</param>
             <param name="body">A String that contains the message body.</param>
             <remarks>
             This method blocks while the e-mail is transmitted. You can specify a time-out value using the Timeout property to ensure that the method returns after a specified amount of time elapses.
            
             Before calling this method, the Host and Port properties must be set by passing this information into the SmtpClient(String,Int32) constructor. 
             
             You cannot call this method if there is a message being sent asynchronously.
             </remarks>
             <example>
             The following code example demonstrates using this method.
             [C#]
             <code>
                SmtpClient client = new SmtpClient("Smtp.youdomain.com", 25);
                //ignore authentication
                client.AuthenticationMethod = SmtpAuthentication.None;
                client.Send("from@youdomain.com", "receipt1@youdomain.com, receipt2@youdomain.com", "Hello, Smtp", "Send e-mail using SmptClient");
             </code>
             [VB.NET]
             <code>
             </code>
             </example>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpClient.SendAsync(Aspose.Network.Mail.MailMessage,System.Object)">
            <summary>
            Sends the specified e-mail message to an SMTP server for delivery. This method does not block the calling thread and allows the caller to pass an object to the method that is invoked when the operation completes. 
            </summary>
            <remarks>
            <para>To receive notification when the e-mail has been sent or the operation has been canceled, add an event handler to the SendCompleted event. You can cancel a SendAsync operation by calling the SendAsyncCancel method. </para>
            <para>After calling SendAsync, you must wait for the e-mail transmission to complete before attempting to send another e-mail message using Send or SendAsync.</para>
            <para>Before calling this method, the Host and Port must be set properly.</para>
            <para>Your application can detect a server certificate validation error by examining the Error property passed into the SendCompletedEventHandler delegate.</para>
            <para>The Timeout property does not have any effect on a SendAsync call.</para>
            <para>To send mail and block while it is transmitted to the SMTP server, use one of the Send methods.</para>
            </remarks>
            <example>
            [C#]
            <code>
                public class SimpleAsynchronousExample
                {
                static bool mailSent = false;
                private static void SendCompletedCallback(object sender, AsyncCompletedEventArgs e)
                {
                // Get the unique identifier for this asynchronous operation.
                String token = (string) e.UserState;
                
                if (e.Cancelled)
                {
                Console.WriteLine("[{0}] Send canceled.", token);
                }
                if (e.Error != null)
                {
                Console.WriteLine("[{0}] {1}", token, e.Error.ToString());
                } else
                {
                Console.WriteLine("Message sent.");
                }
                mailSent = true;
                }
            
                public static void Main(string[] args)
                {
                 //create smtp client
                SmtpClient client = new SmtpClient("Smtp.somedomain.com", 25, "someone", "password");
            
                // Specify the e-mail sender.        
                MailAddress from = new MailAddress("someone@somedomain.com", "Mr. Someone");
            
                // Set destinations for the e-mail message.
                MailAddress to = new MailAddress("somebody@somedomain.com");
            
                // Specify the message content.
                MailMessage message = new MailMessage(from, to);
                message.TextBody = "Hello, how are you?";        
                message.Subject = "Say hello";        
            
                // Set the method that is called back when the send operation ends.
                client.SendCompleted += new 
                SendCompletedEventHandler(SendCompletedCallback);
            
                // The userState can be any object that allows your callback 
                // method to identify this send operation.
                // For this example, the userToken is a string constant.
                string userState = "test message1";
                client.SendAsync(message, userState);
                Console.WriteLine("Sending message... press c to cancel mail. Press any other key to exit.");
                string answer = Console.ReadLine();
                // If the user canceled the send, and mail hasn't been sent yet,
                // then cancel the pending operation.
                if (answer.StartsWith("c") &amp;&amp; mailSent == false)
                {
                client.SendAsyncCancel();
                }
                // Clean up.
                message.Dispose();
                Console.WriteLine("Goodbye.");
                }
                }
                }
            </code>
            </example>
            <param name="message">A MailMessage that contains the message to send.</param>
            <param name="userToken">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpClient.SendAsync(Aspose.Network.Mail.MailMessage)">
            <summary>
            Sends the specified e-mail message to an SMTP server for delivery. This method does not block the calling thread and allows the caller to pass an object to the method that is invoked when the operation completes. 
            </summary>
            <remarks>
            <para>To receive notification when the e-mail has been sent or the operation has been canceled, add an event handler to the SendCompleted event. You can cancel a SendAsync operation by calling the SendAsyncCancel method. </para>
            <para>After calling SendAsync, you must wait for the e-mail transmission to complete before attempting to send another e-mail message using Send or SendAsync.</para>
            <para>Before calling this method, the Host and Port must be set properly.</para>
            <para>Your application can detect a server certificate validation error by examining the Error property passed into the SendCompletedEventHandler delegate.</para>
            <para>The Timeout property does not have any effect on a SendAsync call.</para>
            <para>To send mail and block while it is transmitted to the SMTP server, use one of the Send methods.</para>
            </remarks>
            <example>
            [C#]
            <code>
                public class SimpleAsynchronousExample
                {
                static bool mailSent = false;
                private static void SendCompletedCallback(object sender, AsyncCompletedEventArgs e)
                {
                // Get the unique identifier for this asynchronous operation.
                String token = (string) e.UserState;
                
                if (e.Cancelled)
                {
                Console.WriteLine("[{0}] Send canceled.", token);
                }
                if (e.Error != null)
                {
                Console.WriteLine("[{0}] {1}", token, e.Error.ToString());
                } else
                {
                Console.WriteLine("Message sent.");
                }
                mailSent = true;
                }
            
                public static void Main(string[] args)
                {
                 //create smtp client
                SmtpClient client = new SmtpClient("Smtp.somedomain.com", 25, "someone", "password");
            
                // Specify the e-mail sender.        
                MailAddress from = new MailAddress("someone@somedomain.com", "Mr. Someone");
            
                // Set destinations for the e-mail message.
                MailAddress to = new MailAddress("somebody@somedomain.com");
            
                // Specify the message content.
                MailMessage message = new MailMessage(from, to);
                message.TextBody = "Hello, how are you?";        
                message.Subject = "Say hello";        
            
                // Set the method that is called back when the send operation ends.
                client.SendCompleted += new 
                SendCompletedEventHandler(SendCompletedCallback);
            
                // The userState can be any object that allows your callback 
                // method to identify this send operation.
                // For this example, the userToken is a string constant.
                string userState = "test message1";
                client.SendAsync(message, userState);
                Console.WriteLine("Sending message... press c to cancel mail. Press any other key to exit.");
                string answer = Console.ReadLine();
                // If the user canceled the send, and mail hasn't been sent yet,
                // then cancel the pending operation.
                if (answer.StartsWith("c") &amp;&amp; mailSent == false)
                {
                client.SendAsyncCancel();
                }
                // Clean up.
                message.Dispose();
                Console.WriteLine("Goodbye.");
                }
                }
                }
            </code>
            </example>
            <param name="message">A MailMessage that contains the message to send.</param>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpClient.SendAsync(System.String,System.String,System.String,System.String,System.Object)">
            <summary>
            Sends an e-mail message to an SMTP server for delivery. 
            The message sender, recipients, subject, and message body are specified using String objects. 
            This method does not block the calling thread and allows the caller to pass an object to the method that is invoked when the operation completes. 
            </summary>
            <param name="from">A String that contains the address information of the message sender.</param>
            <param name="recipients">A String that contains the address that the message is sent to.</param>
            <param name="subject">A String that contains the subject line for the message.</param>
            <param name="body">A String that contains the message body.</param>
            <param name="userToken">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpClient.SendAsyncCancel">
            <summary>
            Cancels an asynchronous operation to send an e-mail message. 
            </summary>
            <remarks>
            Use the SendAsyncCancel method to cancel a pending SendAsync operation. 
            If there is an E-Mail waiting to be sent, this method releases resources used to store the mail. 
            If there is no E-Mail waiting to be sent, this method does nothing. 
            </remarks>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpClient.BulkSend(Aspose.Network.Mail.MailMessageCollection)">
            <summary>
            Bulk send a boundle of E-Mail messages.
            </summary>
            <param name="messages">The E-Mail Messages to be sent.</param>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpClient.BulkSendAsync(Aspose.Network.Mail.MailMessageCollection)">
            <summary>
            Bulk send a boundle of E-Mail messages.
            </summary>
            <param name="messages">The E-Mail Messages to be sent.</param>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpClient.BulkSendAsync(Aspose.Network.Mail.MailMessageCollection,System.Object)">
            <summary>
            Bulk send a boundle of E-Mail messages.
            </summary>
            <param name="messages">The E-Mail Messages to be sent.</param>
            <param name="userToken">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpClient.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Appender, and optionally disposes of the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to releases only unmanaged resources.</param>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpClient.Clone">
            <summary>
            Clones a new instance of SmtpClient.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpClient.BeginSend(Aspose.Network.Mail.MailMessage,System.AsyncCallback,System.Object)">
            <summary>
            Begin Sending mail message, paired with EndSend method
            </summary>
            <param name="message">the message to be sent</param>
            <param name="callback">the method you want to call when send complete</param>
            <param name="state">object state</param>
            <returns>An IAsyncResult that references the asynchronous operation.</returns>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpClient.BeginBulkSend(Aspose.Network.Mail.MailMessageCollection,System.AsyncCallback,System.Object)">
            <summary>
            Begin sending a bulk of mail messages, paired with EndBulkSend
            </summary>
            <param name="messages">the message collection you want to send</param>
            <param name="callback">the method you want to call when send complete</param>
            <param name="state">object state</param>
            <returns>An IAsyncResult that references the asynchronous operation.</returns>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpClient.BeginSend(System.String,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begin Sending a custom mail message
            </summary>
            <param name="from">Sender's address</param>
            <param name="recipients">Receiver's address(s)</param>
            <param name="subject">Subject of the mail message</param>
            <param name="body">Body of the mail message</param>
            <param name="callback">the method you want to call when send complete</param>
            <param name="state">object state</param>
            <returns>An IAsyncResult that references the asynchronous operation.</returns>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpClient.EndSend(System.IAsyncResult)">
            <summary>
            End async request ofsending message, paired with BeginSend method
            </summary>
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpClient.EndBulkSend(System.IAsyncResult)">
            <summary>
            End async request ofsending a bulk of message, paired with BeginBulkSend
            </summary>
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="E:Aspose.Network.Mail.SmtpClient.RecipientRejected">
            <summary>
            Occurs if a receipient is rejected by the Smtp Server.
            </summary>
        </member>
        <member name="E:Aspose.Network.Mail.SmtpClient.SendCompleted">
            <summary>
            Occurs if the an asynchronous message send operation is completed.
            </summary>
        </member>
        <member name="E:Aspose.Network.Mail.SmtpClient.BulkSendCompleted">
            <summary>
            Occurs if the an asynchronous BulkSend operation is completed.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.SmtpClient.Username">
            <summary>
            Gets or sets the username.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.SmtpClient.Password">
            <summary>
            Gets or sets the password.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.SmtpClient.Encoding">
            <summary>
            Gets or sets the encoding method
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.SmtpClient.PickupDirectoryLocation">
            <summary>
            Gets or sets the folder where applications save mail messages to be processed by the local SMTP server. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.SmtpClient.DeliveryMethod">
            <summary>
            Specifies how outgoing email messages will be handled. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.SmtpClient.State">
            <summary>
            The ConnectionState 
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.SmtpClient.AuthenticationMethod">
            <summary>
            Specifies what mechanism used to authenticate the username and password against SMTP server. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.SmtpClient.EnableSsl">
            <summary>
            Specify whether the SmtpClient uses Secure Sockets Layer (SSL) to encrypt the connection.
            </summary>
            <example>
            <p>The following code example establishes an SSL connection with the SMTP server and uses the connection to send an email.</p>
            [C#]
            <code>
               MailMessage msg = new MailMessage();
               msg.From = "somebody@gmail.com";
               msg.To = "onebody@gmail.com";
               msg.Subject = "Hello";
               msg.TextBody = "Hello, nice to know you!";            
               SmtpClient client = new SmtpClient("smtp.gmail.com", 587, "somebody@gmail.com","password");
               client.AuthenticationMethod = SmtpAuthentication.Auto;
               client.SecurityMode = SmtpSslSecurityMode.Explicit;
               client.EnableSsl = true;
               client.Send(msg);
            </code>
            [VB.NET]
            <code>
               Dim to As String = "onebody@gmail.com" 
               Dim from As String = "somebody@gmail.com" 
               Dim subject As String = "Say Hello" 
               Dim body As String = "Hello, how are you?" 
               Dim message As MailMessage = New MailMessage(from, to, subject, body) 
               Dim client As SmtpClient = New SmtpClient("smtp.gmail.com", 587, "somebody@gmail.com","password")
               client.AuthenticationMethod = SmtpAuthentication.Auto
               client.SecurityMode = SmtpSslSecurityMode.Explicit
               client.EnableSsl = true
               client.Send(message)
            </code>
            </example>
        </member>
        <member name="P:Aspose.Network.Mail.SmtpClient.SecurityMode">
            <summary>
            Specifies which security mode will be used when Secure Sockets Layer (SSL) to encrypt the connection.
            </summary>
        </member>
        <member name="T:Aspose.Network.Proxy.ConnectCompletedEventArgs">
            <summary>
            Represents the event for onnection completed.
            </summary>
        </member>
        <member name="P:Aspose.Network.Proxy.ConnectCompletedEventArgs.AsyncResult">
            <summary>
            Gets the result of the asynchronous operation requested.
            </summary>
        </member>
        <member name="T:Aspose.Network.Win32.Licensing">
            <summary>
            Represents a root object to license a .Net assembly. 
            </summary>
        </member>
        <member name="M:Aspose.Network.Win32.Licensing.#ctor(System.String[],System.IO.TextReader)">
            <summary>		
            Initializes a new instance of the <see cref="T:Aspose.Network.Win32.Licensing"/> class. 
            </summary>
            <param name="keys">Decryption keys that should be tried to decrypt the license.</param>
            <param name="licenseReader">The reader must use UTF7 encoding.</param>
        </member>
        <member name="M:Aspose.Network.Win32.Licensing.CheckPiracy">
            <summary> 
            Checks if the license file is produced by a hacking program. 
            </summary> 
            <remarks> 
            Anti-piracy is a long term job so this method will be updated once the hacking program updates. 
            </remarks> 
        </member>
        <member name="M:Aspose.Network.Win32.Licensing.CheckManufacturerProduct">
            <summary>
            Checks that license field "Product" matches AssemblyProduct specified
            in AssemblyInfo.cs of this Aspose component.
            If there is no match, checks if the license contains suite members and 
            this component is a member of the suite.
            </summary>
        </member>
        <member name="M:Aspose.Network.Win32.Licensing.CheckManufacturerCompany">
            <summary>
            Checks that license field "Company" matches AssemblyCompany specified
            in AssemblyInfo.cs of this Aspose component.
            </summary>
        </member>
        <member name="M:Aspose.Network.Win32.Licensing.CheckOwnerName">
            <summary>
            Checks the license field "OwnerName".
            </summary>
            <returns>True if the license field "OwnerName" got at run time in your licensed .Net software is equal to that is set at design time in <strong>Aspose.License.Generator</strong>.</returns>
            <remarks>
            At design time, the license field "OwnerName" is set at the <strong>Owner Name</strong> in the <strong>Desktop</strong> tab of <strong>Aspose.License.Generator</strong>. 
            </remarks>
        </member>
        <member name="M:Aspose.Network.Win32.Licensing.CheckOrganizationName">
            <summary>
            Checks the license field "OrganizationName".
            </summary>
            <returns>True if the license field "OrganizationName" got at run time in your licensed .Net software is equal to that is set at design time in <strong>Aspose.License.Generator</strong>.</returns>
            <remarks>
            At design time, the license field "OrganizationName" is set at the <strong>Organization Name</strong> in the <strong>Desktop</strong> tab of <strong>Aspose.License.Generator</strong>. 
            </remarks>
        </member>
        <member name="M:Aspose.Network.Win32.Licensing.CheckAssemblyProduct(System.String)">
            <summary>
            Checks the license field "AssemblyProduct".
            </summary>
            <param name="assemblyFile">The assembly file to be resold.</param>
            <returns>True if the license field "AssemblyProduct" got at run time in your licensed .Net software is equal to that is set at design time in <strong>Aspose.License.Generator</strong>.</returns>
            <remarks>
            At design time, the license field "AssemblyProduct" is set at the <strong>Assembly's Product</strong> in the <strong>Resale</strong> tab of <strong>Aspose.License.Generator</strong>. 
            </remarks>
        </member>
        <member name="M:Aspose.Network.Win32.Licensing.CheckAssemblyCompany(System.String)">
            <summary>
            Checks the license field "AssemblyCompany".
            </summary>
            <param name="assemblyFile">The assembly file to be resold.</param>
            <returns>True if the license field "AssemblyCompany" got at run time in your licensed .Net software is equal to that is set at design time in <strong>Aspose.License.Generator</strong>.</returns>
            <remarks>
            At design time, the license field "AssemblyCompany" is set at the <strong>Assembly's Company</strong> in the <strong>Resale</strong> tab of <strong>Aspose.License.Generator</strong>. 
            </remarks>
        </member>
        <member name="M:Aspose.Network.Win32.Licensing.CheckAssemblyFile(System.String)">
            <summary> 
            Checks the license field "AssemblyFile". 
            </summary> 
            <param name="assemblyFile">The assembly file to be resold.</param> 
            <returns>True if the license field "AssemblyFile" got at run time in your licensed .Net software is equal to that is set at design time in Aspose.Purchase.</returns> 
        </member>
        <member name="M:Aspose.Network.Win32.Licensing.CheckDomainNames(System.String)">
            <summary>
            Checks the license field "DomainNames".
            </summary>
            <param name="url">The url of the page to request to use your .Net software to be licensed.</param>
            <returns>True if the license field "DomainNames" got at run time in your licensed .Net software is equal to that is set at design time in <strong>Aspose.License.Generator</strong>.</returns>
            <remarks>
            At design time, the license field "DomainNames" is set at the <strong>Domain Names</strong> in the <strong>Server</strong> tab of <strong>Aspose.License.Generator</strong>. 
            </remarks>
        </member>
        <member name="M:Aspose.Network.Win32.Licensing.CheckIpAddresses(System.String)">
            <summary>
            Checks the license field "IpAddresses".
            </summary>
            <param name="machineName">The machine name of the server to host your .Net software to be licensed.</param>
            <returns>True if the license field "IpAddresses" got at run time in your licensed .Net software is equal to that is set at design time in <strong>Aspose.License.Generator</strong>.</returns>
            <remarks>
            At design time, the license field "IpAddresses" is set at the <strong>Ip Addresses</strong> in the <strong>Server</strong> tab of <strong>Aspose.License.Generator</strong>. 
            </remarks>				
        </member>
        <member name="M:Aspose.Network.Win32.Licensing.CheckCPUs">
            <summary>
            Checks the license field "CPUs".
            </summary>		
            <returns>True if the license field "CPUs" got at run time in your licensed .Net software is equal to that is set at design time in <strong>Aspose.License.Generator</strong>.</returns>
            <remarks>
            At design time, the license field "CPUs" is set at the <strong>CPUs</strong> in the <strong>Server</strong> tab of <strong>Aspose.License.Generator</strong>. 
            </remarks>						
        </member>
        <member name="M:Aspose.Network.Win32.Licensing.GetLicenseField(System.String)">
             <summary>
             Gets the specific field from the license file.The license fields can be
             anyone of following lists: "Company","Product","Version",
             "OrganizationName","OwnerName","LicenseName","AssemblyCompany",
             "AssemblyProduct","AssemblyVersion","CPUs","DomainNames","StartingTime",
             "LastTime","ExpiredDate","ExpiredDays","OperationTimes"
              and all the custom defined fields.Note that if the watermark of the 
              evaluation edition has been changed,null will be returned.
             </summary>
             <remarks>Following are the meanings of the fields:
             "Company":the company name that develops the component or 
             the application.
             "Product":the product name of the developed component or the application.
             "Version":the version of the developed component or the application.
             "OrganizationName":the organization name of the computer that can be 
             found by the process:My Computer->Property->General.
             "OwnerName":the user name of the computer that can be found by the 
             process: My Computer->Property->General.
             "LicenseName":the license name of a specific license.It can be one of
             the LicenseName.
             "EditionName":the edition name of a specific license.It can be one of
             the EditionName.		
             "AssemblyCompany":the company name of the application or component that uses
              the component that is licensed by the Licenser system.
             "AssemblyProduct":the product name of the application or component that uses 
             the component that is licensed by the Licenser system.
             "AssemblyVersion": the version of the application or component that uses the
             component that is licensed by the Licenser system.
             "CPUs":the maximum Cpu numbers of the computer where the licensed 
             application or component is run.
             "DomainNames":the domain name of the website that the licensed application
             or component is run.
             "StartingTime": the first setup time of your application software 
             at  your user's computer.An random value can be given to it when
             you construct the license file and it will be modified automatically by the 
             Aspose.License system after your application software setup.
             "LastTime": the time that your application software setup last time at your 
             user's computer.An random value can be given to it when you construct 
             the license file  and it will be modified automatically by the 
             Aspose.License system after your application software setup.
             "ExpiredDate": the date that your application software will expire.
            "ExpiredDays": the relative days that your application software 
            will expire from the first setup time.OperationTimes records if your 
            application software operates for the first time in your user's computer.
            0 will be given to it when you construct the license file.</remarks>
             <param name="field">the field name that is stored in the license file.</param>
             <returns>the string of the corresponding field value that is stored in 
             the license file.When the license file or the key content is not valid,
             null will be returned except the case that the field name is "LicenseName",
             in this case,the returned value will be "Evalution".</returns>
              <example>Refer to the example of other classes.</example>
        </member>
        <member name="M:Aspose.Network.Win32.Licensing.GetLicenseName">
            <summary>
            Have to use functions because property names are not obfuscated for some reason.
            </summary>
        </member>
        <member name="M:Aspose.Network.Win32.Licensing.SimpleEncode(System.String)">
            <summary>
            Simple encrypt/decrypt algorithm.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.Network.Win32.Licensing.TryDecryptString(System.String,System.String,System.String@)">
            <summary>
            Somewhat a hack because we don't know what decryption key to use for suite licenses.
            It was found that decrypting a license with a wrong key typically throws an exception
            so I use to return false - means wrong key.
            </summary>
        </member>
        <member name="M:Aspose.Network.Win32.Licensing.DecryptString(System.String,System.String)">
            <summary>
            Decrypts an encrypted string.
            </summary>
            <param name="keyFileContent">decryption key</param>
            <param name="encryptedString">the encrypted string that will be decrypted</param>
            <returns>the decrypted string</returns>
        </member>
        <member name="M:Aspose.Network.Win32.Licensing.NDecrypt(System.Byte[],System.Byte)">
            <summary>
            Decrypts a set of binery numbers based upon a given key.
            </summary>
            <param name="toBeEncrypt">A set of strings that will to be encrypted. </param>
            <param name="key">the value less than 256  that is used in the decryption process.</param>
            <returns>A string representing the decrypted number.</returns>
        </member>
        <member name="M:Aspose.Network.Win32.Licensing.RightCyclingShiftBit(System.Byte,System.Int32)">
            <summary>
            Shifts rightwardly a byte several bits.
            </summary>
            <param name="objectByte">the byte that is to be shifted rightwardly.</param>
            <param name="shiftValue">the value of bits that is to be shifted</param>
            <returns>the resulted byte after the shift operation </returns>
        </member>
        <member name="T:Aspose.Network.Ftp.TransferStatus">
            <summary>
            Represents the status of the transfering. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Ftp.TransferStatus.Uploading">
            <summary>
            Uploading data to the Ftp server.
            </summary>
        </member>
        <member name="F:Aspose.Network.Ftp.TransferStatus.Downloading">
            <summary>
            Downloading data from the Ftp server.
            </summary>
        </member>
        <member name="T:Aspose.Network.Ftp.ListItemType">
            <summary>
            Represents the type of list item.
            </summary>
        </member>
        <member name="F:Aspose.Network.Ftp.ListItemType.Directory">
            <summary>
            Direcotry.
            </summary>
        </member>
        <member name="F:Aspose.Network.Ftp.ListItemType.File">
            <summary>
            File.
            </summary>
        </member>
        <member name="F:Aspose.Network.Ftp.ListItemType.SoftLink">
            <summary>
            Soft link.
            </summary>
        </member>
        <member name="T:Aspose.Network.Exchange.ContentClassType">
            <summary>
            Represents the content class type of exchange server items.
            </summary>
        </member>
        <member name="M:Aspose.Network.Exchange.ContentClassType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ContentClassType class.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Aspose.Network.Exchange.ContentClassType.ToString">
            <summary>
            Overridden. Returns a string representation of this instance. 
            </summary>
            <returns>A string contains the mail addresse.</returns>
        </member>
        <member name="P:Aspose.Network.Exchange.ContentClassType.Activity">
            <summary>
            Activity type.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ContentClassType.Appointment">
            <summary>
            Appointment type.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ContentClassType.CalendarFolder">
            <summary>
            CalendarFolder type.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ContentClassType.CalendarMessage">
            <summary>
            CalendarMessage type.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ContentClassType.ContactFolder">
            <summary>
            ContactFolder type.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ContentClassType.Document">
            <summary>
            Document type.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ContentClassType.DSN">
            <summary>
            DSN type.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ContentClassType.Folder">
            <summary>
            Folder type.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ContentClassType.Group">
            <summary>
            Group type.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ContentClassType.JournalFolder">
            <summary>
            JournalFolder type.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ContentClassType.MailFolder">
            <summary>
            MailFolder type.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ContentClassType.MDN">
            <summary>
            MDN type.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ContentClassType.Message">
            <summary>
            Message type.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ContentClassType.Note">
            <summary>
            Note type.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ContentClassType.NoteFolder">
            <summary>
            NoteFolder type.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ContentClassType.Person">
            <summary>
            Person type.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ContentClassType.RecallMesage">
            <summary>
            RecallMesage type.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ContentClassType.RecallReport">
            <summary>
            RecallReport type.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ContentClassType.ReportMessage">
            <summary>
            ReportMessage type.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ContentClassType.Task">
            <summary>
            Task type.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ContentClassType.TaskFolder">
            <summary>
            TaskFolder type.
            </summary>
        </member>
        <member name="T:Aspose.Network.Exchange.ExchangeMessageInfo">
            <summary>
            The ExchangeMessageInfo represents the E-Mail message info fetched from the Exchange Store.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ExchangeMessageInfo.CC">
            <summary>
            Gets CC of the E-Mail message.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ExchangeMessageInfo.From">
            <summary>
            Gets the From of the E-Mail message.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ExchangeMessageInfo.Subject">
            <summary>
            Gets the Subject of the E-Mail message.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ExchangeMessageInfo.To">
            <summary>
            Gets the receiptants of the E-Mail message.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ExchangeMessageInfo.UniqueUri">
            <summary>
            Gets the Unique Id of the E-Mail message.
            </summary>
        </member>
        <member name="T:Aspose.Network.Dns.X25ResourceRecord">
            <summary>
            Represents a X25 DNS resource record
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.X25ResourceRecord.#ctor">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.X25ResourceRecord">X25ResourceRecord</see>.
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.X25ResourceRecord.#ctor(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.X25ResourceRecord">X25ResourceRecord</see>.
            </summary>
            <param name="buffer">The arry of unsigned bytes from which to create.</param>
            <param name="index">The index into buffer at which this resource record begins</param>
            <param name="count">The length of the bytes to create this resource record</param>
        </member>
        <member name="P:Aspose.Network.Dns.X25ResourceRecord.PSDNAddress">
            <summary>
            Gets or sets the PSDN address
            </summary>
        </member>
        <member name="T:Aspose.Network.Dns.NSAPResourceRecord">
            <summary>
            Represents a NSAP DNS resource record
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.NSAPResourceRecord.#ctor">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.NSAPResourceRecord">NSAPResourceRecord</see>.
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.NSAPResourceRecord.#ctor(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.NSAPResourceRecord">NSAPResourceRecord</see>.
            </summary>
            <param name="buffer">The arry of unsigned bytes from which to create.</param>
            <param name="index">The index into buffer at which this resource record begins</param>
            <param name="count">The length of the bytes to create this resource record</param>
        </member>
        <member name="P:Aspose.Network.Dns.NSAPResourceRecord.NSAPAddress">
            <summary>
            Gets or sets the NSA address
            </summary>
        </member>
        <member name="T:Aspose.Network.Mime.MimeException">
            <summary>
            Represents the exception thrown in parsing MIME files.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mime.MimeException.#ctor">
            <summary>
            Inistializes a new instance of MimeException class.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mime.MimeException.#ctor(System.String)">
            <summary>
            Inistializes a new instance of MimeException class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Aspose.Network.Mime.MimeException.#ctor(System.String,System.Exception)">
            <summary>
            Inistializes a new instance of MimeException class.
            </summary>
            <param name="message">The error message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="P:Aspose.Network.Mime.MimeException.Message">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="T:Aspose.Network.Security.Cryptography.X509Certificates.X509Extension">
            <summary>
            Represents an X509 extension.
            </summary>
        </member>
        <member name="M:Aspose.Network.Security.Cryptography.X509Certificates.X509Extension.#ctor(System.String,System.Byte[],System.Boolean)">
            <summary>
            Initializes a new instance of the X509Extension class.
            </summary>
            <param name="oid">The object identifier used to identify the extension.</param>
            <param name="rawData">The non-encoded data used to create the extension.</param>
            <param name="critical">true if the extension is critical; otherwise false.</param>
        </member>
        <member name="P:Aspose.Network.Security.Cryptography.X509Certificates.X509Extension.Critical">
            <summary>
            Gets a Boolean value indicating whether the extension is critical.
            </summary>
        </member>
        <member name="M:Aspose.Network.Template.TemplateLexer.ReadWhitespace">
            <summary>
            reads all whitespace characters (does not include newline)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.Network.Template.TemplateLexer.StartRead">
            <summary>
            save read point positions so that CreateToken can use those
            </summary>
        </member>
        <member name="M:Aspose.Network.Template.TemplateLexer.ReadId">
            <summary>
            reads word. Word contains any alpha character or _
            </summary>
        </member>
        <member name="M:Aspose.Network.Template.TemplateLexer.ReadNumber">
            <summary>
            returns either Integer or Double Token
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aspose.Network.Mail.SmtpRecipientRejectedEventArgs">
            <summary>
            Provides data for the SmtpRecipientRejected event.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.SmtpRecipientRejectedEventArgs.Ignore">
            <summary>
            Indicates whether to ignore the reject.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.SmtpRecipientRejectedEventArgs.Recipient">
            <summary>
            Gets the recipient being rejected.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.SmtpRecipientRejectedEventArgs.Response">
            <summary>
            Gets the smtp server response.
            </summary>
        </member>
        <member name="T:Aspose.Network.Mail.SmtpDeliveryMethod">
            <summary>
            delivery method using by SmtpClient
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.SmtpDeliveryMethod.Network">
            <summary>
            email is sent through network
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.SmtpDeliveryMethod.SpecifiedPickupDirectory">
            <summary>
            email is copied to a folder and sent by external service
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.SmtpDeliveryMethod.PickupDirectoryFromIis">
            <summary>
            email is copied to a folder and sent by IIS service 
            </summary>
        </member>
        <member name="T:Aspose.Network.Proxy.ProxyType">
            <summary>
            Represents the type of proxy.
            </summary>
        </member>
        <member name="F:Aspose.Network.Proxy.ProxyType.None">
            <summary>
            Direct connection without proxying
            </summary>
        </member>
        <member name="F:Aspose.Network.Proxy.ProxyType.Socks4">
            <summary>
            Socks 4 Protocol compatible proxy.
            </summary>
        </member>
        <member name="F:Aspose.Network.Proxy.ProxyType.Socks4A">
            <summary>
            Socks 4A Protocol compatible proxy.
            </summary>
        </member>
        <member name="F:Aspose.Network.Proxy.ProxyType.Socks5">
            <summary>
            Socks 5 Protocol compatible proxy.
            </summary>
        </member>
        <member name="F:Aspose.Network.Proxy.ProxyType.HttpConnect">
            <summary>
            Http proxy.
            </summary>
        </member>
        <member name="T:Aspose.Network.Logging.LoggerDictionary">
            <summary>
            
            </summary>
        </member>
        <member name="M:Aspose.Network.Logging.LoggerDictionary.#ctor">
            <summary>
            Initializes a new instance of the LoggerDictionaryclass.
            </summary>
        </member>
        <member name="T:Aspose.Network.Ftp.TransferBrokenEventHandler">
            <summary>
            Represents the event handler for TransferBrokenEvent.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:Aspose.Network.Ftp.FtpClient">
            <summary>
            Implements a File Transfer Protocol (FTP) client.
            </summary>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.#ctor">
            <summary>
            Initialize a new instance of the class <see cref="T:Aspose.Network.Ftp.FtpClient"/>.
            </summary>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.#ctor(System.String)">
            <summary>
            Initialize a new instance of the class <see cref="T:Aspose.Network.Ftp.FtpClient"/>.
            </summary>
            <param name="host">The host address of the Ftp server.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.#ctor(System.String,System.Int32)">
            <summary>
            Initialize a new instance of the class <see cref="T:Aspose.Network.Ftp.FtpClient"/>.
            </summary>
            <param name="host">The host address of the Ftp server.</param>
            <param name="port">The port of the Ftp server.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.#ctor(System.String,System.String,System.String)">
            <summary>
            Initialize a new instance of the class <see cref="T:Aspose.Network.Ftp.FtpClient"/>.
            </summary>
            <param name="host">The host address of the Ftp server.</param>
            <param name="username">The username to log in the Ftp server.</param>
            <param name="password">The password to log in the Ftp server.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Initialize a new instance of the class <see cref="T:Aspose.Network.Ftp.FtpClient"/>.
            </summary>
            <param name="host">The host address of the Ftp server.</param>
            <param name="port">The port of the Ftp server.</param>
            <param name="username">The username to log in the Ftp server.</param>
            <param name="password">The password to log in the Ftp server.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.Abort">
            <summary>
            Stops the operations with the FTP server.
            </summary>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.BeginAbort(System.Object,System.AsyncCallback)">
            <summary>
            Asynchronously stops the operations with the FTP server. 
            </summary>
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.EndAbort(System.IAsyncResult)">
            <summary>
            Ends an asynchronous abort process.
            </summary>		
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.GetCurrentDirectory">
            <summary>
            Gets the current working directory.
            </summary>
            <returns>The current working directory.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.BeginGetCurrentDirectory(System.Object,System.AsyncCallback)">
            <summary>
            Asynchronously gets the current working direcotry. 
            </summary>
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.EndGetCurrentDirectory(System.IAsyncResult)">
            <summary>
            Ends an asynchronous process for getting the current working directory.
            </summary>		
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.ChangeDirectory(System.String)">
            <summary>
            Changes the current working directory to specified path.
            </summary>
            <param name="remotePath">The remote path.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.BeginChangeDirectory(System.String,System.Object,System.AsyncCallback)">
            <summary>
            Asynchronously changes the directory.
            </summary>
            <param name="remotePath">The remote path.</param>
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.EndChangeDirectory(System.IAsyncResult)">
            <summary>
            Ends an asynchronous changing the direcotry.
            </summary>		
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.ChangeDirectoryUp">
            <summary>
            Changes the current working directory up to its parent directory.
            </summary>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.BeginChangeDirectoryUp(System.Object,System.AsyncCallback)">
            <summary>
            Asynchronously changes the directory up to its parent.
            </summary>
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.EndChangeDirectoryUp(System.IAsyncResult)">
            <summary>
            Ends an asynchronous process for changing the directory up.
            </summary>		
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.Exists(System.String)">
            <summary>
            Determines whether the romote path exists or not.
            </summary>
            <param name="remotePath">The remote path to be tested.</param>
            <returns>True if te remote path is existing; otherwise false.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.BeginExists(System.String,System.Object,System.AsyncCallback)">
            <summary>
            Asynchronously determines whether the path exists.
            </summary>
            <param name="remotePath">The remote path.</param>
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.EndExists(System.IAsyncResult)">
            <summary>
            Ends an asynchronous process for determining whether the path exists.
            </summary>		
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
            <returns>True if te remote path is existing; otherwise false.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.ListDirectoryDetails(System.String)">
            <summary>
            Lists the details of the specified remote path on the Ftp server.
            </summary>
            <param name="remotePath">The remote path on the Ftp server</param>
            <returns>The collection of <see cref="T:Aspose.Network.Ftp.ListItem"/> in the remote path.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.ListDirectoryDetails">
            <summary>
            Lists the details of the current working directory on the Ftp server.
            </summary>
            <returns>The collection of <see cref="T:Aspose.Network.Ftp.ListItem"/> in the working path.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.BeginListDirectoryDetails(System.String,System.Object,System.AsyncCallback)">
            <summary>
            Asynchronously lists the details of the specified remote path.
            </summary>
            <param name="remotePath">The remote path.</param>
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.BeginListDirectoryDetails(System.Object,System.AsyncCallback)">
            <summary>
            Asynchronously lists the details of the working path.
            </summary>
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.EndListDirectoryDetails(System.IAsyncResult)">
            <summary>
            Ends an asynchronous process for listing the directory details.
            </summary>		
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
            <returns>The collection of <see cref="T:Aspose.Network.Ftp.ListItem"/> in the remote path.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.GetModificationTime(System.String)">
            <summary>
            Gets the modification time of the file on the Ftp server.
            </summary>
            <param name="remotePath">The remote path on the Ftp server.</param>
            <returns>The modification time.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.BeginGetModificationTime(System.String,System.Object,System.AsyncCallback)">
            <summary>
            Asynchronously gets the modification time of the specified file.
            </summary>
            <param name="remotePath">The remote path.</param>
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.EndGetModificationTime(System.IAsyncResult)">
            <summary>
            Ends an asynchronous process for getting the modification time.
            </summary>		
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
            <returns>The modification time.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.MakeDirectory(System.String)">
            <summary>
            Creates the specified directory on the Ftp server.
            </summary>
            <param name="remoteDirectoryPath">The remote direcotry path.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.BeginMakeDirectory(System.String,System.Object,System.AsyncCallback)">
            <summary>
            Asynchronously makes a new directory.
            </summary>
            <param name="remoteDirectoryPath">The remote direcotry path.</param>
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.EndMakeDirectory(System.IAsyncResult)">
            <summary>
            Ends an asynchronous process for making a new directory.
            </summary>		
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.AppendFile(System.IO.Stream,System.String)">
            <summary>
            Appends the content of local stream to the file on the Ftp server.
            </summary>
            <param name="sourceStream">The source stream.</param>
            <param name="remotePath">The remote path.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.AppendFile(System.String,System.String)">
            <summary>
            Appends the content of local file to remote file on the Ftp server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.BeginAppendFile(System.String,System.String,System.Object,System.AsyncCallback)">
            <summary>
            Asynchronously appends the content of local file to remote file on the Ftp server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file.</param>
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.BeginAppendFile(System.IO.Stream,System.String,System.Object,System.AsyncCallback)">
            <summary>
            Asynchronously appends the content of local stream to remote file on the Ftp server.
            </summary>
            <param name="sourceStream">The source stream.</param>
            <param name="remotePath">The remote path.</param>
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.EndAppendFile(System.IAsyncResult)">
            <summary>
            Ends an asynchronous process for appending contents to the remote file.
            </summary>		
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.ResetTransferType(Aspose.Network.Ftp.TransferType)">
            <summary>
            Resets the tranfer type.
            </summary>
            <param name="type">The tansfer type to set.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.Upload(System.String,System.String)">
            <summary>
            Uploads the specified local file to the Ftp server.
            </summary>
            <param name="localFilePath">The path of the local file.</param>
            <param name="remoteFilePath">The path of the remote destination.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.UploadMultiFiles(System.String,System.String,System.Boolean)">
            <summary>
            Uploads multiple files.
            </summary>
            <param name="localFolderPath">The local folder.</param>
            <param name="remotePath">The remote path.</param>
            <param name="recursive">Indicates whether to recursive the sub folders.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.Upload(System.IO.Stream,System.String)">
            <summary>
            Uploads the content of the specified local stream to the Ftp server.
            </summary>
            <param name="localStream">The local source stream.</param>
            <param name="remoteFilePath">The path of the remote destination.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.BeginUpload(System.IO.Stream,System.String,System.Object,System.AsyncCallback)">
            <summary>
            Asynchronously uploads the contents of the specified stream to remote file.
            </summary>
            <param name="localStream">The local source stream.</param>
            <param name="remoteFilePath">The path of the remote destination.</param>
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.BeginUpload(System.String,System.String,System.Object,System.AsyncCallback)">
            <summary>
            Asynchronously uploads the contents of the specified file to remote file.
            </summary>
            <param name="localFilePath">The path of the local file.</param>
            <param name="remoteFilePath">The path of the remote destination.</param>
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.EndUpload(System.IAsyncResult)">
            <summary>
            Ends an asynchronous process for uploading.
            </summary>		
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.UploadUnique(System.String)">
            <summary>
            Uploads the contents of the specified file to a uniquely named file on the FTP server.
            </summary>
            <param name="localFilePath">The path of the local file.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.UploadUnique(System.IO.Stream)">
            <summary>
            Uploads the contents of the specified stream to a uniquely named file on the FTP server.
            </summary>
            <param name="localStream">The local source stream.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.BeginUploadUnique(System.String,System.Object,System.AsyncCallback)">
            <summary>
            Asynchronously uploads the contents of the specified stream to remote file with an unique name.
            </summary>
            <param name="localFilePath">The path of the local file.</param>
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.BeginUploadUnique(System.IO.Stream,System.Object,System.AsyncCallback)">
            <summary>
            Asynchronously uploads the contents of the specified file to remote file with an unique name.
            </summary>
            <param name="localStream">The local stream</param>
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.EndUploadUnique(System.IAsyncResult)">
            <summary>
            Ends an asynchronous process for uploading the contents with an unique name.
            </summary>		
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.RemoveDirectory(System.String)">
            <summary>
            Removes the specified directory on the Ftp server.
            </summary>
            <param name="remotePath">The remote directory path.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.BeginRemoveDirectory(System.String,System.Object,System.AsyncCallback)">
            <summary>
            Asynchronously removes the specified directory.
            </summary>
            <param name="remotePath">The remote directory path.</param>
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.EndRemoveDirectory(System.IAsyncResult)">
            <summary>
            Ends an asynchronous process for removing directory.
            </summary>		
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.Rename(System.String,System.String)">
            <summary>
            Renames the specified remote file.
            </summary>
            <param name="oldName">The old name of the remote file.</param>
            <param name="newName">The new name of the remote file.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.BeginRename(System.String,System.String,System.Object,System.AsyncCallback)">
            <summary>
            Asynchronously renames the specified remote file. 
            </summary>
            <param name="oldName">The old name of the remote file.</param>
            <param name="newName">The new name of the remote file.</param>
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.EndRename(System.IAsyncResult)">
            <summary>
            Ends an asynchronous process for renaming the remote file.
            </summary>		
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.Delete(System.String)">
            <summary>
            Deletes the specified file on the Ftp server.
            </summary>
            <param name="remoteFilePath">The path of the remote file.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.BeginDelete(System.String,System.Object,System.AsyncCallback)">
            <summary>
            Asynchronously deletes the specified file on the Ftp server.
            </summary>
            <param name="remoteFilePath">The path of the remote file.</param>
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.EndDelete(System.IAsyncResult)">
            <summary>
            Ends an asynchronous process for deleting the remote file.
            </summary>		
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.Download(System.String,System.String)">
            <summary>
            Downlaods a remote file.
            </summary>
            <param name="remotePath">The remote file path.</param>
            <param name="localPath">The local file name.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.Download(System.String,System.String,System.IO.FileMode)">
            <summary>
            Downlaods a remote file.
            </summary>
            <param name="remotePath">The remote file path.</param>
            <param name="localPath">The local file name.</param>
            <param name="mode">The filemode to create local file.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.Download(System.String,System.String,System.Boolean)">
            <summary>
            Downloads the specified file from the Ftp server.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="localPath">The path of the local file.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.Download(System.String,System.IO.Stream)">
            <summary>
            Downloads the remote file from the Ftp server.
            </summary>
            <param name="remotePath">The remote path.</param>
            <param name="destinationStream">The destination stream.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.BeginDownload(System.String,System.String,System.Object,System.AsyncCallback)">
            <summary>
            Asynchronously downloads the specified file on the Ftp server.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="localPath">The path of the local file.</param>
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.BeginDownload(System.String,System.IO.Stream,System.Object,System.AsyncCallback)">
            <summary>
            Asynchronously downloads the specified file on the Ftp server.
            </summary>
            <param name="remotePath">The remote path.</param>
            <param name="destinationStream">The destination stream.</param>
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.EndDownload(System.IAsyncResult)">
            <summary>
            Ends an asynchronous process for downloading the specified file on the Ftp server.
            </summary>		
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.ResumeDownload(System.String,System.String,System.Int64)">
            <summary>
            Resumes the download process at the specified offset.
            </summary>
            <param name="remotePath">The remote path.</param>
            <param name="destinationPath">The local destination path.</param>
            <param name="offset">The start offset.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.ResumeDownload(System.String,System.String,System.IO.FileMode)">
            <summary>
            Resumes a download operation with specified options.
            </summary>
            <param name="remotePath">The remote file name.</param>
            <param name="destinationPath">The local file name.</param>
            <param name="mode">The file mode to create a local file.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.ResumeDownload(System.String,System.String)">
            <summary>
            Resumes a download operation with specified options.
            </summary>
            <param name="remotePath">The remote file name.</param>
            <param name="destinationPath">The local file name.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.ResumeDownload(System.String,System.IO.Stream,System.Int64)">
            <summary>
            Resumes the download process at the specified offset.
            </summary>
            <param name="remotePath">The remote path.</param>
            <param name="destinationStream">The local destination stream.</param>
            <param name="offset">The start offset.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.BeginResumeDownload(System.String,System.String,System.Int64,System.Object,System.AsyncCallback)">
            <summary>
            Asynchronously resumes the download process.
            </summary>
            <param name="remotePath">The remote path.</param>
            <param name="destinationPath">The local destination path.</param>
            <param name="offset">The start offset.</param>
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.BeginResumeDownload(System.String,System.IO.Stream,System.Int64,System.Object,System.AsyncCallback)">
            <summary>
            Asynchronously resumes the download process.
            </summary>
            <param name="remotePath">The remote path.</param>
            <param name="destinationStream">The local destination stream.</param>
            <param name="offset">The start offset.</param>
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.EndResumeDownload(System.IAsyncResult)">
            <summary>
            Ends an asynchronous process for resuming download.
            </summary>		
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.ResumeUpload(System.String,System.String,System.Int64)">
            <summary>
            Resumes the upload process at the specified offset.
            </summary>
            <param name="localPath">The local file path.</param>
            <param name="destinationPath">The remote destination path.</param>
            <param name="offset">The start offset.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.ResumeUpload(System.IO.Stream,System.String,System.Int64)">
            <summary>
            Resumes the upload process at the specified offset.
            </summary>
            <param name="localStream">The local stream.</param>
            <param name="destinationPath">The remote destination path.</param>
            <param name="offset">The start offset.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.BeginResumeUpload(System.String,System.String,System.Int64,System.Object,System.AsyncCallback)">
            <summary>
            Asynchronously resumes the upload process.
            </summary>
            <param name="localPath">The path of local file.</param>
            <param name="destinationPath">The remote destination path.</param>
            <param name="offset">The start offset.</param>
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.BeginResumeUpload(System.IO.Stream,System.String,System.Int64,System.Object,System.AsyncCallback)">
            <summary>
            Asynchronously resumes the upload process.
            </summary>
            <param name="localStream">The local stream.</param>
            <param name="destinationPath">The remote destination path.</param>
            <param name="offset">The start offset.</param>
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.EndResumeUpload(System.IAsyncResult)">
            <summary>
            Ends an asynchronous process for resuming upload.
            </summary>		
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.StructureMount(System.String)">
            <summary>
            Mounts a file system data structure for the FTP client.
            </summary>
            <param name="remotePath">The path of remote directory or file system structure.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.KeepAlive">
            <summary>
            Keep the connection active between the Ftp server and local client.
            </summary>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.BeginKeepAlive(System.Object,System.AsyncCallback)">
            <summary>
            Asynchronously sends the keep alive message to the Ftp server.
            </summary>		
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.EndKeepAlive(System.IAsyncResult)">
            <summary>
            Ends an asynchronous process for sending keep alive messages.
            </summary>		
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.CloseDataChannel">
            <summary>
            Close the data channel.
            </summary>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.BeginCloseDataChannel(System.Object,System.AsyncCallback)">
            <summary>
            Asynchronously closes the data channel.
            </summary>
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.EndCloseDataChannel(System.IAsyncResult)">
            <summary>
            Ends an asynchronous process for closing the data channel.
            </summary>		
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.CloseControlChannel">
            <summary>
            Close the control channel.
            </summary>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.BeginCloseControlChannel(System.Object,System.AsyncCallback)">
            <summary>
            Asynchronously closes the control channel.
            </summary>
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.EndCloseControlChannel(System.IAsyncResult)">
            <summary>
            Ends an asynchronous process for resuming upload.
            </summary>		
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.ResumeSupported">
            <summary>
            Determines whether the Ftp server supports resuming data transfer.
            </summary>
            <returns>True, if resume supported; otherwise False.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.BeginResumeSupported(System.Object,System.AsyncCallback)">
            <summary>
            Asynchronously queries whether the Ftp server supports resuming data transfer.
            </summary>
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.EndResumeSupported(System.IAsyncResult)">
            <summary>
            Ends an asynchronous process for querying the resuming support of the Ftp server.
            </summary>		
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.Login">
            <summary>
            Logs into the Ftp server.
            </summary>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.Login(System.String)">
            <summary>
            Logs into the Ftp server.
            </summary>
            <param name="accountInfo">The account information.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.BeginLogin(System.String,System.Object,System.AsyncCallback)">
            <summary>
            Asynchronously logs in the Ftp server.
            </summary>
            <param name="accountInfo">The account information.</param>
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.BeginLogin(System.Object,System.AsyncCallback)">
            <summary>
            Asynchronously logs in the Ftp server.
            </summary>
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.EndLogin(System.IAsyncResult)">
            <summary>
            Ends an asynchronous process for logging the Ftp server.
            </summary>		
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.Connect">
            <summary>
            Connects to the Ftp server.
            </summary>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.Connect(System.Boolean)">
            <summary>
            Connects to the Ftp server.
            </summary>
            <param name="autoLogin">Determines whether automatically log into the server.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.Connect(System.String,System.Boolean)">
            <summary>
            Connects to the Ftp server.
            </summary>
            <param name="accountInfo">The account information.</param>
            <param name="autoLogin">Determines whether automatically log into the server.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.BeginConnect(System.Object,System.AsyncCallback)">
            <summary>
            Asynchronously connects to the Ftp server.
            </summary>
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.BeginConnect(System.Boolean,System.Object,System.AsyncCallback)">
            <summary>
            Asynchronously connects to the Ftp server.
            </summary>
            <param name="autoLogin">Determines whether automatically log into the server.</param>
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.BeginConnect(System.String,System.Boolean,System.Object,System.AsyncCallback)">
            <summary>
            Asynchronously connects to the Ftp server.
            </summary>
            <param name="accountInfo">The account information.</param>
            <param name="autoLogin">Determines whether automatically log into the server.</param>
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.EndConnect(System.IAsyncResult)">
            <summary>
            Ends an asynchronous process for connecting the Ftp server.
            </summary>		
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.Disconnect">
            <summary>
            Disconnect to the Ftp server.
            </summary>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.BeginDisconnect(System.Object,System.AsyncCallback)">
            <summary>
            Asynchronously disconnects to the Ftp server.
            </summary>
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.EndDisconnect(System.IAsyncResult)">
            <summary>
            Ends an asynchronous process for disconnecting.
            </summary>		
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.Dispose">
            <summary>
            Dispose the FtpClient instance.
            </summary>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.GetServerStatus">
            <summary>
            Gets the status of the Ftp server.
            </summary>
            <returns>The status of the server.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.BeginGetServerStatus(System.Object,System.AsyncCallback)">
            <summary>
            Asynchronously gets the status of the Ftp server.
            </summary>		
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.EndGetServerStatus(System.IAsyncResult)">
            <summary>
            Ends an asynchronous process for getting the status of the Ftpserver.
            </summary>		
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
            <returns>The status of the server.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.GetServerSystemInfo">
            <summary>
            Gets the system infomation about the Ftp server.
            </summary>
            <returns>The system information.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.BeginGetServerSystemInfo(System.Object,System.AsyncCallback)">
            <summary>
            Asynchronously gets the system information of the Ftp server.
            </summary>
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.EndGetServerSystemInfo(System.IAsyncResult)">
            <summary>
            Ends an asynchronous process for getting the system information.
            </summary>		
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
            <returns>The system information.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.Quote(System.String)">
            <summary>
            Send Quote command
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.Site(System.String)">
            <summary>
            Sends the site command.
            </summary>
            <param name="command">The site specific command.</param>
            <returns>The response from the server.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.GetFileSize(System.String)">
            <summary>
            Gets the size of the specifed file on the Ftp server.
            </summary>
            <param name="remoteFilePath">The path of the remote file.</param>
            <returns>The size of the remote file.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.BeginGetFileSize(System.String,System.Object,System.AsyncCallback)">
            <summary>
            Asynchronously gets the size of the specified file.
            </summary>
            <param name="remoteFilePath">The path of the remote file.</param>
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.EndGetFileSize(System.IAsyncResult)">
            <summary>
            Ends an asynchronous process for getting the size of the specified file.
            </summary>		
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.ReInitialize(System.Int32)">
            <summary>
            Reinitializes the account and settings for the FTP client.
            </summary>
            <param name="sleep">the number of milliseconds to pause before clearing</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.BeginReInitialize(System.Int32,System.Object,System.AsyncCallback)">
            <summary>
            Asynchronously reinitializes.
            </summary>
            <param name="sleep">the number of milliseconds to pause before clearing</param>
            <param name="asyncCallback">The AsyncCallback delegate</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.EndReInitialize(System.IAsyncResult)">
            <summary>
            Ends an asynchronous process for reinitializing.
            </summary>		
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="M:Aspose.Network.Ftp.FtpClient.Clone">
            <summary>
            Creates a copy of current instance.
            </summary>
            <returns>A copy of FtpClient.</returns>
        </member>
        <member name="E:Aspose.Network.Ftp.FtpClient.TransferProgress">
            <summary>
            Occurs when the transfering buffer is full and the bytes are flushed.
            </summary>
        </member>
        <member name="E:Aspose.Network.Ftp.FtpClient.TransferCompleted">
            <summary>
            Occurs when the transfering completed.
            </summary>
        </member>
        <member name="E:Aspose.Network.Ftp.FtpClient.TransferBroken">
            <summary>
            Occurs when the transfering is broken unexpectedly. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Ftp.FtpClient.CommandReceiveTimeout">
            <summary>
            Gets or sets the receive timeout for the control channel.
            </summary>
        </member>
        <member name="P:Aspose.Network.Ftp.FtpClient.CommandSendTimeout">
            <summary>
            Gets or sets the send timeout for the control channel.
            </summary>
        </member>
        <member name="P:Aspose.Network.Ftp.FtpClient.BannerMessage">
            <summary>
            Gets the banner message returned from the Ftp server.
            </summary>
        </member>
        <member name="P:Aspose.Network.Ftp.FtpClient.ExitMessage">
            <summary>
            Gets the exit message returned from the Ftp server.
            </summary>
        </member>
        <member name="P:Aspose.Network.Ftp.FtpClient.WelcomeMessage">
            <summary>
            Gets the welcome message returned from the Ftp server.
            </summary>
        </member>
        <member name="P:Aspose.Network.Ftp.FtpClient.TransferType">
            <summary>
            Gets or sets the <see cref="T:Aspose.Network.Ftp.TransferType">TransferType</see>  
            </summary>
        </member>
        <member name="P:Aspose.Network.Ftp.FtpClient.Connected">
            <summary>
            Determines whether connected to the remote server.
            </summary>
        </member>
        <member name="P:Aspose.Network.Ftp.FtpClient.DataConnectionMode">
            <summary>
            Gets or sets the <see cref="T:Aspose.Network.Ftp.DataConnectionMode">DataConnectionMode</see>
            </summary>
        </member>
        <member name="P:Aspose.Network.Ftp.FtpClient.DataReceiveTimeout">
            <summary>
            Gets or sets the receive timeout for the control channel.
            </summary>
        </member>
        <member name="P:Aspose.Network.Ftp.FtpClient.DataSendTimeout">
            <summary>
            Gets or sets the send timeout for the data channel.
            </summary>
        </member>
        <member name="P:Aspose.Network.Ftp.FtpClient.Port">
            <summary>
            Gets or sets the port to connect to Ftp server.
            </summary>
        </member>
        <member name="P:Aspose.Network.Ftp.FtpClient.Host">
            <summary>
            Gets or sets the Ftp host
            </summary>
        </member>
        <member name="P:Aspose.Network.Ftp.FtpClient.DataReceiveBufferSize">
            <summary>
            Gets or sets the receive buffer size of the data channel.
            </summary>
        </member>
        <member name="P:Aspose.Network.Ftp.FtpClient.DataSendBufferSize">
            <summary>
            Gets or sets the send buffer size of the data channel.
            </summary>
        </member>
        <member name="P:Aspose.Network.Ftp.FtpClient.Username">
            <summary>
            Gets username using to log into the ftp server.
            </summary>
        </member>
        <member name="P:Aspose.Network.Ftp.FtpClient.Password">
            <summary>
            gets password, using to log into the ftp server.
            </summary>
        </member>
        <member name="P:Aspose.Network.Ftp.FtpClient.Encoding">
            <summary>
            Gets or sets the <see cref="T:System.Text.Encoding"/> to use to encode and decode commands and responses. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Ftp.FtpClient.SynchronizingObject">
            <summary>
            Gets or sets the object used to marshal the event handler calls issued as a result of a FtpClient events.
            </summary>
        </member>
        <member name="T:Aspose.Network.Outlook.MapiRecipientType">
            <summary>
            Represent the PR_RECIPIENT_TYPE property which contains the recipient type for a message recipient.
            </summary>
        </member>
        <member name="F:Aspose.Network.Outlook.MapiRecipientType.MAPI_BCC">
            <summary>
            The recipient is a blind carbon copy (BCC) recipient. Primary and carbon copy recipients are unaware of the existence of BCC recipients.
            </summary>
        </member>
        <member name="F:Aspose.Network.Outlook.MapiRecipientType.MAPI_CC">
            <summary>
            The recipient is a carbon copy (CC) recipient, a recipient that receives a message in addition to the primary recipients.
            </summary>
        </member>
        <member name="F:Aspose.Network.Outlook.MapiRecipientType.MAPI_ORIG">
            <summary>
            The recipient sent the message.
            </summary>
        </member>
        <member name="F:Aspose.Network.Outlook.MapiRecipientType.MAPI_TO">
            <summary>
            The recipient is a primary (To) recipient. Clients are required to handle primary recipients; all other types are optional.
            </summary>
        </member>
        <member name="F:Aspose.Network.Outlook.MapiRecipientType.Unknown">
            <summary>
            Unknow.
            </summary>
        </member>
        <member name="T:Aspose.Network.Outlook.MapiObjectType">
            <summary>
            Represents the mapi object type.
            </summary>
        </member>
        <member name="F:Aspose.Network.Outlook.MapiObjectType.MAPI_ABCONT">
            <summary>
            MAPI_ABCONT
            </summary>
        </member>
        <member name="F:Aspose.Network.Outlook.MapiObjectType.MAPI_ADDRBOOK">
            <summary>
            MAPI_ADDRBOOK
            </summary>
        </member>
        <member name="F:Aspose.Network.Outlook.MapiObjectType.MAPI_ATTACH">
            <summary>
            MAPI_ATTACH
            </summary>
        </member>
        <member name="F:Aspose.Network.Outlook.MapiObjectType.MAPI_DISTLIST">
            <summary>
            MAPI_DISTLIST
            </summary>
        </member>
        <member name="F:Aspose.Network.Outlook.MapiObjectType.MAPI_FOLDER">
            <summary>
            MAPI_FOLDER
            </summary>
        </member>
        <member name="F:Aspose.Network.Outlook.MapiObjectType.MAPI_FORMINFO">
            <summary>
            MAPI_FORMINFO
            </summary>
        </member>
        <member name="F:Aspose.Network.Outlook.MapiObjectType.MAPI_MAILUSER">
            <summary>
            MAPI_MAILUSER
            </summary>
        </member>
        <member name="F:Aspose.Network.Outlook.MapiObjectType.MAPI_MESSAGE">
            <summary>
            MAPI_MESSAGE
            </summary>
        </member>
        <member name="F:Aspose.Network.Outlook.MapiObjectType.MAPI_PROFSECT">
            <summary>
            MAPI_PROFSECT
            </summary>
        </member>
        <member name="F:Aspose.Network.Outlook.MapiObjectType.MAPI_SESSION">
            <summary>
            MAPI_SESSION
            </summary>
        </member>
        <member name="F:Aspose.Network.Outlook.MapiObjectType.MAPI_STATUS">
            <summary>
            MAPI_STATUS
            </summary>
        </member>
        <member name="F:Aspose.Network.Outlook.MapiObjectType.MAPI_STORE">
            <summary>
            MAPI_STORE
            </summary>
        </member>
        <member name="F:Aspose.Network.Outlook.MapiObjectType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:Aspose.Network.Outlook.MapiRecipient">
            <summary>
            Represents the recipient information in the Microsoft Outlook Message.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiRecipient.DisplayName">
            <summary>
            The display name of the message recipient or sender. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiRecipient.AddressType">
            <summary>
            The type of the address of the message recipient or sender.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiRecipient.EmailAddress">
            <summary>
            The email address of the message recipient or sender.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiRecipient.OrganizationEmailAddress">
            <summary>
            Gets the organization email address.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiRecipient.RecipientType">
            <summary>
            The type of the recipient or sender.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiRecipient.RecipientClass">
            <summary>
            Gets the type of recipent.
            </summary>
        </member>
        <member name="T:Aspose.Network.Win32.IPropertySetStorage">
            <summary>
            The IPropertySetStorage interface creates, opens, deletes, and enumerates property set
            storages that support instances of the IPropertyStorage interface.
            </summary>
        </member>
        <member name="M:Aspose.Network.Win32.IPropertySetStorage.Create(System.Guid@,System.Guid@,System.UInt32,Aspose.Network.Win32.STGM,Aspose.Network.Win32.IPropertyStorage@)">
            <summary>
            The Create method creates and opens a new property set in the property set storage object.
            </summary>
            <param name="rfmtid">The FMTID of the property set to be created. For information about
            FMTIDs that are well-known and predefined in the Platform SDK, see Predefined Property Set
            Format Identifiers. </param>
            <param name="pclsid"> A pointer to the initial class identifier CLSID for this property set.
            May be NULL, in which case it is set to all zeroes.</param>
            <param name="grfFlags">The values from PROPSETFLAG Constants.</param>
            <param name="grfMode">An access mode in which the newly created property set is to be opened,
            taken from certain values of STGM_Constants, as described in the following Remarks section.</param>
            <param name="ppprstg">A pointer to the output variable that receives the IPropertyStorage interface pointer.</param>
        </member>
        <member name="M:Aspose.Network.Win32.IPropertySetStorage.Open(System.Guid@,Aspose.Network.Win32.STGM,Aspose.Network.Win32.IPropertyStorage@)">
            <summary>
            The Open method opens a property set contained in the property set storage object.
            </summary>
            <param name="rfmtid">The format identifier (FMTID) of the property set to be opened.
            For more information about well-known and predefined FMTIDs in the Platform SDK</param>
            <param name="grfMode">The access mode in which the newly created property set is to be
            opened. These flags are taken from STGM Constants.</param>
            <param name="ppprstg">A pointer to the IPropertyStorage pointer variable that receives
            the interface pointer to the requested property storage subobject.</param>
        </member>
        <member name="M:Aspose.Network.Win32.IPropertySetStorage.Delete(System.Guid@)">
            <summary>
            The Delete method deletes one of the property sets contained in the property set storage object.
            </summary>
            <param name="rfmtid">FMTID of the property set to be deleted.</param>
        </member>
        <member name="M:Aspose.Network.Win32.IPropertySetStorage.Enum(Aspose.Network.Win32.IEnumSTATPROPSETSTG@)">
            <summary>
            The Enum method creates an enumerator object which contains information on the
            property sets stored in this property set storage.
            </summary>
            <param name="ppenum">Pointer to IEnumSTATPROPSETSTG pointer variable that
            receives the interface pointer to the newly created enumerator object.</param>
        </member>
        <member name="T:Aspose.Network.Dns.PTRResourceRecord">
            <summary>
            Represents a PTR DNS resource record
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.PTRResourceRecord.#ctor">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.PTRResourceRecord">PTRResourceRecord</see>.
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.PTRResourceRecord.#ctor(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.PTRResourceRecord">PTRResourceRecord</see>.
            </summary>
            <param name="buffer">The arry of unsigned bytes from which to create.</param>
            <param name="index">The index into buffer at which this resource record begins</param>
            <param name="count">The length of the bytes to create this resource record</param>
        </member>
        <member name="P:Aspose.Network.Dns.PTRResourceRecord.PointerDomainName">
            <summary>
            Gets or sets the pointer domain name
            </summary>
        </member>
        <member name="T:Aspose.Network.Pop3.Pop3MessageInfo">
            <summary>
            The Pop3MessageInfo represents the E-Mail message info fetched from the Pop3 server.
            </summary>
        </member>
        <member name="P:Aspose.Network.Pop3.Pop3MessageInfo.CC">
            <summary>
            Gets CC of the E-Mail message.
            </summary>
        </member>
        <member name="P:Aspose.Network.Pop3.Pop3MessageInfo.Date">
            <summary>
            Gets Date of the E-Mail message.
            </summary>
        </member>
        <member name="P:Aspose.Network.Pop3.Pop3MessageInfo.From">
            <summary>
            Gets the From property.
            </summary>
        </member>
        <member name="P:Aspose.Network.Pop3.Pop3MessageInfo.Headers">
            <summary>
            Gets the Headers of the E-Mail message.
            </summary>
        </member>
        <member name="P:Aspose.Network.Pop3.Pop3MessageInfo.Size">
            <summary>
            Gets the size of the E-Mail message.
            </summary>
        </member>
        <member name="P:Aspose.Network.Pop3.Pop3MessageInfo.ReplyTo">
            <summary>
            Gets the ReplyTo of the E-Mail message.
            </summary>
        </member>
        <member name="P:Aspose.Network.Pop3.Pop3MessageInfo.Sender">
            <summary>
            Gets the Sender of the E-Mail message.
            </summary>
        </member>
        <member name="P:Aspose.Network.Pop3.Pop3MessageInfo.SequenceNumber">
            <summary>
            Gets the Sequence Number of the E-Mail message.
            </summary>
        </member>
        <member name="P:Aspose.Network.Pop3.Pop3MessageInfo.Subject">
            <summary>
            Gets the Subject of the E-Mail message.
            </summary>
        </member>
        <member name="P:Aspose.Network.Pop3.Pop3MessageInfo.To">
            <summary>
            Gets the receiptants of the E-Mail message.
            </summary>
        </member>
        <member name="P:Aspose.Network.Pop3.Pop3MessageInfo.Number">
            <summary>
            Gets the Sequence Number of the E-Mail message.
            </summary>
        </member>
        <member name="P:Aspose.Network.Pop3.Pop3MessageInfo.UniqueId">
            <summary>
            Gets the Unique Id of the E-Mail message.
            </summary>
        </member>
        <member name="P:Aspose.Network.Pop3.Pop3MessageInfo.Identifier">
            <summary>
            Gets the Unique Id of the E-Mail message.
            </summary>
        </member>
        <member name="T:Aspose.Network.Mime.DispositionTypeNames">
             <summary>
             Supplies the strings used to specify the disposition type for an e-mail attachment. 
             </summary>
            <remarks>
             The values in this enumeration can be used to set the DispositionType property for an e-mail attachment. The information in the ContentDisposition class represents the MIME Content-Disposition header. This header is described in RFC 2183 available at http://www.ietf.org.
            </remarks>
        </member>
        <member name="F:Aspose.Network.Mime.DispositionTypeNames.Attachment">
            <summary>
            Specifies that the attachment is to be displayed as a file attached to the e-mail message. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Mime.DispositionTypeNames.Inline">
            <summary>
            Specifies that the attachment is to be displayed as part of the e-mail message body. 
            </summary>
        </member>
        <member name="T:Aspose.Network.Mime.MediaTypeNames">
            <summary>
            Specifies the media type information for an e-mail message attachment. 
            </summary>
        </member>
        <member name="T:Aspose.Network.Mime.MediaTypeNames.Application">
            <summary>
            Specifies the kind of application data in an e-mail message attachment. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Mime.MediaTypeNames.Application.Octet">
            <summary>
            Specifies that the MediaTypeNames.Application data is not interpreted. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Mime.MediaTypeNames.Application.Pdf">
            <summary>
            Specifies that the MediaTypeNames.Application data is in Portable Document Format (PDF). 
            </summary>
        </member>
        <member name="F:Aspose.Network.Mime.MediaTypeNames.Application.Rtf">
            <summary>
            Specifies that the MediaTypeNames.Application data is in Rich Text Format (RTF). 
            </summary>
        </member>
        <member name="F:Aspose.Network.Mime.MediaTypeNames.Application.Soap">
            <summary>
            Specifies that the MediaTypeNames.Application data is a SOAP document. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Mime.MediaTypeNames.Application.Zip">
            <summary>
            Specifies that the MediaTypeNames.Application data is compressed. 
            </summary>
        </member>
        <member name="T:Aspose.Network.Mime.MediaTypeNames.Image">
            <summary>
            Specifies the kind of image data in an e-mail message attachment. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Mime.MediaTypeNames.Image.Gif">
            <summary>
            Specifies that the MediaTypeNames.Image data is in Graphics Interchange Format (GIF). 
            </summary>
        </member>
        <member name="F:Aspose.Network.Mime.MediaTypeNames.Image.Jpeg">
            <summary>
            Specifies that the MediaTypeNames.Image data is in Joint Photographic Experts Group (JPEG) format. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Mime.MediaTypeNames.Image.Png">
            <summary>
            Specifies that the MediaTypeNames.Image data is in Portable Network Graphics  Image File Format (PNG). 
            </summary>
        </member>
        <member name="F:Aspose.Network.Mime.MediaTypeNames.Image.Tiff">
            <summary>
            Specifies that the MediaTypeNames.Image data is in Tagged Image File Format (TIFF). 
            </summary>
        </member>
        <member name="T:Aspose.Network.Mime.MediaTypeNames.Text">
            <summary>
            Specifies the kind of text data in an e-mail message attachment. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Mime.MediaTypeNames.Text.Calendar">
            <summary>
            Specifies that the MediaTypeNames.Text data is in iCalendar format. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Mime.MediaTypeNames.Text.Html">
            <summary>
            Specifies that the MediaTypeNames.Text data is in HTML format. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Mime.MediaTypeNames.Text.Plain">
            <summary>
            Specifies that the MediaTypeNames.Text data is in plain text format. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Mime.MediaTypeNames.Text.RichText">
            <summary>
            Specifies that the MediaTypeNames.Text data is in Rich Text Format (RTF). 
            </summary>
        </member>
        <member name="F:Aspose.Network.Mime.MediaTypeNames.Text.Xml">
            <summary>
            Specifies that the MediaTypeNames.Text data is in XML format. 
            </summary>
        </member>
        <member name="T:Aspose.Network.Imap.ImapAuthentication">
            <summary>
            Represents the authentication methods for ImapClient to log into the IMAP servers.
            </summary>
        </member>
        <member name="M:Aspose.Network.Imap.ImapAuthentication.#cctor">
            <summary>
            Represents IMAP authentication methods. 
            </summary>
        </member>
        <member name="M:Aspose.Network.Imap.ImapAuthentication.Equals(System.Object)">
            <summary>
            Overrided.
            </summary>
            <param name="o">Object to be compared.</param>
            <returns>True if the specified object equals to this imap authentication object</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapAuthentication.GetHashCode">
            <summary>
            Overrided.
            </summary>
            <returns>The hash code of this object.</returns>
        </member>
        <member name="M:Aspose.Network.Imap.ImapAuthentication.ToString">
            <summary>
            Overrided.
            </summary>
            <returns>The string of this object.</returns>
        </member>
        <member name="P:Aspose.Network.Imap.ImapAuthentication.CramMD5">
            <summary>
            Gets RFC 2195 CRAM-MD5 authentication object.
            </summary>
        </member>
        <member name="P:Aspose.Network.Imap.ImapAuthentication.DigestMD5">
            <summary>
            Gets RFC 2831 DIGEST-MD5 authentication object. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Imap.ImapAuthentication.Plain">
            <summary>
            Gets a RFC 2595 TLS plaintext authentication object. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Imap.ImapAuthentication.Login">
            <summary>
            Gets a login authentication object. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Imap.ImapAuthentication.ClearText">
            <summary>
            Gets an ImapAuthentication object that uses clear text USER/PASS login. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Imap.ImapAuthentication.Auto">
            <summary>
            Gets an ImapAuthentication object indicates automatically choose the authentication method. 
            </summary>
        </member>
        <member name="T:Aspose.Network.Security.Cryptography.X509Certificates.X509FindType">
            <summary>
            Specifies the type of value searched for by the Find method.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509FindType.FindByThumbprint">
            <summary>
            The findValue parameter for the Find method must be a string representing the thumbprint of the certificate.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectName">
            <summary>
            The findValue parameter for the Find method must be a string representing the subject name of the certificate. This is a less specific search than if you use the FindBySubjectDistinguishedName enumeration value. Using the FindBySubjectName value, the Find method performs a case-insensitive string compare using the supplied value. For example, if you pass "MyCert" to the Find method, it will find all certificates with the subject name containing that string, regardless of other subject values. Searching by distinguished name is a more precise search.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectDistinguishedName">
            <summary>
            The findValue parameter for the Find method must be a string representing the subject distinguished name of the certificate. This is a more specific search than if you use the FindBySubjectName enumeration value. Using the FindBySubjectDistinguishedName value, the Find method performs a case-insensitive string compare for the entire distinguished name. Searching by subject name is a less precise search.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509FindType.FindByIssuerName">
            <summary>
            The findValue parameter for the Find method must be a string representing the issuer name of the certificate. This is a less specific search than if you use the FindByIssuerDistinguishedName enumeration value. Using the FindByIssuerName value, the Find method performs a case-insensitive string compare using the supplied value. For example, if you pass "MyCA" to the Find method, it will find all certificates with the issuer name containing that string, regardless of other issuer values.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509FindType.FindByIssuerDistinguishedName">
            <summary>
            The findValue parameter for the Find method must be a string representing the issuer distinguished name of the certificate. This is a more specific search than if you use the FindByIssuerName enumeration value. Using the FindByIssuerDistinguishedName value, the Find method performs a case-insensitive string compare for the entire distinguished name. Searching by issuer name is a less precise search.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509FindType.FindBySerialNumber">
            <summary>
            The findValue parameter for the Find must be a string representing the serial number of the certificate as it is displayed by the UI. The serial number must be in reverse order since it is an integer.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509FindType.FindByTimeValid">
            <summary>
            The findValue parameter for the Find must be a DateTime value in local time, such as Now. Note that the union of certificates returned using FindByTimeValid, FindByTimeNotYetValid and FindByTimeExpired should represent all certificates in the queried collection.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509FindType.FindByTimeNotYetValid">
            <summary>
            The findValue parameter for the Find must be a DateTime value in local time, such as Now. Note that the union of certificates returned using FindByTimeValid, FindByTimeNotYetValid and FindByTimeExpired should represent all certificates in the queried collection.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509FindType.FindByTimeExpired">
            <summary>
            The findValue parameter for the Find must be a DateTime value in local time, such as Now. Note that the union of certificates returned using FindByTimeValid, FindByTimeNotYetValid and FindByTimeExpired should represent all certificates in the queried collection.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509FindType.FindByTemplateName">
            <summary>
            The findValue parameter for the Find must be a string representing the template name of the certificate, such as "ClientAuth." A template name is an X509 version 3 extension that specifies the uses of the certificate.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509FindType.FindByApplicationPolicy">
            <summary>
            The findValue parameter for the Find must be a string representing either the application policy friendly name or the object identifier (Oid) of the certificate. For example, "Encrypting File System" or "1.3.6.1.4.1.311.10.3.4" can be used. Note that for an application that is going to be localized, the OID value must be used since the friendly name is localized.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509FindType.FindByCertificatePolicy">
            <summary>
            The findValue parameter for the Find must be a string representing either the friendly name or the object identifier (Oid) of the certificate policy. The best practice is to use the OID, such as "1.3.6.1.4.1.311.10.3.4". Note that for an application that is going to be localized, the OID must be used since the friendly name is localized.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509FindType.FindByExtension">
            <summary>
            The findValue parameter for the Find must be a string describing the extension to find. The object identifier (OID) is most commonly used to direct the Find method to search for all certificates that have an extension matching that OID value.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509FindType.FindByKeyUsage">
            <summary>
            The findValue parameter for the Find must be either a string representing the key usage or an integer representing a bit mask containing all the requested key usages. For the string value, only one key usage at a time can be specified, but the Find method can be used in a cascading sequence to get the intersection of the requested usages. For example, the findValue parameter can be set to "KeyEncipherment" or an integer (0x30 indicates "KeyEncipherment" and "DataEncipherment"). Values of the X509KeyUsageFlags enumeration can also be used.
            </summary>
        </member>
        <member name="F:Aspose.Network.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectKeyIdentifier">
            <summary>
            The findValue parameter for the Find must be a string representing the subject key identifier in hexadecimal, such as "F3E815D45E83B8477B9284113C64EF208E897112," as displayed in the UI.
            </summary>
        </member>
        <member name="T:Aspose.Network.Mail.SmtpAuthentication">
            <summary>
            The SmtpAuthentication represents the mechanism used to authenticate username and password against the SMTP server. 
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpAuthentication.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the specified object is a SmtpAuthentication object that is equivalent to this SmtpAuthentication object.
            </summary>
            <param name="o">The object to test.</param>
            <returns>Returns true if o is a <see cref="T:Aspose.Network.Mail.SmtpAuthentication">SmtpAuthentication</see> object that is equivalent to this <see cref="T:Aspose.Network.Mail.SmtpAuthentication">SmtpAuthentication</see> object; otherwise, returns false.</returns>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpAuthentication.GetHashCode">
            <summary>
            Returns a hash code value that represents this object.
            </summary>
            <returns>Returns a hash code that represents this object.</returns>
        </member>
        <member name="M:Aspose.Network.Mail.SmtpAuthentication.ToString">
            <summary>
            Converts this SmtpAuthentication object to a human-readable string.
            </summary>
            <returns>A string representing this <see cref="T:Aspose.Network.Mail.SmtpAuthentication">SmtpAuthentication</see> object.</returns>
        </member>
        <member name="P:Aspose.Network.Mail.SmtpAuthentication.CramMD5">
            <summary>
            Uses the Cram-MD5 mechanism for authentication
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.SmtpAuthentication.DigestMD5">
            <summary>
            Uses the Digest-MD5 mechanism for authentication
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.SmtpAuthentication.Plain">
            <summary>
            Uses the AUTH PLAIN mechanism. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.SmtpAuthentication.Login">
            <summary>
            Uses the AUTH LOGIN mechanism. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.SmtpAuthentication.None">
            <summary>
            Do not authenticate.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.SmtpAuthentication.Ntlm">
            <summary>
            Uses the AUTH Ntlm mechanism. 
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.SmtpAuthentication.Auto">
            <summary>
            Detects the AUTH mechanism automatically. 
            </summary>
        </member>
        <member name="T:Aspose.Network.Proxy.ProxySocketExceptionStatus">
            <summary>
            Represents the exception status of ProxySocket.
            </summary>
        </member>
        <member name="F:Aspose.Network.Proxy.ProxySocketExceptionStatus.ConnectFailure">
            <summary>
            ConnectFailure.s
            </summary>
        </member>
        <member name="F:Aspose.Network.Proxy.ProxySocketExceptionStatus.ConnectionClosed">
            <summary>
            ConnectionClosed.
            </summary>
        </member>
        <member name="F:Aspose.Network.Proxy.ProxySocketExceptionStatus.SocketError">
            <summary>
            SocketError.
            </summary>
        </member>
        <member name="F:Aspose.Network.Proxy.ProxySocketExceptionStatus.NameResolutionFailure">
            <summary>
            NameResolutionFailure.
            </summary>
        </member>
        <member name="F:Aspose.Network.Proxy.ProxySocketExceptionStatus.ProtocolError">
            <summary>
            ProtocolError.
            </summary>
        </member>
        <member name="F:Aspose.Network.Proxy.ProxySocketExceptionStatus.ProxyNameResolutionFailure">
            <summary>
            ProxyNameResolutionFailure.
            </summary>
        </member>
        <member name="F:Aspose.Network.Proxy.ProxySocketExceptionStatus.ReceiveFailure">
            <summary>
            ReceiveFailure.
            </summary>
        </member>
        <member name="F:Aspose.Network.Proxy.ProxySocketExceptionStatus.UnclassifiableError">
            <summary>
            UnclassifiableError.
            </summary>
        </member>
        <member name="F:Aspose.Network.Proxy.ProxySocketExceptionStatus.ServerProtocolViolation">
            <summary>
            ServerProtocolViolation.
            </summary>
        </member>
        <member name="F:Aspose.Network.Proxy.ProxySocketExceptionStatus.AsyncError">
            <summary>
            AsyncError.
            </summary>
        </member>
        <member name="F:Aspose.Network.Proxy.ProxySocketExceptionStatus.NotConnected">
            <summary>
            NotConnected.
            </summary>
        </member>
        <member name="T:Aspose.Network.Outlook.OleDocumentFormat">
            <summary>
            Represents the format for OLE document.
            </summary>
        </member>
        <member name="M:Aspose.Network.Outlook.OleDocumentFormat.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the OleDocumentFormat class.
            </summary>
            <param name="guid"></param>
        </member>
        <member name="M:Aspose.Network.Outlook.OleDocumentFormat.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="o">The object to compare with this instance.</param>
            <returns>true if o is a System.Guid that has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:Aspose.Network.Outlook.OleDocumentFormat.GetHashCode">
            <summary>
            Returns the hash code of this instance.
            </summary>
            <returns>The hash code for this instance.</returns>
        </member>
        <member name="M:Aspose.Network.Outlook.OleDocumentFormat.ToString">
            <summary>
            Overridden. Returns a string representation of this instance. 
            </summary>
            <returns>A string contains the mail addresse.</returns>
        </member>
        <member name="P:Aspose.Network.Outlook.OleDocumentFormat.MicrosoftOutlookMessage">
            <summary>
            Microsoft outlook message format.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.OleDocumentFormat.AdobeAcrobatDocument">
            <summary>
            Adobe PDF format.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.OleDocumentFormat.MicrosoftOfficeExcelWorksheet">
            <summary>
            Microsoft office exccel format.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.OleDocumentFormat.MicrosoftOfficeWordDocument">
            <summary>
            Microsoft office word format.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.OleDocumentFormat.MicrosoftPowerPointPresentation">
            <summary>
            Microsoft power point format.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.OleDocumentFormat.Unknown">
            <summary>
            Unknown type.
            </summary>
        </member>
        <member name="T:Aspose.Network.Outlook.MapiObjectProperty">
            <summary>
            Reprensents a Custom object included in Outlook Message documents.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiObjectProperty.IsOutlookMessage">
            <summary>
            Indicates whether the object property is an embedded outlook message.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiObjectProperty.OleDocumentFormat">
            <summary>
            Gets the Ole format type.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiObjectProperty.DocumentName">
            <summary>
            Gets the document name.
            </summary>
        </member>
        <member name="P:Aspose.Network.Outlook.MapiObjectProperty.Properties">
            <summary>
            Gets a collection of mapi properties.
            </summary>
        </member>
        <member name="T:Aspose.Network.Exchange.ExchangeClient">
             <summary>
             <p>The ExchangeClient calss allows applications to manage E-Mail box in Microsoft Exchange Server by using WebDav Exchange Store Protocol.</p>
              
             </summary>
             <example>
             <p>The following exmaple demonstrates how to use ExchangeClient class to fetch e-mail messages from the Exchange Server.</p>
             [C#]
             <code>
            	//create Exchange with specified mailbox url, username and password.
            	ExchangeClient client = new ExchangeClient("http://www.yourcompany.com/exchange/username", "username", "password", "domain");
            	try
            	{
                    //query mailbox infomation
                    ExchangeMailboxInfo mailbox = client.GetMailboxInfo();
             
                    //query message infomation in the inbox of the mailbox
                    ExchangeMessageInfoCollection col = client.ListMessages(mailbox.InboxUri, false);
             
                    if (col.Count > 0)
                    {
                        //Save message locally
                        client.SaveMessage(col[i].UniqueUri, "c:\\" +i + ".eml");
                    }
            
            	}
            	catch (ExchangeException ex)
            	{
            		System.Diagnostics.Debug.WriteLine(ex.ToString());
            	}
             </code>
             [VB.NET]
             <code>
            	'create Exchange with specified mailbox url, username and password.
            	Dim  client As ExchangeClient
                client = new ExchangeClient("http://www.yourcompany.com/exchange/username", "username", "password", "domain")
            	Try
            	
                    'query mailbox infomation
                    Dim mailbox As ExchangeMailboxInfo 
                     mailbox = client.GetMailboxInfo()
             
                    'query message infomation in the inbox of the mailbox
                    Dim messages As ExchangeMessageInfoCollection
                    messages = client.ListMessages(mailbox.InboxUri, false)
             
                    If ( not (message is nothing) AndAlso messages.Count > 0)
                        'Save message locally
                        client.SaveMessage(messages(i).UniqueUri, "c:\\" +i + ".eml")
                    End If
            	
            	Catch ( ex As ExchangeException)
            		System.Diagnostics.Debug.WriteLine(ex.ToString())
            	End Try
             </code>
             </example>
        </member>
        <member name="M:Aspose.Network.Exchange.ExchangeClient.#ctor(System.String,System.String,System.String)">
            <summary>
            Initialize a new instance of the class <see cref="T:Aspose.Network.Exchange.ExchangeClient">ExchageClient</see>
            </summary>
            <param name="mailboxUri">The url of the mailbox</param>
            <param name="username">The username of the mailbox</param>
            <param name="password">The password of the mailbox</param>
        </member>
        <member name="M:Aspose.Network.Exchange.ExchangeClient.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initialize a new instance of the class <see cref="T:Aspose.Network.Exchange.ExchangeClient">ExchageClient</see>
            </summary>
            <param name="mailboxUri">The url of the mailbox</param>
            <param name="username">The username of the mailbox</param>
            <param name="password">The password of the mailbox</param>
            <param name="domain">The domain of the user</param>
        </member>
        <member name="M:Aspose.Network.Exchange.ExchangeClient.#ctor(System.String,System.Net.ICredentials)">
            <summary>
            Initialize a new instance of the class <see cref="T:Aspose.Network.Exchange.ExchangeClient">ExchageClient</see>
            </summary>
            <param name="mailboxUri">The url of the mailbox</param>
            <param name="credentials">The credentials used to log in</param>
        </member>
        <member name="M:Aspose.Network.Exchange.ExchangeClient.GetMailboxSize">
            <summary>
            Get the size of the maibox
            </summary>
            <returns>The size of the mailbox</returns>
        </member>
        <member name="M:Aspose.Network.Exchange.ExchangeClient.GetMailboxInfo">
            <summary>
            Get the information of the mailbox
            </summary>
            <returns>The information of the mailbox</returns>
        </member>
        <member name="M:Aspose.Network.Exchange.ExchangeClient.ListMessages(System.String,System.String,System.Boolean)">
            <summary>
            List the messages in the specified folder
            </summary>
            <param name="folder">The folder Uri</param>
            <param name="messageClass">The message class.</param>
            <param name="recursive">Indicates whether recursive listing or not.</param>
            <returns>A collection of message info</returns>
        </member>
        <member name="M:Aspose.Network.Exchange.ExchangeClient.ListMessages(System.String,System.Boolean)">
            <summary>
            List the messages in the specified folder
            </summary>
            <param name="folder">The folder Uri</param>
            <param name="recursive">Indicates whether recursive listing or not.</param>
            <returns>A collection of message info</returns>
        </member>
        <member name="M:Aspose.Network.Exchange.ExchangeClient.ListMessages(System.String)">
            <summary>
            Lists the mail message in the specified folder.
            </summary>
            <param name="folder">The folder url</param>
            <returns>A <see cref="T:Aspose.Network.Exchange.ExchangeMessageInfoCollection"/> collection.</returns>
        </member>
        <member name="M:Aspose.Network.Exchange.ExchangeClient.SaveMessage(System.String,System.String)">
            <summary>
            Saves mail message specified by the uri to local file system. The mail message file is RFC 822 compliant format (EML).
            <remarks>if you want to parse the mail message files, use <see cref="T:Aspose.Network.Mail.MailMessage"/>.</remarks>
            </summary>
            <param name="messageUri">The Uri of the mail message</param>
            <param name="path">The target path to save the message</param>
        </member>
        <member name="M:Aspose.Network.Exchange.ExchangeClient.SaveMessage(System.String,System.IO.Stream)">
            <summary>
            Saves mail message specified by the uri to target stream. The mail message file is RFC 822 compliant format (EML).
            <remarks>if you want to parse the mail message files, use <see cref="T:Aspose.Network.Mail.MailMessage"/>.</remarks>
            </summary>
            <param name="messageUri">The Uri of the mail message</param>
            <param name="stream">The target stream to save the message</param>
        </member>
        <member name="M:Aspose.Network.Exchange.ExchangeClient.Send(Aspose.Network.Mail.MailMessage)">
            <summary>
            Sends the mail message.
            </summary>
            <param name="message">The mail message to be sent.</param>
        </member>
        <member name="M:Aspose.Network.Exchange.ExchangeClient.FetchMessage(System.String)">
            <summary>
            Fetches the mail message with specified uri.
            </summary>
            <param name="messageUri">The message uri.</param>
            <returns>A MailMessage object contains the message.</returns>
        </member>
        <member name="M:Aspose.Network.Exchange.ExchangeClient.DeleteMessage(System.String)">
            <summary>
            Deletes the mail message.
            </summary>
            <param name="messageUri">The message uri.</param>
        </member>
        <member name="P:Aspose.Network.Exchange.ExchangeClient.ClientCertificate">
            <summary>
            Gets or sets the client certificate.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ExchangeClient.KeepAlive">
            <summary>
            Indicates whether to keep alive.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ExchangeClient.PreAuthenticate">
            <summary>
            Indicates whether to do pre-authentication.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ExchangeClient.Timeout">
            <summary>
            Gest or sets the timeout.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ExchangeClient.Encoding">
            <summary>
            Gets or sets the encoding.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ExchangeClient.Credentials">
            <summary>
            Gets or sets the credentials.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ExchangeClient.Proxy">
            <summary>
            Gets or sets the proxy.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ExchangeClient.MailboxUri">
            <summary>
            Gets or sets the mailbox uri.
            </summary>
        </member>
        <member name="P:Aspose.Network.Exchange.ExchangeClient.MailboxInfo">
            <summary>
            Gets the mailbox information.
            </summary>
        </member>
        <member name="T:Aspose.Network.Dns.SOAResourceRecord">
            <summary>
            Represents a SOA DNS resource record
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.SOAResourceRecord.#ctor">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.SOAResourceRecord">SOAResourceRecord</see>.
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.SOAResourceRecord.#ctor(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.SOAResourceRecord">SOAResourceRecord</see>.
            </summary>
            <param name="buffer">The arry of unsigned bytes from which to create.</param>
            <param name="index">The index into buffer at which this resource record begins</param>
            <param name="count">The length of the bytes to create this resource record</param>
        </member>
        <member name="P:Aspose.Network.Dns.SOAResourceRecord.Serial">
            <summary>
            Gets or sets the serial
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.SOAResourceRecord.RName">
            <summary>
            Gets or sets the RName
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.SOAResourceRecord.Retry">
            <summary>
            Gets or sets the retry
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.SOAResourceRecord.Refresh">
            <summary>
            Gets or sets the refresh
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.SOAResourceRecord.MName">
            <summary>
            Gets or sets the MName
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.SOAResourceRecord.Minimum">
            <summary>
            Gets or sets the minimum
            </summary>
        </member>
        <member name="P:Aspose.Network.Dns.SOAResourceRecord.Expire">
            <summary>
            Gets or sets the expire
            </summary>
        </member>
        <member name="T:Aspose.Network.Dns.NullResourceRecord">
            <summary>
            Represents a NULL DNS resource record
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.NullResourceRecord.#ctor">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.NullResourceRecord">NullResourceRecord</see>.
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.NullResourceRecord.#ctor(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.NullResourceRecord">NullResourceRecord</see>.
            </summary>
            <param name="buffer">The arry of unsigned bytes from which to create.</param>
            <param name="index">The index into buffer at which this resource record begins</param>
            <param name="count">The length of the bytes to create this resource record</param>
        </member>
        <member name="T:Aspose.Network.Dns.NSAPPTRResourceRecord">
            <summary>
            Represents a NSAPPTR DNS resource record
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.NSAPPTRResourceRecord.#ctor">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.NSAPPTRResourceRecord">NSAPPTRResourceRecord</see>.
            </summary>
        </member>
        <member name="M:Aspose.Network.Dns.NSAPPTRResourceRecord.#ctor(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            Initialize a new instance of class <see cref="T:Aspose.Network.Dns.NSAPPTRResourceRecord">NSAPPTRResourceRecord</see>.
            </summary>
            <param name="buffer">The arry of unsigned bytes from which to create.</param>
            <param name="index">The index into buffer at which this resource record begins</param>
            <param name="count">The length of the bytes to create this resource record</param>
        </member>
        <member name="P:Aspose.Network.Dns.NSAPPTRResourceRecord.NSAPPointer">
            <summary>
            Gets or sets the NSA pointer
            </summary>
        </member>
        <member name="T:Aspose.Network.Outlook.AppointmentMailMessageInterpretor">
            <summary>
            Represents an appointment mail message.
            </summary>
        </member>
        <member name="M:Aspose.Network.Outlook.AppointmentMailMessageInterpretor.#ctor">
            <summary>
            Initializes a new instance of the AppointmentMailMessageInterpretor class.
            </summary>
        </member>
        <member name="M:Aspose.Network.Outlook.AppointmentMailMessageInterpretor.Clone">
            <summary>
            Creates a copy of current instance.
            </summary>
            <returns>A copy of MailMessageInterpretor.</returns>
        </member>
        <member name="M:Aspose.Network.Outlook.AppointmentMailMessageInterpretor.LoadMessageHeader(Aspose.Network.Mail.MailMessage,Aspose.Network.Outlook.MapiMessage)">
            <summary>
            Imports the headers of MIME protocol to a MailMessage from the MapiMessage instance.
            </summary>
            <param name="mailMessage">The target MailMessage.</param>
            <param name="mapiMessage">The source MapiMessage.</param>
        </member>
        <member name="M:Aspose.Network.Outlook.AppointmentMailMessageInterpretor.LoadMessageBodyHtml(Aspose.Network.Mail.MailMessage,Aspose.Network.Outlook.MapiMessage)">
            <summary>
            Creates the HtmlBody property of the MailMessage according to the specified MapiMessage instance.
            </summary>
            <param name="mailMessage">The target MailMessage.</param>
            <param name="mapiMessage">The source MapiMessage.</param>
        </member>
        <member name="M:Aspose.Network.Outlook.AppointmentMailMessageInterpretor.Save(Aspose.Network.Outlook.MapiMessage,System.IO.Stream,Aspose.Network.Mail.MessageFormat)">
            <summary>
            Saves the specified MapiMessage to a Stream.
            </summary>
            <param name="mapiMessage">The source MapiMessage instance.</param>
            <param name="stream">The target stream</param>
            <param name="messageFormat">The message format.</param>
        </member>
        <member name="P:Aspose.Network.Outlook.AppointmentMailMessageInterpretor.FormatTemplates">
            <summary>
            Gets the format templates.
            </summary>
        </member>
        <member name="T:Aspose.Network.Mime.MimeHeaderCollection">
            <summary>
            Represents the collection of mime messages.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mime.MimeHeaderCollection.#ctor">
            <summary>
            Creates a new instance of MimeHeaderCollection.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mime.MimeHeaderCollection.Add(Aspose.Network.Mime.MimeHeader)">
            <summary>
            Adds a MimeHeader object to the end of the collection.
            </summary>
            <param name="item">The MimeHeader to add.</param>
        </member>
        <member name="M:Aspose.Network.Mime.MimeHeaderCollection.Add(System.String,System.String)">
            <summary>
            Adds a MimeHeader object with specified name and value to the end of the collection.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Aspose.Network.Mime.MimeHeaderCollection.Clear">
            <summary>
            Remove all of the elements in the collection.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mime.MimeHeaderCollection.Insert(System.Int32,Aspose.Network.Mime.MimeHeader)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert.</param>
        </member>
        <member name="M:Aspose.Network.Mime.MimeHeaderCollection.Insert(System.Int32,System.String,System.String)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Aspose.Network.Mime.MimeHeaderCollection.Remove(Aspose.Network.Mime.MimeHeader)">
            <summary>
            Removes the first occurrence of a specific object from the collection.
            </summary>
            <param name="item">The object to remove from the collection.</param>
            <returns>true if item is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:Aspose.Network.Mime.MimeHeaderCollection.Remove(System.String)">
            <summary>
            Removes the first occurrence of a specific object from the collection.
            </summary>
            <param name="name">The name of the MimeHeader to remove from the collection.</param>
            <returns>true if item is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:Aspose.Network.Mime.MimeHeaderCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="P:Aspose.Network.Mime.MimeHeaderCollection.Item(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Aspose.Network.Mime.MimeHeaderCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Aspose.Network.Mime.MimeHeader">
            <summary>
            Represents the mime header.
            </summary>
        </member>
        <member name="M:Aspose.Network.Mime.MimeHeader.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of MimeHeader by specified name and value.
            </summary>
            <param name="name">The header name.</param>
            <param name="value">The header value.</param>
        </member>
        <member name="M:Aspose.Network.Mime.MimeHeader.Clone">
            <summary>
            Creates a copy of the specified MimeHeader instance.
            </summary>
            <returns>A copy of instance.</returns>
        </member>
        <member name="M:Aspose.Network.Mime.MimeHeader.ToString">
            <summary>
            Returns a string representation for the specified MimeHeader instance.
            </summary>
            <returns>A String representation</returns>
        </member>
        <member name="P:Aspose.Network.Mime.MimeHeader.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mime.MimeHeader.RawContent">
            <summary>
            Gets the raw content.
            </summary>
        </member>
        <member name="T:Aspose.Network.Mail.LinkedResource">
            <summary>
            Represents an embedded external resource in an email attachment, such as an image in an HTML attachment. 
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.LinkedResource.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of LinkedResource using the supplied Stream. 
            </summary>
            <param name="contentStream">A stream that contains the content for this embedded resource.</param>
        </member>
        <member name="M:Aspose.Network.Mail.LinkedResource.#ctor(System.IO.Stream,System.String)">
            <summary>
            Initializes a new instance of LinkedResource with the values supplied by Stream and MIME MediaType. 
            </summary>
            <param name="contentStream">A stream that contains the content for this embedded resource.</param>
            <param name="mediaType">The MIME media type of the content.</param>
        </member>
        <member name="M:Aspose.Network.Mail.LinkedResource.#ctor(System.IO.Stream,Aspose.Network.Mime.ContentType)">
            <summary>
            Initializes a new instance of LinkedResource with the values supplied by Stream and ContentType. 
            </summary>
            <param name="contentStream">A stream that contains the content for this embedded resource.</param>
            <param name="contentType">The type of the content.</param>
        </member>
        <member name="M:Aspose.Network.Mail.LinkedResource.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of LinkedResource with the specified file name and media type. 
            </summary>
            <param name="fileName">The file name that holds the content for this embedded resource.</param>
            <param name="mediaType">The MIME media type of the content.</param>
        </member>
        <member name="M:Aspose.Network.Mail.LinkedResource.#ctor(System.String)">
            <summary>
            Initializes a new instance of LinkedResource with the specified file name .
            </summary>
            <param name="fileName">The file name that holds the content for this embedded resource.</param>
        </member>
        <member name="M:Aspose.Network.Mail.LinkedResource.Save(System.IO.Stream)">
            <summary>
            Saves the content to specified Stream. 
            </summary>
            <param name="stream">Stream to save this attachment</param>
        </member>
        <member name="M:Aspose.Network.Mail.LinkedResource.Save(System.String)">
            <summary>
            Saves the content to specified file.
            </summary>
            <param name="fileName">String that indicated the filename</param>
        </member>
        <member name="M:Aspose.Network.Mail.LinkedResource.CreateLinkedResourceFromString(System.String)">
            <summary>
            Creates a LinkedResource object from a string to be included in an email attachment as an embedded resource. The default media type is plain text, and the default content type is ASCII. 
            </summary>
            <param name="content">A string that contains the embedded resource to be included in the email attachment.</param>
            <returns>A LinkedResource object that contains the embedded resource to be included in the email attachment. </returns>
        </member>
        <member name="M:Aspose.Network.Mail.LinkedResource.CreateLinkedResourceFromString(System.String,Aspose.Network.Mime.ContentType)">
            <summary>
            Creates a LinkedResource object from a string to be included in an email attachment as an embedded resource, with the specified content type, and media type as plain text. 
            </summary>
            <param name="content">A string that contains the embedded resource to be included in the email attachment.</param>
            <param name="contentType">The type of the content.</param>
            <returns>A LinkedResource object that contains the embedded resource to be included in the email attachment. </returns>
        </member>
        <member name="M:Aspose.Network.Mail.LinkedResource.CreateLinkedResourceFromString(System.String,System.Text.Encoding,System.String)">
            <summary>
            Creates a LinkedResource object from a string to be included in an email attachment as an embedded resource, with the specified content type, and media type. 
            </summary>
            <param name="content">A string that contains the embedded resource to be included in the email attachment.</param>
            <param name="contentEncoding">The type of the content.</param>
            <param name="mediaType">The MIME media type of the content.</param>
            <returns>A LinkedResource object that contains the embedded resource to be included in the email attachment. </returns>
        </member>
        <member name="P:Aspose.Network.Mail.LinkedResource.ContentLink">
            <summary>
            Gets or sets a URI that the resource must match.
            </summary>
        </member>
        <member name="P:Aspose.Network.Mail.LinkedResource.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="T:Aspose.Network.Mail.DeliveryNotificationOptions">
            <summary>
            <p>Describes the delivery notification options for e-mail. </p>
            This enumeration has a FlagsAttribute attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.DeliveryNotificationOptions.Delay">
            <summary>
            Notify if the delivery is delayed 
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.DeliveryNotificationOptions.OnFailure">
            <summary>
            Notify if the delivery is unsuccessful. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.DeliveryNotificationOptions.None">
            <summary>
            No notification. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.DeliveryNotificationOptions.Never">
            <summary>
            Never notify. 
            </summary>
        </member>
        <member name="F:Aspose.Network.Mail.DeliveryNotificationOptions.OnSuccess">
            <summary>
            Notify if the delivery is successful. 
            </summary>
        </member>
        <member name="T:Aspose.Network.Mail.AlternateViewCollection">
            <summary>
            Represents a collection of AlternateView objects. 
            </summary>
        </member>
        <member name="M:Aspose.Network.Mail.AlternateViewCollection.#ctor">
            <summary>
            Initializes a new instance of AlternateViewCollection class.
            </summary>
        </member>
    </members>
</doc>
