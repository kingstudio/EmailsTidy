<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Aspose.Editor.Client</name>
  </assembly>
  <members>
    <member name="T:Aspose.Editor.Client.IAttachable">
      <summary>
            Interface implemented by controls which can be dynamically attached to the editor
            and detached from it. If control implements this interface then it will receive
            attach and detach notifications through it.
            </summary>
      <remarks>
        <p>It is recommended that external controls implement default constructor and this
            interface, this allows them to be dynamically activated when attached to the editor
            and be functional in the design mode.</p>
        <p>If control subscribes to events from the editor or objects provided by the editor
            then it shall unsubscribe from these events and dispose object references when detached.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.IAttachable.OnAttached(System.Object,Aspose.Editor.Client.AttachedEventArgs)">
      <summary>
            Occurs when this instance is attached to the editor control.
            </summary>
      <param name="sender">Parent control.</param>
      <param name="e">Arguments of the event.</param>
      <remarks>
        <p>Note that sender is not editor control, it can be other control
            attached to the editor control.</p>
        <p>In order to get <see cref="T:Aspose.Editor.Client.EditorControl" /> reference use
            <see cref="P:Aspose.Editor.Client.AttachedEventArgs.Editor" /> property.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.IAttachable.OnDetached(System.Object,System.EventArgs)">
      <summary>
            Occurs when this instance is detached from the editor control.
            </summary>
      <param name="sender">Parent object.</param>
      <param name="e">EventArgs.Empty.</param>
      <remarks>
        <p>Sender object is not editor control.</p>
        <p>In order to get <see cref="T:Aspose.Editor.Client.EditorControl" /> reference use
            <see cref="P:Aspose.Editor.Client.AttachedEventArgs.Editor" /> property.</p>
      </remarks>
    </member>
    <member name="T:Aspose.Editor.Client.AttributesChangedEventHandler">
      <summary>
            Represents the method that will handle the <see cref="E:Aspose.Editor.Client.EditorControl.AttributesChanged" /> event.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.AttributesChangedEventArgs">
      <summary>
            Provides data for the <see cref="E:Aspose.Editor.Client.EditorControl.AttributesChanged" /> event.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.AttributesChangedEventArgs.Start">
      <summary>
            Gets range start.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.AttributesChangedEventArgs.End">
      <summary>
            Gets range end.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Core.Attribute.AttrGroup">
      <summary>
            Reserved for internal use.
            </summary>
      <dev>
            Attributes collection wrapper.
            This is just an interface to attribute collection stored
            in the attribute manager and associated with attribute owner
            formating id (AttrCollection).
            </dev>
    </member>
    <member name="T:Aspose.Editor.Client.FileCorruptedException">
      <summary>
            Thrown during document load, when the document appears to be corrupted and impossible to load.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.DocumentFormat">
      <summary>
            Indicates the format of a document.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.DocumentFormat.None">
      <summary>
            Unknown or unsupported format.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.HorizontalAlignment">
      <summary>
            Specifies horizontal alignment of a floating shape, text frame or floating table.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.HorizontalAlignment.None">
      <summary>
            The object is explicitly positioned, usually using its <b>Left</b> property.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.HorizontalAlignment.Left">
      <summary>
            The object is aligned to the left of the reference object.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.HorizontalAlignment.Center">
      <summary>
            The object is centered relative to the reference object.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.HorizontalAlignment.Right">
      <summary>
            The object is aligned to the right of the reference object.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.HorizontalAlignment.Inside">
      <summary>
            Not documented.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.HorizontalAlignment.Outside">
      <summary>
            Not documented.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.TabStop">
      <summary>
             Represents a single custom tab stop. The <see cref="T:Aspose.Editor.Client.TabStop" /> object is a member of the
             <see cref="T:Aspose.Editor.Client.TabStops" /> collection.
             </summary>
      <remarks>
        <p>You do not create instances of this class directly. You obtain or create tab stops
             via the methods of the <see cref="T:Aspose.Editor.Client.TabStops" /> collection.</p>
        <seealso cref="T:Aspose.Editor.Client.TabStops" />
      </remarks>
    </member>
    <member name="T:Aspose.Editor.Core.Attribute.RangeAttrGroup">
      <summary>
            Reserved for internal use.
            </summary>
    </member>
    <member name="M:Aspose.Editor.Client.TabStop.Clear">
      <summary>
            Removes the specified custom tab stop.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.TabStop.Position">
      <summary>
            Gets the position of the tab stop in points.
            </summary>
      <remarks>
        <p>You cannot directly change a position of an existing <see cref="T:Aspose.Editor.Client.TabStop" />,
            but you can remove a <see cref="T:Aspose.Editor.Client.TabStop" /> and add a new one using methods
            of the <see cref="T:Aspose.Editor.Client.TabStops" /> collection.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.TabStop.Alignment">
      <summary>
            Gets or sets the alignment of text at this tab stop.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.TabStop.Leader">
      <summary>
            Gets or sets the type of the leader line displayed under the tab character.
            </summary>
      <remarks>
        <p>Currently, tab leader lines are not displayed in the editor control.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.TabStop.IsClear">
      <summary>
            Returns true if this tab stop clears any existing tab stops in this position.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.LayoutType">
      <summary>
            Type of the document layout.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.LayoutType.Page">
      <summary>
            Document is layout on pages. Margins and borders are rendered.
            This layout is the same as print preview.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.LayoutType.Normal">
      <summary>
            Document is layout on infinite page. This layout is similar to 
            continuous text flow.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.StandardContextMenu">
      <summary>
            Provides standard implementation of the context menu for the <see cref="T:Aspose.Editor.Client.EditorControl" /></summary>
    </member>
    <member name="M:Aspose.Editor.Client.StandardContextMenu.#ctor(Aspose.Editor.Client.EditorControl)">
      <summary>
            Initializes new instance of this class.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.BuiltInDocumentProperties">
      <summary>
            A collection of built-in document properties.
            </summary>
      <remarks>
        <p>A document has a standard set of informational properties, they are
            called built-in document properties.</p>
        <p>
          <see cref="T:Aspose.Editor.Client.BuiltInDocumentProperties" /> provides access to <see cref="T:Aspose.Editor.Client.DocumentProperty" /> 
            objects by their names (using an indexer) and via a set of typed properties such as
            <see cref="P:Aspose.Editor.Client.BuiltInDocumentProperties.Title" />, <see cref="P:Aspose.Editor.Client.BuiltInDocumentProperties.Author" /> and so on that return values of appropriate types.</p>
        <p>You do not create instances of this class directly. You access built-in document properties
            via the <see cref="P:Aspose.Editor.Client.Document.BuiltInDocumentProperties" /> property.</p>
        <seealso cref="T:Aspose.Editor.Client.Document" />
        <seealso cref="T:Aspose.Editor.Client.CustomDocumentProperties" />
        <seealso cref="T:Aspose.Editor.Client.DocumentProperty" />
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.BuiltInDocumentProperties.Count">
      <summary>
            Gets number of items in the collection.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.BuiltInDocumentProperties.Item(System.String)">
      <overloads>Returns a <see cref="T:Aspose.Editor.Client.DocumentProperty" /> object.</overloads>
      <summary>
            Returns a <see cref="T:Aspose.Editor.Client.DocumentProperty" /> object by the name of the property.
            </summary>
      <remarks>
        <p>The string names of the properties correspond to the names of the typed
            properties available from <see cref="T:Aspose.Editor.Client.BuiltInDocumentProperties" />.</p>
        <p>If you request a property that is not present in the document, but the name
            of the property is recognized as a valid built-in name, a new <see cref="T:Aspose.Editor.Client.DocumentProperty" /> 
            is created, added to the collection and returned. The newly created property is assigned
            a default value (empty string, zero, false or DateTime.MinValue depending on the type
            of the built-in property).</p>
        <p>If you request a property that is not present in the document and the name
            is not recognized as a built-in name, a null is returned.</p>
      </remarks>
      <param name="name">The case-sensitive name of the property to retrieve.</param>
    </member>
    <member name="P:Aspose.Editor.Client.BuiltInDocumentProperties.Item(System.Int32)">
      <summary>
            Returns a <see cref="T:Aspose.Editor.Client.DocumentProperty" /> object by index.
            </summary>
      <param name="index">Zero-based index of the <see cref="T:Aspose.Editor.Client.DocumentProperty" /> to retrieve.</param>
    </member>
    <member name="P:Aspose.Editor.Client.BuiltInDocumentProperties.Author">
      <summary>
            Gets or sets the name of the document's author.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.BuiltInDocumentProperties.Bytes">
      <summary>
            Represents an estimate of the number of bytes in the document.
            </summary>
      <remarks>
        <p>This property is sometimes not set by Microsoft Word.</p>
        <p>Note: Aspose.Editor does not update this property when you modify the document.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.BuiltInDocumentProperties.Comments">
      <summary>
            Gets or sets the document comments.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.BuiltInDocumentProperties.Category">
      <summary>
            Gets or sets the category of the document.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.BuiltInDocumentProperties.Company">
      <summary>
            Gets or sets the company property.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.BuiltInDocumentProperties.CreatedTime">
      <summary>
            Gets or sets date of the document creation in UTC.
            </summary>
      <remarks>
        <p>Aspose.Editor does not update this property when you modify the document.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.BuiltInDocumentProperties.Keywords">
      <summary>
            Gets or sets the document keywords.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.BuiltInDocumentProperties.LastPrinted">
      <summary>
            Gets or sets the date when the document was last printed in UTC.
            </summary>
      <remarks>
        <p>If the document was never printed, this property will return DateTime.MinValue.</p>
        <p>Aspose.Editor does not update this property when you modify the document.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.BuiltInDocumentProperties.LastSavedBy">
      <summary>
            Gets or sets the name of the last author.
            </summary>
      <remarks>
        <p>Aspose.Editor does not update this property when you modify the document.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.BuiltInDocumentProperties.LastSavedTime">
      <summary>
            Gets or sets the time of the last save in UTC.
            </summary>
      <remarks>
        <p>Aspose.Editor does not update this property when you modify the document.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.BuiltInDocumentProperties.Manager">
      <summary>
            Gets or sets the manager property.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.BuiltInDocumentProperties.NameOfApplication">
      <summary>
            Gets or sets the name of the application.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.BuiltInDocumentProperties.RevisionNumber">
      <summary>
            Gets or sets the document revision number. 
            </summary>
      <remarks>
        <p>Aspose.Editor does not update this property when you modify the document.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.BuiltInDocumentProperties.Subject">
      <summary>
            Gets or sets the subject of the document.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.BuiltInDocumentProperties.Title">
      <summary>
            Gets or sets the title of the document.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.BuiltInDocumentProperties.TotalEditingTime">
      <summary>
            Gets or sets the total editing time in minutes.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.BuiltInDocumentProperties.Version">
      <summary>
            Represents the version number of the application that created the document.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.StyleType">
      <summary>
            Specifies the style type.
            </summary>
      <dev>
            Integer value of the type is made to match with std.sgc value.
            </dev>
    </member>
    <member name="F:Aspose.Editor.Client.StyleType.Unspecified">
      <summary>
            Style type is unspecified.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.StyleType.Paragraph">
      <summary>
            The style is a paragraph style.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.StyleType.Character">
      <summary>
            The style is a character style.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.StyleType.Table">
      <summary>
            The style is a table style.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.Selection">
      <summary>
             Represents either a selected (highlighted) text in the editor control,
             or the insertion point if nothing in the document is selected.
             </summary>
      <remarks>
        <p>Use the <see cref="P:Aspose.Editor.Client.EditorControl.Selection" /> property of the <see cref="T:Aspose.Editor.Client.EditorControl" /> class
             to return the current selection. You do not create instances of <see cref="T:Aspose.Editor.Client.Selection" /> directly. </p>
        <p>The <see cref="T:Aspose.Editor.Client.Selection" /> object has various methods and properties that allow you to expand,
             collapse or otherwise change the current selection: <see cref="M:Aspose.Editor.Client.Selection.Move(Aspose.Editor.Client.MoveUnitVertical,System.Int32,System.Boolean)" />,
             <see cref="M:Aspose.Editor.Client.Selection.EndKey(Aspose.Editor.Client.JumpUnit,System.Boolean)" />, <see cref="M:Aspose.Editor.Client.Selection.HomeKey(Aspose.Editor.Client.JumpUnit,System.Boolean)" /> and so on.</p>
        <p>The <see cref="T:Aspose.Editor.Client.Selection" /> object has various methods and properties with which you can edit
             selected text: <see cref="M:Aspose.Editor.Client.Selection.TypeText(System.String)" />, <see cref="M:Aspose.Editor.Client.Selection.TypeParagraph" />, <see cref="P:Aspose.Editor.Client.Selection.Bold" />,
             <see cref="P:Aspose.Editor.Client.Selection.Italic" /> and so on.</p>
        <p>Use the <see cref="P:Aspose.Editor.Client.Selection.Range" /> property to obtain a range that represents the current selection.
             The <see cref="T:Aspose.Editor.Client.Range" /> object provides more methods and properties to programmatically
             edit and format the text.</p>
        <seealso cref="T:Aspose.Editor.Client.EditorControl" />
        <seealso cref="P:Aspose.Editor.Client.Selection.Range" />
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.Selection.TypeBackspace">
      <summary>
            Types the BACKSPACE key.
            </summary>
      <remarks>
        <p>Deletes the character preceding a collapsed selection (an insertion point).
            If the selection isn't collapsed to an insertion point, the selection is deleted.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.Selection.TypeDelete">
      <summary>
            Types the DELETE key.
            </summary>
      <remarks>
        <p>Deletes the character following a collapsed selection (an insertion point).</p>
        <p>If the selection isn't collapsed to an insertion point, the selection is deleted.</p>
        <p>Last paragraph break in the document cannot be deleted.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.Selection.TypeParagraph">
      <summary>
            Types the ENTER key.
            </summary>
      <remarks>
        <p>Inserts a new, blank paragraph. If the selection isn't collapsed to an
            insertion point it is replaced by the new paragraph.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.Selection.TypeText(System.String)">
      <summary>
            Inserts the specified text at the insertion point.
            </summary>
      <remarks>
        <p>If the selection isn't collapsed to an insertion point it is replaced by the specified text.</p>
        <p>Note that when paragraph break character is selected and is at the end of the selection, it is not replaced.</p>
      </remarks>
      <param name="text">The text to be inserted.</param>
    </member>
    <member name="M:Aspose.Editor.Client.Selection.TypeTab">
      <summary>
            Types the TAB key.
            </summary>
      <remarks>
            Intelligent processing of the Tab key is done in the <see cref="M:Aspose.Editor.Core.Control.PageView.none_TabKey(Aspose.Editor.Core.Events.EventProcessor)" />.
            </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.Selection.HomeKey(Aspose.Editor.Client.JumpUnit,System.Boolean)">
      <summary>
            Moves or extends the selection to the beginning of the specified unit.
            </summary>
      <param name="jumpUnit">The unit by which the selection is to be moved or extended.</param>
      <param name="isExtend">If <b>false</b> the selection is collapsed to the start
            and then moved, othwerwise the selection is extended.</param>
      <remarks>This methods corresponds to the functionality of the HOME key.</remarks>
    </member>
    <member name="M:Aspose.Editor.Client.Selection.EndKey(Aspose.Editor.Client.JumpUnit,System.Boolean)">
      <summary>
            Moves or extends the selection to the end of the specified unit.
            </summary>
      <param name="jumpUnit">The unit by which the selection is to be moved or extended.</param>
      <param name="isExtend">If <b>false</b> the selection is collapsed to the end and then moved,
            othwerwise the selection is extended.</param>
      <remarks>This methods corresponds to the functionality of the END key.</remarks>
    </member>
    <member name="M:Aspose.Editor.Client.Selection.Move(Aspose.Editor.Client.MoveUnitVertical,System.Int32,System.Boolean)">
      <overloads>Moves the active end of the selection.</overloads>
      <summary>
            Moves the active end of the selection up or down.
            </summary>
      <param name="moveUnit">The unit by which the selection is to be moved.</param>
      <param name="count">The number of units the selection is to be moved.
            If the value is positive then the active end of the selection moves down.
            If the value is negative then the active end of the selection moves up.
            </param>
      <param name="isExtend">If <b>true</b> the selection is extended.
            If <b>false</b>, the selection is first collapsed and then moved.</param>
    </member>
    <member name="M:Aspose.Editor.Client.Selection.Move(Aspose.Editor.Client.MoveUnitHorizontal,System.Int32,System.Boolean)">
      <summary>
            Moves the active end of the selection left or right.
            </summary>
      <param name="moveUnit">The unit by which the selection is to be moved.</param>
      <param name="count">The number of units the selection is to be moved.</param>
      <param name="isExtend">If <b>true</b> the selection is extended.
            If <b>false</b>, the selection is first collapsed and then moved.</param>
    </member>
    <member name="M:Aspose.Editor.Client.Selection.MoveEnd(Aspose.Editor.Client.MoveUnitHorizontal,System.Int32)">
      <summary>
            Moves the ending character position of the selection. The selection is
            extended or shrinked as a result.
            </summary>
      <param name="moveUnit">The unit by which to move the ending character position.</param>
      <param name="count">The number of units to move. If this number is positive, the
            ending character position is moved forward in the document. If this number is
            negative, the end is moved backward.</param>
      <remarks>
            If the ending position overtakes the starting position, the selection collapses
            and both character positions move together.
            </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.Selection.MoveStart(Aspose.Editor.Client.MoveUnitHorizontal,System.Int32)">
      <summary>
            Moves the start character position of the selection. The selection is
            extended or shrinked as a result.
            </summary>
      <param name="moveUnit">The unit by which start position of the selection is to be moved.</param>
      <param name="count">The number of units to move. If this number is positive,
            the start character position is moved forward in the document. If this number
            is negative, the start is moved backward.</param>
      <remarks>
            If the start position is moved forward to a position beyond the end position,
            the selection is collapsed and both the start and end positions are moved together.
            </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.Selection.ToString">
      <summary>
            Returns string representation of the selection instance. This is not plain text of the selection, but a debug information.
            </summary>
      <remarks>
        <p>To get plain text of the selection, use the <see cref="P:Aspose.Editor.Client.Range.Text" /> property of
            the <see cref="P:Aspose.Editor.Client.Selection.Range" /> object.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.Selection.ScrollIntoView">
      <summary>
            Moves view window to keep caret inside.
            </summary>
      <remarks>This method is called automatically when caret moves.</remarks>
      <dev>
            We always try to keep visible caret baseline and character which is to the left of it.
            If there is no character to the left, then we try to keep visible character to the right.
            </dev>
    </member>
    <member name="P:Aspose.Editor.Client.Selection.IsOvertype">
      <summary>
            Gets or sets overtype mode. If True typed character replaces existing character
            at caret position, if False typed character is inserted before existing character
            at caret position.
            </summary>
      <dev>TODO: test this</dev>
    </member>
    <member name="P:Aspose.Editor.Client.Selection.IsEmpty">
      <summary>
            Gets indication of whether selection is collapsed (has zero length).
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Selection.IsStartActive">
      <summary>
            Gets or sets the indication whether the selection start is active.
            When <b>true</b>, the selection start is active; otherwise the selection end is active.
            </summary>
      <remarks>
        <p>A <see cref="T:Aspose.Editor.Client.Selection" /> has two positions (ends): start and end.
            One of the ends of the selection is <c>active</c>. The active end of the selection
            is where the caret is.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.Selection.BackColor">
      <summary>
            Gets or sets the background color of the selection.
            </summary>
      <remarks>
        <p>Note that foreground color is always <see cref="P:System.Drawing.SystemColors.HighlightText" />.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.Selection.Range">
      <summary>
            Gets the <see cref="T:Aspose.Editor.Client.Range" /> object which corresponds to the current selection.
            </summary>
      <remarks>
            Modifying start or end positions of the <see cref="T:Aspose.Editor.Client.Range" /> object returned
            by this property changes the selection in the editor control.
            </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.Selection.Bold">
      <summary>
            True if the font is formatted as bold.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Selection.Italic">
      <summary>
            True if the font is formatted as italic.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Selection.Underline">
      <summary>
            Gets or sets font underline type.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Selection.IsVisible">
      <summary>
            Get or sets visibility state of the selection.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Selection.PageNumber">
      <summary>
            Gets the 1-based current page number.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Selection.LineNumber">
      <summary>
            Gets the 1-based current line number on the current page.
            Note that if line is inside table cell it has no valid number, returned is negative value.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Selection.SectionNumber">
      <summary>
            Gets the 1-based number of the current section.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Selection.CharacterNumber">
      <summary>
            Gets the 1-based character position in the current line, useful for status bar text.
            </summary>
      <remarks>
        <p>If the caret is at the beginning of a line, returns 1.</p>
      </remarks>
    </member>
    <member name="E:Aspose.Editor.Client.Selection.Changed">
      <summary>
            Occurs when either <see cref="P:Aspose.Editor.Client.Range.Start" /> or <see cref="P:Aspose.Editor.Client.Range.End" /> property changes.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Core.Events.EventProcessor">
      <summary>
            Provides event processing for the derived controls. This class is for internal use only.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.StandardControls">
      <summary>
            Contains static methods which create standard controls.
            </summary>
      <remarks>
        <p>Standard controls can be used with <see cref="P:Aspose.Editor.Client.EditorControl.Bars" /> property in
            order to get default implementation of the menu bar, tool bar, ruler and others.</p>
        <p>Some of the returned standard controls can be customized by the application. For
            example menu bar can be extended with additonal menu items.</p>
        <seealso cref="T:Aspose.Editor.Client.EditorBars" />
        <seealso cref="T:Aspose.Editor.Client.StandardMenuBar" />
        <seealso cref="T:Aspose.Editor.Client.StandardToolBar" />
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.StandardControls.CreateRulerHorizontal">
      <summary>
            Creates standard horizontal ruler control.
            </summary>
      <returns>Standard horizontal ruler control.</returns>
      <remarks>Returned control can be used with <see cref="P:Aspose.Editor.Client.EditorBars.Rulers" /> property.</remarks>
    </member>
    <member name="M:Aspose.Editor.Client.StandardControls.CreateScrollVertical">
      <summary>
            Creates standard vertical scroll bar control.
            </summary>
      <returns>Standard vertical scroll bar control.</returns>
      <remarks>Returned control can be used with <see cref="P:Aspose.Editor.Client.EditorBars.Scrolls" /> property.</remarks>
    </member>
    <member name="M:Aspose.Editor.Client.StandardControls.CreateScrollHorizontal">
      <summary>
            Creates standard horizontal scroll bar control.
            </summary>
      <returns>Standard horizontal scroll bar control.</returns>
      <remarks>Returned control can be used with <see cref="P:Aspose.Editor.Client.EditorBars.Scrolls" /> property.</remarks>
    </member>
    <member name="M:Aspose.Editor.Client.StandardControls.CreateMenuBar(Aspose.Editor.Client.EditorControl)">
      <summary>
            Gets standard menu control.
            </summary>
      <param name="editor">
        <see cref="T:Aspose.Editor.Client.EditorControl" /> which shall host created menu control.</param>
      <returns>Standard menu bar control.</returns>
      <remarks>
        <p>Returned control can be used with <see cref="P:Aspose.Editor.Client.EditorBars.Menu" /> property.</p>
        <seealso cref="T:Aspose.Editor.Client.EditorBars" />
        <seealso cref="T:Aspose.Editor.Client.StandardMenuBar" />
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.StandardControls.CreateToolBar(Aspose.Editor.Client.ToolBarType,Aspose.Editor.Client.EditorControl)">
      <summary>
            Gets standard tool bar control.
            </summary>
      <param name="editor">
        <see cref="T:Aspose.Editor.Client.EditorControl" /> which shall host created tool bar control.</param>
      <returns>Standard tool bar control.</returns>
      <remarks>
        <p>Returned control can be used with <see cref="P:Aspose.Editor.Client.EditorBars.Tools" /> property.</p>
        <seealso cref="T:Aspose.Editor.Client.EditorBars" />
        <seealso cref="T:Aspose.Editor.Client.StandardToolBar" />
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.StandardControls.CreateStatusBar">
      <summary>
            Gets standard status bar control.
            </summary>
      <returns>Standard status bar control.</returns>
      <remarks>
        <p>Returned control can be used with <see cref="P:Aspose.Editor.Client.EditorBars.Status" /> property.</p>
      </remarks>
    </member>
    <member name="T:Aspose.Editor.Client.EditorBars">
      <summary>
            Represents collection of the controls which appear in the editor control client area.
            Controls include main menu, status bar, scroll bars, tool bars and rulers.
            </summary>
      <remarks>
        <p>Application can use any custom implementation of the controls, e.g. you can use
            your own custom scroll bar or menu. It is recommended that custom controls implement 
            <see cref="T:Aspose.Editor.Client.IAttachable" /> interface thought it is not required.</p>
        <p>Depending on where you assign your custom control <see cref="T:Aspose.Editor.Client.EditorBars" /> will dock
            it appropriately. Docking order is the following (top to bottom): menu bar, tool bars, ruler, 
            editor surface, horizontal scroll bar, status bar. Vertical ruler is docked to the left and
            vertical scroll bar is docked to the right.</p>
        <seealso cref="T:Aspose.Editor.Client.IAttachable" />
        <seealso cref="T:Aspose.Editor.Client.StandardControls" />
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.EditorBars.Rebuild">
      <summary>
            Rebuilds the collection of controls.
            </summary>
      <remarks>It is useful when commands properties were changed and standard 
            controls need to be updated.</remarks>
    </member>
    <member name="P:Aspose.Editor.Client.EditorBars.Menu">
      <summary>
            Gets or sets menu bar control.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.EditorBars.Status">
      <summary>
            Gets or sets status bar control.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.EditorBars.Tools">
      <summary>
            Gets or sets tool bar controls.
            </summary>
      <remarks>
        <p>Controls are arrange from left to right accoding to the order they appear in the array.</p>
        <seealso cref="M:Aspose.Editor.Client.StandardControls.CreateToolBar(Aspose.Editor.Client.ToolBarType,Aspose.Editor.Client.EditorControl)" />
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.EditorBars.Rulers">
      <summary>
            Gets or sets ruler controls.
            </summary>
      <remarks>
        <p>Two rulers expected, first one is horizontal, second one is vertical.</p>
        <p>You can pass null value (or array with null elements) to disable all rulers or specific ruler.</p>
        <seealso cref="M:Aspose.Editor.Client.StandardControls.CreateRulerHorizontal" />
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.EditorBars.Scrolls">
      <summary>
            Gets or sets scroll bar controls.
            </summary>
      <remarks>
        <p>Two scrolls expected, first one is horizontal, second one is vertical.</p>
        <p>You can pass null value (or array with null elements) to disable all scroll 
            bars or specific scroll bar.</p>
        <seealso cref="M:Aspose.Editor.Client.StandardControls.CreateScrollHorizontal" />
        <seealso cref="M:Aspose.Editor.Client.StandardControls.CreateScrollVertical" />
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.EditorBars.IsScrollBarsVisible">
      <summary>
            Gets or sets scroll bars visibility.
            </summary>
      <remarks>
        <p>Default value is <b>True</b>.</p>
        <p>Alternatively application can assign <see cref="P:Aspose.Editor.Client.EditorBars.Scrolls" /> property to 
            remove or add scrolls.</p>
      </remarks>
    </member>
    <member name="T:Aspose.Editor.Client.Range">
      <summary>
             Represents a contiguous area in a document. <see cref="T:Aspose.Editor.Client.Range" /> is the main class
             to programmatically access and modify text and formatting in a document.
             </summary>
      <remarks>
        <p>Each <see cref="T:Aspose.Editor.Client.Range" /> object is defined by a starting and ending character position.
             <see cref="T:Aspose.Editor.Client.Range" /> objects are used to identify specific portions of a document that
             you want to access or modify.</p>
        <p>If you look at the whole document as a string of text with formatting attributes applied
             at certain positions, then the <see cref="T:Aspose.Editor.Client.Range" /> object is like a "window" into that string.
             Through a <see cref="T:Aspose.Editor.Client.Range" /> your code can "see" and modify text and formatting of the document,
             but the <see cref="T:Aspose.Editor.Client.Range" /> itself does not store any text or formatting in it.</p>
        <p>
          <see cref="T:Aspose.Editor.Client.Range" /> objects are not visible objects and are independent of the selection.
             That is, you can define and manipulate a range without changing the selection.
             You can also define multiple ranges in a document, while there can be only one selection.</p>
        <p>You do not create <see cref="T:Aspose.Editor.Client.Range" /> objects directly. You obtain ranges using the
             <see cref="M:Aspose.Editor.Client.Document.GetRange(System.Int32,System.Int32)" /> method from various objects, such as
             <see cref="T:Aspose.Editor.Client.Document" />, <see cref="T:Aspose.Editor.Client.Paragraph" /> and
             <see cref="T:Aspose.Editor.Client.Section" />. You can obtain <see cref="T:Aspose.Editor.Client.Range" /> that corresponds
             to the current selection in the editor via the <see cref="P:Aspose.Editor.Client.Selection.Range" /> property
             of the <see cref="T:Aspose.Editor.Client.Selection" /> object.
             Once a <see cref="T:Aspose.Editor.Client.Range" /> object is created, it continues to exist until no other objects reference it.</p>
        <p>The <see cref="P:Aspose.Editor.Client.Range.Start" /> property specifies the start of the range which is the first character 
included in the range. The <see cref="P:Aspose.Editor.Client.Range.Length" /> property specifies the number of characters in the range.
The <see cref="P:Aspose.Editor.Client.Range.End" /> property is simply <see cref="P:Aspose.Editor.Client.Range.Start" /> plus <see cref="P:Aspose.Editor.Client.Range.Length" /> and specifies 
the end of the range. As an example, if <see cref="P:Aspose.Editor.Client.Range.Start" /> is 0 and <see cref="P:Aspose.Editor.Client.Range.Length" /> is 5, 
then <see cref="P:Aspose.Editor.Client.Range.End" /> is also 5 and characters 0, 1, 2, 3 and 4 are included in the range. 
Note that character at position 5 is not included in the range.</p>
        <p>
          <see cref="T:Aspose.Editor.Client.Range" /> objects are always "alive", that is they are updated whenever the underlying
             document changes (possibly via other existing <see cref="T:Aspose.Editor.Client.Range" /> objects). As a result of such
             updates, existing <see cref="T:Aspose.Editor.Client.Range" /> objects can expand or collapse. For example, if you had
             one <see cref="T:Aspose.Editor.Client.Range" /> object for character positions 0-20 and then characters 5-10 were deleted
             by the user editing in the control or programmatically via another <see cref="T:Aspose.Editor.Client.Range" /> object,
             then the first <see cref="T:Aspose.Editor.Client.Range" /> object will be updated so it covers characters 0-15.
             Similarly, inserting characters would have expanded the range.</p>
        <p>An interesting situation occurs when getting or setting formating through a <see cref="T:Aspose.Editor.Client.Range" />
             object that includes text with different formatting. For example, a single range can include
             text that is bold and not bold, paragraphs that are left-aligned and centered, etc.
             The description below applies to any type of formatting: character, paragraph or section.</p>
        <p>A consecutive series of characters in a document that have same character formatting is called a "run".
A single <see cref="T:Aspose.Editor.Client.Range" /> or <see cref="T:Aspose.Editor.Client.Selection" /> can encompass a number of runs with different
formatting, but a single <see cref="T:Aspose.Editor.Client.Font" /> is always returned.</p>
        <p>For example, a single <see cref="T:Aspose.Editor.Client.Range" /> can include characters of two runs, first run is bold
and second run is not bold. In this case, properties of the <see cref="T:Aspose.Editor.Client.Font" /> object return the value 
from the first run in the range, that is <see cref="P:Aspose.Editor.Client.Font.Bold" /> will return <b>true</b>.</p>
        <p>When setting any of the <see cref="T:Aspose.Editor.Client.Font" /> properties for a range that contains multiple runs,
the new value is applied to all characters within the range. In the above case, setting
<see cref="P:Aspose.Editor.Client.Font.Bold" /> to <b>true</b>, will make all characters in the range bold.</p>
        <seealso cref="T:Aspose.Editor.Client.Document" />
        <seealso cref="T:Aspose.Editor.Client.Selection" />
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.Range.Collapse(System.Boolean)">
      <summary>
            Collapses a range to the starting or ending position. After a range
            is collapsed, the starting and ending points are equal.
            </summary>
      <param name="toStart">Collapse direction.</param>
    </member>
    <member name="M:Aspose.Editor.Client.Range.SetStartEnd(System.Int32,System.Int32)">
      <summary>
            Sets start and end of the range to the new values.
            </summary>
      <remarks>
        <seealso cref="P:Aspose.Editor.Client.Range.Start" />
        <seealso cref="P:Aspose.Editor.Client.Range.End" />
        <seealso cref="P:Aspose.Editor.Client.Range.Length" />
      </remarks>
      <param name="start">New start of the range.</param>
      <param name="end">New end of the range.</param>
    </member>
    <member name="M:Aspose.Editor.Client.Range.Copy">
      <summary>
            Copies the content of the range to the clipboard.
            </summary>
      <remarks>
        <seealso cref="M:Aspose.Editor.Client.Range.Cut" />
        <seealso cref="M:Aspose.Editor.Client.Range.Paste" />
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.Range.Cut">
      <summary>
             Cuts the fragment of the document contained in this range and saves into the clipboard.
             </summary>
      <remarks>
        <p>After <see cref="M:Aspose.Editor.Client.Range.Cut" />, the range is collapsed to the start position.</p>
        <seealso cref="M:Aspose.Editor.Client.Range.Copy" />
        <seealso cref="M:Aspose.Editor.Client.Range.Paste" />
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.Range.Paste">
      <summary>
             Replaces the current range content with the content of the clipboard.
             </summary>
      <remarks>
        <p>
          <see cref="M:Aspose.Editor.Client.Range.Paste" /> does nothing if it cannot paste the current content of the clipboard.</p>
        <seealso cref="M:Aspose.Editor.Client.Range.Cut" />
        <seealso cref="M:Aspose.Editor.Client.Range.Copy" />
        <seealso cref="M:Aspose.Editor.Client.Document.CanPaste(System.Windows.Forms.IDataObject)" />
      </remarks>
      <returns>True if paste operation succeeded.</returns>
    </member>
    <member name="M:Aspose.Editor.Client.Range.InsertBefore(System.String)">
      <summary>
            Inserts the specified text before the range. After the text is inserted,
            the range is expanded to include the new text.
            </summary>
      <remarks>
        <seealso cref="P:Aspose.Editor.Client.Range.Text" />
        <seealso cref="M:Aspose.Editor.Client.Range.InsertAfter(System.String)" />
        <seealso cref="M:Aspose.Editor.Client.Range.InsertParagraph" />
      </remarks>
      <param name="text">The text to be inserted.</param>
    </member>
    <member name="M:Aspose.Editor.Client.Range.InsertAfter(System.String)">
      <summary>
            Inserts the specified text at the end of the range. After this
            method is applied, the range expands to include the new text.
            </summary>
      <seealso cref="P:Aspose.Editor.Client.Range.Text" />
      <seealso cref="M:Aspose.Editor.Client.Range.InsertBefore(System.String)" />
      <seealso cref="M:Aspose.Editor.Client.Range.InsertParagraph" />
      <param name="text">The text to be inserted.</param>
    </member>
    <member name="M:Aspose.Editor.Client.Range.InsertParagraph">
      <summary>
             Replaces this range with a new paragraph.
             After this method has been used, the range is the new paragraph.
             </summary>
      <remarks>
        <p>If you don't want to replace the range, use the <see cref="M:Aspose.Editor.Client.Range.Collapse(System.Boolean)" /> method
             before using this method.</p>
        <seealso cref="M:Aspose.Editor.Client.Range.InsertParagraphBefore" />
        <seealso cref="M:Aspose.Editor.Client.Range.InsertParagraphAfter" />
        <seealso cref="M:Aspose.Editor.Client.Range.InsertBefore(System.String)" />
        <seealso cref="M:Aspose.Editor.Client.Range.InsertAfter(System.String)" />
        <seealso cref="P:Aspose.Editor.Client.Range.Text" />
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.Range.InsertParagraphAfter">
      <summary>
            Inserts a paragraph mark after this range.
            After this method is applied, the range expands to include the new paragraph.
            </summary>
      <remarks>
        <seealso cref="M:Aspose.Editor.Client.Range.InsertParagraph" />
        <seealso cref="M:Aspose.Editor.Client.Range.InsertParagraphBefore" />
        <seealso cref="P:Aspose.Editor.Client.Range.Text" />
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.Range.InsertParagraphBefore">
      <summary>
            Inserts a new paragraph before the this range.
            After this method is applied, the range expands to include the new paragraph.
            </summary>
      <remarks>
        <seealso cref="M:Aspose.Editor.Client.Range.InsertParagraph" />
        <seealso cref="M:Aspose.Editor.Client.Range.InsertParagraphAfter" />
        <seealso cref="P:Aspose.Editor.Client.Range.Text" />
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.Range.Clone">
      <summary>
            Creates a new range object that is a copy of the current instance.
            </summary>
      <remarks>
        <p>
          <see cref="M:Aspose.Editor.Client.Range.Clone" /> does not copy any content of formatting because <see cref="T:Aspose.Editor.Client.Range" />
            is just a "window" through which your code accesses or modifies the document.
            <see cref="M:Aspose.Editor.Client.Range.Clone" /> just creates a copy of the <see cref="T:Aspose.Editor.Client.Range" /> so you can, perhaps
            modify one <see cref="T:Aspose.Editor.Client.Range" /> object independently of another.</p>
      </remarks>
      <returns>A new range object that is a copy of this instance.</returns>
    </member>
    <member name="M:Aspose.Editor.Client.Range.WholeStory">
      <summary>
             Expands the range to include the entire story.
             </summary>
      <remarks>
        <p>Text in a Microsoft Word document is kept in several stories: main text, headers/footers,
             footnotes/endnotes, comments, textboxes etc. A <see cref="T:Aspose.Editor.Client.Range" /> is relative to, and always
             attached to a particular story.</p>
        <p>In the current version, Aspose.Editor provides access only to the main text story of the document.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.Range.Delete">
      <summary>
            Deletes the fragment of the document that is contained in this range.
            </summary>
      <remarks>
        <p>After <see cref="M:Aspose.Editor.Client.Range.Delete" />, the range is collapsed to the start position.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.Range.Find(System.String)">
      <summary>
            Finds text in the range.
            </summary>
      <param name="findText">Text to find.</param>
      <returns>A <see cref="T:Aspose.Editor.Client.FindResult" /> object that allows to access the result of the find operation.</returns>
      <remarks>
        <p>This is a shortcut for <see cref="M:Aspose.Editor.Client.Range.Find(System.String,System.Boolean,System.Boolean)" />(findText, true, true).</p>
      </remarks>
      <seealso cref="T:Aspose.Editor.Client.FindResult" />
    </member>
    <member name="M:Aspose.Editor.Client.Range.Find(System.String,System.Boolean,System.Boolean)">
      <summary>
            Finds text in the range.
            </summary>
      <param name="findText">Text to find.</param>
      <param name="isForward">
        <b>True</b> if search is made forward, <b>false</b> otherwise.</param>
      <param name="isMatchCase">
        <b>False</b> if letter case is ignored, <b>true</b> otherwise.</param>
      <returns>A <see cref="T:Aspose.Editor.Client.FindResult" /> object that allows to access the result of the find operation.</returns>
      <seealso cref="T:Aspose.Editor.Client.FindResult" />
    </member>
    <member name="M:Aspose.Editor.Client.Range.Replace(System.String,System.String)">
      <summary>
            Finds and replaces text in the range.
            </summary>
      <param name="findText">Text to find and replace.</param>
      <param name="replaceText">Text to replace with.</param>
      <returns>A <see cref="T:Aspose.Editor.Client.FindResult" /> object that allows to access the result of the find operation and execute replace.</returns>
      <remarks>
        <p>This method executes find only. The text is not automatically replaced. You need to work with
            the <see cref="T:Aspose.Editor.Client.FindResult" /> object returned by this method if you want to actually replace text.</p>
      </remarks>
      <seealso cref="T:Aspose.Editor.Client.FindResult" />
    </member>
    <member name="M:Aspose.Editor.Client.Range.Replace(System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
            Finds and replaces text in the range.
            </summary>
      <param name="findText">Text to find and replace.</param>
      <param name="replaceText">Text to replace with.</param>
      <param name="isForward">
        <b>True</b> if search is made forward, <b>False</b> otherwise.</param>
      <param name="isMatchCase">
        <b>False</b> if letter case is ignored, <b>True</b> otherwise.</param>
      <returns>A <see cref="T:Aspose.Editor.Client.FindResult" /> object that allows to access the result of the find operation and execute replace.</returns>
      <remarks>
        <p>This method executes find only. The text is not automatically replaced. You need to work with
            the <see cref="T:Aspose.Editor.Client.FindResult" /> object returned by this method if you want to actually replace text.</p>
      </remarks>
      <seealso cref="T:Aspose.Editor.Client.FindResult" />
    </member>
    <member name="M:Aspose.Editor.Client.Range.CopyDocument">
      <summary>
            Returns content of the range as a separate document. You can use this property to 
            copy text and formatting of the range.
            </summary>
    </member>
    <member name="M:Aspose.Editor.Client.Range.PasteDocument(Aspose.Editor.Client.Document)">
      <summary>
            Sets content of the range from a document. You can use this property to 
            paste text and formatting into the range.
            </summary>
    </member>
    <member name="M:Aspose.Editor.Client.Range.ClearFormatting">
      <summary>
            Clears the formatting of range.
            </summary>
      <remarks>
            If range contains a whole paragraph or intersects more then one paragraph
            this method also clears the paragraph formatting and applies the "Normal" paragraph
            style if available.
            If range has zero length it is the same as the whole paragraph is selected.
            </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.Range.ClearFormatting(Aspose.Editor.Core.Document.RunType)">
      <summary>
            Clears formatting of object of specified type inside the range.
            </summary>
      <param name="type">Type of objects to clear.</param>
    </member>
    <member name="P:Aspose.Editor.Client.Range.Text">
      <summary>
            Gets or sets the text in the range.
            </summary>
      <remarks>
        <p>The <see cref="P:Aspose.Editor.Client.Range.Text" /> property returns the plain, unformatted text of the range.
            When you set this property, the text of the range is replaced.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.Range.IsEmpty">
      <summary>
            Returns <b>True</b> if the range has zero length.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Range.Start">
      <summary>
             Gets or sets the starting character position of the range.
             </summary>
      <remarks>
        <p>Character positions in a document are 0-based.</p>
        <p>Normally, setting the <see cref="P:Aspose.Editor.Client.Range.Start" /> property also modifies the <see cref="P:Aspose.Editor.Client.Range.Length" /> property.
             However, if <see cref="P:Aspose.Editor.Client.Range.Start" /> is set to a value larger than that of the <see cref="P:Aspose.Editor.Client.Range.End" /> property,
             the <see cref="P:Aspose.Editor.Client.Range.End" /> property is set to the same value as that of the <see cref="P:Aspose.Editor.Client.Range.Start" /> property.</p>
        <p>The starting character position is relative to the beginning of the story.</p>
        <p>The <see cref="P:Aspose.Editor.Client.Range.Start" /> property specifies the start of the range which is the first character 
included in the range. The <see cref="P:Aspose.Editor.Client.Range.Length" /> property specifies the number of characters in the range.
The <see cref="P:Aspose.Editor.Client.Range.End" /> property is simply <see cref="P:Aspose.Editor.Client.Range.Start" /> plus <see cref="P:Aspose.Editor.Client.Range.Length" /> and specifies 
the end of the range. As an example, if <see cref="P:Aspose.Editor.Client.Range.Start" /> is 0 and <see cref="P:Aspose.Editor.Client.Range.Length" /> is 5, 
then <see cref="P:Aspose.Editor.Client.Range.End" /> is also 5 and characters 0, 1, 2, 3 and 4 are included in the range. 
Note that character at position 5 is not included in the range.</p>
        <seealso cref="P:Aspose.Editor.Client.Range.End" />
        <seealso cref="P:Aspose.Editor.Client.Range.Length" />
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.Range.End">
      <summary>
             Gets or sets the ending character position of the range.
             </summary>
      <remarks>
        <p>Character positions in a document are 0-based.</p>
        <p>Normally, setting the <see cref="P:Aspose.Editor.Client.Range.End" /> property also modifies the <see cref="P:Aspose.Editor.Client.Range.Length" />
             property, but if <see cref="P:Aspose.Editor.Client.Range.End" /> is set to a value smaller than the <see cref="P:Aspose.Editor.Client.Range.Start" /> property,
             the <see cref="P:Aspose.Editor.Client.Range.Start" /> property is set to the same value.</p>
        <p>The ending character position is relative to the beginning of the story.</p>
        <p>The <see cref="P:Aspose.Editor.Client.Range.Start" /> property specifies the start of the range which is the first character 
included in the range. The <see cref="P:Aspose.Editor.Client.Range.Length" /> property specifies the number of characters in the range.
The <see cref="P:Aspose.Editor.Client.Range.End" /> property is simply <see cref="P:Aspose.Editor.Client.Range.Start" /> plus <see cref="P:Aspose.Editor.Client.Range.Length" /> and specifies 
the end of the range. As an example, if <see cref="P:Aspose.Editor.Client.Range.Start" /> is 0 and <see cref="P:Aspose.Editor.Client.Range.Length" /> is 5, 
then <see cref="P:Aspose.Editor.Client.Range.End" /> is also 5 and characters 0, 1, 2, 3 and 4 are included in the range. 
Note that character at position 5 is not included in the range.</p>
        <seealso cref="P:Aspose.Editor.Client.Range.Start" />
        <seealso cref="P:Aspose.Editor.Client.Range.Length" />
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.Range.Length">
      <summary>
             Gets or sets the length of the range in character positions.
             </summary>
      <remarks>
        <p>Setting the <see cref="P:Aspose.Editor.Client.Range.Length" /> property also modifies the <see cref="P:Aspose.Editor.Client.Range.End" /> property.</p>
        <p>The <see cref="P:Aspose.Editor.Client.Range.Start" /> property specifies the start of the range which is the first character 
included in the range. The <see cref="P:Aspose.Editor.Client.Range.Length" /> property specifies the number of characters in the range.
The <see cref="P:Aspose.Editor.Client.Range.End" /> property is simply <see cref="P:Aspose.Editor.Client.Range.Start" /> plus <see cref="P:Aspose.Editor.Client.Range.Length" /> and specifies 
the end of the range. As an example, if <see cref="P:Aspose.Editor.Client.Range.Start" /> is 0 and <see cref="P:Aspose.Editor.Client.Range.Length" /> is 5, 
then <see cref="P:Aspose.Editor.Client.Range.End" /> is also 5 and characters 0, 1, 2, 3 and 4 are included in the range. 
Note that character at position 5 is not included in the range.</p>
        <seealso cref="P:Aspose.Editor.Client.Range.Start" />
        <seealso cref="P:Aspose.Editor.Client.Range.End" />
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.Range.StyleName">
      <summary>
            Gets or sets the style applied to this range by style name.
            </summary>
      <remarks>
        <p>The way the style is applied to the range depends on the style type.
If you apply a character style, then the style is applied to all runs of text inside this range. 
If you apply a paragraph style, then the style is applied to all paragraphs that are fully or 
partially contained in the range.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.Range.Font">
      <summary>
            Gets the <see cref="T:Aspose.Editor.Client.Font" /> object that represents the character formatting of the range.
            </summary>
      <remarks>
        <seealso cref="P:Aspose.Editor.Client.Range.ParagraphFormat" />
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.Range.PageSetup">
      <summary>
            Gets the <see cref="T:Aspose.Editor.Client.PageSetup" /> object that represent section formatting (page settings) of the range.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Range.ParagraphFormat">
      <summary>
            Gets the <see cref="T:Aspose.Editor.Client.ParagraphFormat" /> object that represents paragraph formatting of the range.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Range.Paragraphs">
      <summary>
            Gets the collection of paragraphs in the range.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Range.Sections">
      <summary>
            Gets the collection of sections in the range.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Range.Bold">
      <summary>
        <b>True</b> if the range is formatted as bold.
            </summary>
      <remarks>
        <p>This is a shortcut to <c>Range.Font.Bold</c>.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.Range.Italic">
      <summary>
        <b>True</b> if the range is formatted as italic.
            </summary>
      <remarks>
        <p>This is a shortcut to <c>Range.Font.Italic</c>.</p>
      </remarks>
    </member>
    <member name="T:Aspose.Editor.Client.BuiltInStyle">
      <summary>
            Built-in style identifier.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Normal">
      <summary>
            The Normal style.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Heading1">
      <summary>
            The Heading 1 style.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Heading2">
      <summary>
            The Heading 2 style.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Heading3">
      <summary>
            The Heading 3 style.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Heading4">
      <summary>
            The Heading 4 style.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Heading5">
      <summary>
            The Heading 5 style.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Heading6">
      <summary>
            The Heading 6 style.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Heading7">
      <summary>
            The Heading 7 style.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Heading8">
      <summary>
            The Heading 8 style.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Heading9">
      <summary>
            The Heading 9 style.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Index1">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Index2">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Index3">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Index4">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Index5">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Index6">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Index7">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Index8">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Index9">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Toc1">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Toc2">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Toc3">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Toc4">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Toc5">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Toc6">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Toc7">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Toc8">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Toc9">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.NormalIndent">
      <summary>
            The Normal Indent style.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.FootnoteText">
      <summary>
            The Footnote Text style.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.CommentText">
      <summary>
            The Annotation (Comment) Text style.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Header">
      <summary>
            The Header style.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Footer">
      <summary>
            The Footer style.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.IndexHeading">
      <summary>
            The Index Heading style.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Caption">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableOfFigures">
      <summary>
            The Table of Figures style.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.EnvelopeAddress">
      <summary>
            The Envelope Address style.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.EnvelopeReturn">
      <summary>
            The Envelope Return style.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.FootnoteReference">
      <summary>
            The Footnote Reference style.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.CommentReference">
      <summary>
            The Annotation (Comment) Reference style.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.LineNumber">
      <summary>
            The Line Number style.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.PageNumber">
      <summary>
            The Page Number style.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.EndnoteReference">
      <summary>
            The Endnote Reference style.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.EndnoteText">
      <summary>
            The Endnote Text style.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableOfAuthorities">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Macro">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.ToaHeading">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.List">
      <summary>
            The List style.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.ListBullet">
      <summary>
            The List Bullet style.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.ListNumber">
      <summary>
            The List Number style.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.List2">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.List3">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.List4">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.List5">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.ListBullet2">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.ListBullet3">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.ListBullet4">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.ListBullet5">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.ListNumber2">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.ListNumber3">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.ListNumber4">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.ListNumber5">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Title">
      <summary>
            The Title style.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Closing">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Signature">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.DefaultParagraphFont">
      <summary>
            The Default Paragraph Font style.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.BodyText">
      <summary>
            The Body Text style.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.BodyTextInd">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.ListContinue">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.ListContinue2">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.ListContinue3">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.ListContinue4">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.ListContinue5">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.MessageHeader">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Subtitle">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Salutation">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Date">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.BodyText1I">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.BodyText1I2">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.NoteHeading">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.BodyText2">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.BodyText3">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.BodyTextInd2">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.BodyTextInd3">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.BlockQuotation">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Hyperlink">
      <summary>
            The Hyperlink style.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.HyperlinkFollowed">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Strong">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Emphasis">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.DocumentMap">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.PlainText">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.EmailSignature">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.NormalWeb">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.HtmlAcronym">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.HtmlAddress">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.HtmlCite">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.HtmlCode">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.HtmlDefinition">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.HtmlKeyboard">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.HtmlPreformatted">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.HtmlSample">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.HtmlTypewriter">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.HtmlVariable">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableNormal">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.CommentSubject">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.NoList">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.OutlineList1">
      <summary>
            The 1 / a / i style.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.OutlineList2">
      <summary>
            The 1 / 1.1 / 1.1.1 style.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.OutlineList3">
      <summary>
            The Article / Section style.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableSimple1">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableSimple2">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableSimple3">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableClassic1">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableClassic2">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableClassic3">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableClassic4">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableColorful1">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableColorful2">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableColorful3">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableColumns1">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableColumns2">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableColumns3">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableColumns4">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableColumns5">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableGrid1">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableGrid2">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableGrid3">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableGrid4">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableGrid5">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableGrid6">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableGrid7">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableGrid8">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableList1">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableList2">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableList3">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableList4">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableList5">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableList6">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableList7">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableList8">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Table3DEffects1">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Table3DEffects2">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Table3DEffects3">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableContemporary">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableElegant">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableProfessional">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableSubtle1">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableSubtle2">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableWeb1">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableWeb2">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableWeb3">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.BalloonText">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableGrid">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.TableTheme">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.User">
      <summary>
            A user defined style.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.BuiltInStyle.Nil">
      <summary>
            Reserved for system use.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.CommandHandler">
      <summary>
            Represents the method which is called when the command is invoked.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.ConditionHandler">
      <summary>
            Represents the method which returns result of a logical expression.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.Command">
      <summary>
            Represents named action executed on the editor control. Each command is bound to
            the editor control instance it was created by.
            </summary>
      <remarks>
        <p>You do not create instances of this class directly. Use methods of the <see cref="T:Aspose.Editor.Client.Commands" /> class instead.</p>
        <seealso cref="T:Aspose.Editor.Client.Commands" />
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.Command.Invoke">
      <summary>
            Invokes this command.
            </summary>
      <remarks>
        <seealso cref="P:Aspose.Editor.Client.Command.InvokeHandler" />
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.Command.GetToolBarButton">
      <summary>
            Gets <see cref="T:System.Windows.Forms.ToolBarButton" /> which corresponds to this command.
            </summary>
      <remarks>
        <p>Returned object can be added to the <see cref="T:System.Windows.Forms.ToolBar" /> control.</p>
        <p>The object is not linked to a command used to create it hence if you later change text or description
            of the command this change will not be reflected on the objects which were created before.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.Command.GetMenuItem">
      <summary>
            Gets <see cref="T:Aspose.Editor.Client.MenuItem" /> which corresponds to this command.
            </summary>
      <remarks>
        <p>Returned object can be added to the <see cref="T:System.Windows.Forms.Menu" /> control.</p>
        <p>The object is not linked to a command used to create it hence if you later change text or description
            of the command this change will not be reflected on the objects which were created before.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.Command.Name">
      <summary>
            Gets name of the command.
            </summary>
      <remarks>Name can be used to access command instance through <see cref="T:Aspose.Editor.Client.Commands" />.</remarks>
    </member>
    <member name="P:Aspose.Editor.Client.Command.Description">
      <summary>
            Gets or sets text which describes what this command does.
            </summary>
      <remarks>
        <p>Description can be used to build human readable list of commands available.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.Command.Text">
      <summary>
            Gets or sets text of the command.
            </summary>
      <remarks>
        <p>Text can be used as Text, Name and ToolTipText of the UI element which represents this command.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.Command.IsEnabled">
      <summary>
            Gets indication of whether this command can be invoked.
            </summary>
      <remarks>
        <p>If <see cref="P:Aspose.Editor.Client.Command.InvokeHandler" /> == <b>null</b> then returned is <b>false</b>,
            else if <see cref="P:Aspose.Editor.Client.Command.EnabledHandler" /> != <b>null</b> then returned is its result,
            otherwise returned is <b>true</b>.</p>
        <p>This property can be used to update enabled state of the control which corresponds
            to this command.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.Command.IsPushed">
      <summary>
            Gets status of this command.
            </summary>
      <remarks>
        <p>If command implements toggle logic, e.g. Bold command, then
            this method returns state of the corresponding push button.</p>
        <p>If <see cref="P:Aspose.Editor.Client.Command.PushedHandler" /> == <b>null</b> this method returns <b>false</b>.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.Command.Icon">
      <summary>
            Gets image (icon) which corresponds to this command.
            </summary>
      <remarks>
        <p>Icon is used to create <see cref="T:System.Windows.Forms.ToolBarButton" /> control which is
            returned by <see cref="M:Aspose.Editor.Client.Command.GetToolBarButton" /> method.</p>
        <p>This is a shortcut for <code>Commands.ImageList.Images[ImageIndex]</code></p>
      </remarks>
      <seealso cref="P:Aspose.Editor.Client.Commands.ImageList" />
    </member>
    <member name="P:Aspose.Editor.Client.Command.ImageIndex">
      <summary>
            Gets or sets index of the icon image for the command in the image list of the parent commands collection.
            </summary>
      <remarks>Image index is used by <see cref="M:Aspose.Editor.Client.Command.GetToolBarButton" />. The change is not reflected on tool bar buttons already created.</remarks>
      <seealso cref="P:Aspose.Editor.Client.Commands.ImageList" />
    </member>
    <member name="P:Aspose.Editor.Client.Command.Shortcut">
      <summary>
            Gets or sets a shortcut key combination used to invoke the specified command.
            </summary>
      <remarks>When set to Null will remove the shortcut, however menu items and tool bar buttons 
            already created will not be affected. You'll have to change shortcuts for these items separately.</remarks>
    </member>
    <member name="P:Aspose.Editor.Client.Command.Editor">
      <summary>
            Gets <see cref="T:Aspose.Editor.Client.EditorControl" /> which hosts this command.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Command.InvokeHandler">
      <summary>
            Gets or sets method which implements this command.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Command.EnabledHandler">
      <summary>
            Gets or sets method which evaluates whether the control which corresponds to
            this command shall currently be enabled.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Command.PushedHandler">
      <summary>
            Gets or sets method which evaluates whether the control which corresponds to
            this command shall currently have pushed (or checked) state.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.ToolBarType">
      <summary>
            Identifies standard toolbar.
            </summary>
      <remarks>
        <seealso cref="M:Aspose.Editor.Client.StandardControls.CreateToolBar(Aspose.Editor.Client.ToolBarType,Aspose.Editor.Client.EditorControl)" />
      </remarks>
    </member>
    <member name="F:Aspose.Editor.Client.ToolBarType.File">
      <summary>
            Toolbar which contains file commands, e.g. Open, Save.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.ToolBarType.Edit">
      <summary>
            Toolbar which contains edit commands, e.g. Cut, Paste.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.ToolBarType.Format">
      <summary>
            Toolbar which contains format commands, e.g. Font, Paragraph.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.ToolBarType.View">
      <summary>
            Toolbar which contains view commands, e.g. Zoom, ShowAll.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.ToolBarType.Insert">
      <summary>
            Toolbar which contains insert commands, e.g. Insert Break.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.ToolBarType.Table">
      <summary>
            Toolbar which contains table commands, e.g. Insert Table.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.Section">
      <summary>
            Represents a section of a document.
            </summary>
      <remarks>
        <p>You do not create instances of this class directly. You can create or obtain <see cref="T:Aspose.Editor.Client.Section" /> 
            objects from the <see cref="T:Aspose.Editor.Client.Sections" /> collection. The <see cref="T:Aspose.Editor.Client.Sections" /> collection, in turn,
            is available from a <see cref="T:Aspose.Editor.Client.Range" /> object.</p>
        <p>A section in a Microsoft Word document defines page size, orientation, margins,
            number of text columns, headers and footers. One document can have multiple sections.
            In a document, sections are separated by section breaks.</p>
        <seealso cref="T:Aspose.Editor.Client.Range" />
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.Section.GetRange">
      <summary>
            Creates and returns a <see cref="T:Aspose.Editor.Client.Range" /> object that represents the portion 
            of a document contained in the section.
            </summary>
      <returns>Returns a newly created <see cref="T:Aspose.Editor.Client.Range" /> object.</returns>
    </member>
    <member name="P:Aspose.Editor.Client.Section.PageSetup">
      <summary>
            Provides access to the page formatting settings.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.TabAlignment">
      <summary>
            Specifies the alignment/type of a <see cref="T:Aspose.Editor.Client.TabStop" />.
            </summary>
      <remarks>
        <seealso cref="T:Aspose.Editor.Client.TabStop" />
      </remarks>
    </member>
    <member name="F:Aspose.Editor.Client.TabAlignment.Left">
      <summary>
            Left-aligns the text after the tab stop.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.TabAlignment.Center">
      <summary>
            Centers the text around the tab stop.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.TabAlignment.Right">
      <summary>
            Right-aligns the text at the tab stop.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.TabAlignment.Decimal">
      <summary>
            Aligns the text at the decimal dot.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.TabAlignment.Bar">
      <summary>
            Draws a vertical bar at the tab stop position.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.TabAlignment.List">
      <summary>
            The tab is a delimeter between the number/bullet and text in a list item.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.TabAlignment.Clear">
      <summary>
            Clears any tab stop in this position.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.TextColumns">
      <summary>
             A collection of <see cref="T:Aspose.Editor.Client.TextColumn" /> objects that represent all the columns of text in a section.
             </summary>
      <remarks>
        <p>Use the <see cref="P:Aspose.Editor.Client.PageSetup.TextColumns" /> property of the <see cref="T:Aspose.Editor.Client.PageSetup" /> object
             to return the <see cref="T:Aspose.Editor.Client.TextColumns" /> collection. You do not create instances of the
             <see cref="T:Aspose.Editor.Client.TextColumns" /> class directly.</p>
        <seealso cref="T:Aspose.Editor.Client.TextColumn" />
        <seealso cref="T:Aspose.Editor.Client.PageSetup" />
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.TextColumns.Item(System.Int32)">
      <summary>
            Gets the text column at specified index.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.TextColumns.Count">
      <summary>
            Gets or sets the number of text columns.
            </summary>
      <remarks>
        <p>If you set <see cref="P:Aspose.Editor.Client.TextColumns.Count" />, the text is arranged into columns of equal
            width and with equal spacing between them.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.TextColumns.EvenlySpaced">
      <summary>
        <b>True</b> if text columns are evenly spaced.
             </summary>
      <remarks>
        <p>When <see cref="P:Aspose.Editor.Client.TextColumns.EvenlySpaced" /> is <b>true</b>, width of all columns and spacing between them
             are specifed using the <see cref="P:Aspose.Editor.Client.TextColumns.Width" /> and <see cref="P:Aspose.Editor.Client.TextColumns.Spacing" /> properties.</p>
        <p>When <see cref="P:Aspose.Editor.Client.TextColumns.EvenlySpaced" /> is <b>false</b>, text column width and spacing
             after each column is specified in the individual <see cref="T:Aspose.Editor.Client.TextColumn" /> objects.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.TextColumns.Spacing">
      <summary>
            When columns are evenly spaced, gets or sets the amount of space between each column in points.
            </summary>
      <remarks>
        <p>Has effect only when <see cref="P:Aspose.Editor.Client.TextColumns.EvenlySpaced" /> is <b>true</b>.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.TextColumns.Width">
      <summary>
            When columns are evenly spaced, gets the width of the columns.
            </summary>
      <remarks>
        <p>Has effect only when <see cref="P:Aspose.Editor.Client.TextColumns.EvenlySpaced" /> is <b>true</b>.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.TextColumns.LineBetween">
      <summary>
        <b>True</b> when a vertical line between columns is drawn.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.Styles">
      <summary>
            A collection of styles in a document.
            </summary>
      <remarks>
        <p>Use the <see cref="P:Aspose.Editor.Client.Document.Styles" /> property of the <see cref="T:Aspose.Editor.Client.Document" />
            class to return a <see cref="T:Aspose.Editor.Client.Styles" /> collection. You do not create instances of the
            <see cref="T:Aspose.Editor.Client.Styles" /> class directly.</p>
        <p>Use the <see cref="M:Aspose.Editor.Client.Styles.Add(System.String,Aspose.Editor.Client.StyleType)" /> method to add a new style to a document.</p>
        <p>Use the <see cref="P:Aspose.Editor.Client.Styles.Item(System.Int32)" /> property to return a single <see cref="T:Aspose.Editor.Client.Style" /> object.</p>
        <seealso cref="T:Aspose.Editor.Client.Document" />
        <seealso cref="T:Aspose.Editor.Client.Style" />
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.Styles.Add(System.String,Aspose.Editor.Client.StyleType)">
      <summary>
            Creates a new custom style and adds it to the collection.
            </summary>
      <param name="name">Unique name of the style.</param>
      <param name="type">Type of the style.</param>
      <returns>A created style object.</returns>
      <remarks>
        <p>Style names are case-insensitive, that is "Normal" and "normal" are considered the same. 
            Trying to add a style with a name that already exists produces an exception.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.Styles.Add(System.String,Aspose.Editor.Client.StyleType,Aspose.Editor.Client.BuiltInStyle)">
      <summary>
            Adds a built-in style into collection.
            </summary>
      <param name="name">Unique name of style.</param>
      <param name="type">Type of style.</param>
      <param name="builtInStyle">Built-in style identifier.</param>
      <returns>A created style object.</returns>
    </member>
    <member name="M:Aspose.Editor.Client.Styles.Add(Aspose.Editor.Client.Style)">
      <summary>
            Adds unbound style into collection.
            </summary>
      <param name="style">Style to add.</param>
    </member>
    <member name="M:Aspose.Editor.Client.Styles.Add(System.String,Aspose.Editor.Client.StyleType,System.Boolean)">
      <summary>
            Adds a style into collection.
            </summary>
      <param name="name">Unique name of style.</param>
      <param name="type">Type of style.</param>
      <param name="builtIn">True if adding a built-in style.</param>
      <returns>A created style object.</returns>
      <remarks>
            Style names are case-insensetive so "Normal" and "normal" are the same 
            style for the system. Trying to add an existing style produces an exception.
            </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.Styles.Count">
      <summary>
            Gets the number of styles in the collection.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Styles.Item(System.Int32)">
      <overloads>Gets a <see cref="T:Aspose.Editor.Client.Style" /> object from the collection.</overloads>
      <summary>
            Gets a style at the specified index.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Styles.Item(System.String)">
      <summary>
            Gets a style by case-insensitive name. If a style with the specified name is not found, returns null.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Styles.Item(Aspose.Editor.Client.BuiltInStyle)">
      <summary>
            Gets a built-in style by a style identifier. If the specified style is not supported, returns null.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.JumpUnit">
      <summary>
            Movement units used in <see cref="M:Aspose.Editor.Client.Selection.HomeKey(Aspose.Editor.Client.JumpUnit,System.Boolean)" /> and <see cref="M:Aspose.Editor.Client.Selection.EndKey(Aspose.Editor.Client.JumpUnit,System.Boolean)" /> methods.
            </summary>
      <remarks>
        <seealso cref="T:Aspose.Editor.Client.Selection" />
      </remarks>
    </member>
    <member name="F:Aspose.Editor.Client.JumpUnit.Line">
      <summary>
            Movement is made to the start or end of specified line.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.JumpUnit.Story">
      <summary>
            Movement is made to the start or end of the story of selection.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.Shortcut">
      <summary>
            Represents one or more combinations of keys used to invoke a command.
            </summary>
    </member>
    <member name="M:Aspose.Editor.Client.Shortcut.op_Implicit(System.Windows.Forms.Keys)~Aspose.Editor.Client.Shortcut">
      <summary>
            Converts single combination of keys to a shortcut.
            </summary>
      <param name="keys">Keys to convert.</param>
      <returns>Corresponding shortcut.</returns>
    </member>
    <member name="M:Aspose.Editor.Client.Shortcut.#ctor(System.Windows.Forms.Keys[])">
      <summary>
            Creates shortcut from list of keys. This method allows creating shortcut from multiple combinations of keys.
            </summary>
      <example>
            Example below shows how to create a shorcut which encapsulates two combinations of
            keys "Alt+Backspace" and "Control+Z"
            <code>
            Shortcut shortcut = new Shortcut(Keys.Control | Keys.Z, Keys.Alt | Keys.Back)
            </code></example>
    </member>
    <member name="M:Aspose.Editor.Client.Shortcut.op_Implicit(Aspose.Editor.Client.Shortcut)~System.Windows.Forms.Shortcut">
      <summary>
        <see cref="M:Aspose.Editor.Client.Shortcut.ToSystemShortcut(Aspose.Editor.Client.Shortcut)" />.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Shortcut.IsValid">
      <summary>
            Gets indication of whether this shortcut represents valid keys combination.
            </summary>
    </member>
    <member name="T:Aspose.Editor.EditorPlugins">
      <summary>
            Provides access to the plugins loaded into the editor.
            </summary>
      <seealso cref="T:Aspose.Editor.Plugin" />
    </member>
    <member name="M:Aspose.Editor.EditorPlugins.Load">
      <summary>
            Processes plugin entries in the configuration file. This method must be called right after constructor is called.
            </summary>
      <remarks>
            We need to separate loading from construction becase plugin must be able to get to the <see cref="P:Aspose.Editor.EditorPlugins.StatusSink" />
            and this required <see cref="T:Aspose.Editor.EditorPlugins" /> instanse assigned by the <see cref="T:Aspose.Editor.Client.EditorControl" />.
            </remarks>
    </member>
    <member name="M:Aspose.Editor.EditorPlugins.Load(System.String)">
      <summary>
            Loads single plugin class from the specified configuration key.
            </summary>
      <param name="entry">Configuration entry in the form "class@assembly", where 'class' is full name of the class including namespace.
            </param>
      <remarks>
        <p>Note that same plugin can be loaded multiple times which may not be desired.
            It's caller responsibility to check if required plugin is already loaded.</p>
      </remarks>
      <seealso cref="M:Aspose.Editor.EditorPlugins.Load" />
    </member>
    <member name="M:Aspose.Editor.EditorPlugins.Load(System.Collections.ICollection)">
      <summary>
            Loads plugins from the specified list of configuration entries. This method is used
            to dynamically load plugins which are not referenced in the configuration file.
            </summary>
      <param name="entries">List of configuration entries in the form
            "class@assembly", where 'class' is full name of the class including namespace, or "assembly".</param>
      <seealso cref="M:Aspose.Editor.EditorPlugins.Load(System.String)" />
    </member>
    <member name="M:Aspose.Editor.EditorPlugins.GetEnumerator">
      <summary>
            Returns enumerator over the plugin classes in the collection.
            </summary>
    </member>
    <member name="P:Aspose.Editor.EditorPlugins.IsLoaded">
      <summary>
            Returns True if plugin entries in the configuration file were processed.
            </summary>
      <remarks>This property can be used to detect if plugins have been already loaded by the editor.</remarks>
    </member>
    <member name="P:Aspose.Editor.EditorPlugins.Editor">
      <summary>
            Gets editor.
            </summary>
    </member>
    <member name="P:Aspose.Editor.EditorPlugins.Count">
      <summary>
            Gets number of plugins in the collection.
            </summary>
    </member>
    <member name="P:Aspose.Editor.EditorPlugins.Item(System.Int32)">
      <summary>
            Gets plugin.
            </summary>
      <param name="index">Index of the plugin in the collection.</param>
    </member>
    <member name="P:Aspose.Editor.EditorPlugins.Item(System.String)">
      <summary>
            Gets plugin.
            </summary>
      <param name="name">Name of the plugin.</param>
      <remarks>This method returns first plugin which has specified name. If there are two or more plugins with the same
            name then 2nd, 3rd, etc. names are prepended with ".Index", where Index is the index of the plugin in the collection.</remarks>
    </member>
    <member name="P:Aspose.Editor.EditorPlugins.StatusSink">
      <summary>
            Gets delegate used by plugin class to report it's status changes.
            Value is available only to the corresponding plugin while its constructor is being executed.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.TabStops">
      <summary>
            A collection of <see cref="T:Aspose.Editor.Client.TabStop" /> objects that represent custom tabs for a paragraph.
            </summary>
      <remarks>
        <p>You do not create instances of this class directly. You can obtain and modify tab stops
            via the <see cref="P:Aspose.Editor.Client.ParagraphFormat.TabStops" /> property of a <see cref="T:Aspose.Editor.Client.ParagraphFormat" />.</p>
        <seealso cref="T:Aspose.Editor.Client.TabStop" />
        <seealso cref="T:Aspose.Editor.Client.ParagraphFormat" />
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.TabStops.GetPositionByIndex(System.Int32)">
      <summary>
            Gets the position (in points) of the tab stop at the specified index.
            </summary>
      <param name="index">An index into the collection of tab stops.</param>
      <returns>The position of the tab stop (in points).</returns>
    </member>
    <member name="M:Aspose.Editor.Client.TabStops.Add(System.Single,Aspose.Editor.Client.TabAlignment,Aspose.Editor.Client.TabLeader)">
      <summary>
            Adds or replaces a tab stop in the collection.
            </summary>
      <remarks>
        <p>If a tab stop already exists at the specified position, it is replaced.</p>
      </remarks>
      <param name="position">A position (in points) where to add the tab stop.</param>
      <param name="alignment">A <see cref="T:Aspose.Editor.Client.TabAlignment" /> value that
            specifies the alignment of text at the tab stop.</param>
      <param name="leader">A <see cref="T:Aspose.Editor.Client.TabLeader" /> value that 
            specifies the type of the leader line displayed under the tab character.</param>
      <returns>The newly created <see cref="T:Aspose.Editor.Client.TabStop" /> object.</returns>
    </member>
    <member name="M:Aspose.Editor.Client.TabStops.RemoveByPosition(System.Single)">
      <summary>
            Removes a tab stop at the specified position from the collection.
            </summary>
      <param name="position">The position (in points) of the tab stop to remove.</param>
    </member>
    <member name="M:Aspose.Editor.Client.TabStops.RemoveByIndex(System.Int32)">
      <summary>
            Removes a tab stop at the specified index from the collection.
            </summary>
      <param name="index">An index into the collection of tab stops.</param>
    </member>
    <member name="M:Aspose.Editor.Client.TabStops.After(System.Single)">
      <summary>
            Gets a first tab stop to the right of the specified position.
            </summary>
      <remarks>
        <p>Skips tab stops with that have alignment set to <see cref="F:Aspose.Editor.Client.TabAlignment.Bar" />.</p>
      </remarks>
      <param name="position">The reference position (in points).</param>
      <returns>A tab stop object or null if a suitable tab stop was not found.</returns>
    </member>
    <member name="M:Aspose.Editor.Client.TabStops.Before(System.Single)">
      <summary>
            Gets a first tab stop to the left of the specified position.
            </summary>
      <remarks>
        <p>Skips tab stops with that have alignment set to <see cref="F:Aspose.Editor.Client.TabAlignment.Bar" />.</p>
      </remarks>
      <param name="position">The reference position (in points).</param>
      <returns>A tab stop object or null if a suitable tab stop was not found.</returns>
    </member>
    <member name="P:Aspose.Editor.Client.TabStops.Count">
      <summary>
            Gets the number of tab stops in the collection.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.TabStops.Item(System.Single)">
      <overloads>Gets a tab stop from the collection.</overloads>
      <summary>
            Gets a tab stop at the specified position. 
            </summary>
      <remarks>
            Returns null if no tab stop is found at the specified position.
            </remarks>
      <param name="position">The position (in points) of the tab stop.</param>
    </member>
    <member name="P:Aspose.Editor.Client.TabStops.Item(System.Int32)">
      <summary>
            Gets the tab stop at the specified index.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.Style">
      <summary>
             Represents a single built-in or custom style. The <see cref="T:Aspose.Editor.Client.Style" /> object is a member of the
             <see cref="T:Aspose.Editor.Client.Styles" /> collection.
             </summary>
      <remarks>
        <p>You do not create instances of this class directly. You obtain or create styles
             via the methods of the <see cref="T:Aspose.Editor.Client.Styles" /> collection.</p>
        <p>Only paragraph and character style types are currently supported.</p>
        <seealso cref="T:Aspose.Editor.Client.Styles" />
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.Style.Delete">
      <summary>
            Deletes user defined style. Method will not delete built-in styles.
            If paragraph style is deleted and is in use then Normal style is applied to
            corresponding paragraphs. If character style is deleted and is in use then
            formatting is reset for corresponding ranges.
            </summary>
      <remarks>
      </remarks>
      <exception cref="T:System.InvalidOperationException">Built-in styles cannot be deleted.</exception>
    </member>
    <member name="M:Aspose.Editor.Client.Style.ToString">
      <summary>
            Returns the style name.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Style.NextParagraphStyleName">
      <summary>
            Gets or sets the name of the style to be applied automatically to a new paragraph
            inserted after a paragraph formatted with this style.
            </summary>
      <remarks>
        <p>This property is only applicable to paragraph styles.</p>
      </remarks>
      <exception cref="T:System.ArgumentNullException">The value cannot be null.</exception>
      <exception cref="T:System.ArgumentException">A style with the specified name was not found.</exception>
      <exception cref="T:System.ArgumentException">The specified style is not a paragraph style.</exception>
    </member>
    <member name="P:Aspose.Editor.Client.Style.IsInUse">
      <summary>
        <b>True</b> if this style is a built-in style that has been modified or applied in the
            document or a new style that has been created in the document.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Style.IsBuiltIn">
      <summary>
        <b>True</b> if the style is one of the built-in Microsoft Word styles.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Style.Name">
      <summary>
            Gets or sets the name of the style.
            </summary>
      <remarks>
        <p>Names of built-in styles in documents created in different languages of MS Word can be different.</p>
        <seealso cref="T:Aspose.Editor.Client.BuiltInStyle" />
      </remarks>
      <exception cref="T:System.InvalidOperationException">The style is a built-in style and cannot be renamed.</exception>
      <exception cref="T:System.ArgumentNullException">The name cannot be null.</exception>
      <exception cref="T:System.ArgumentException">The name cannot be an empty string.</exception>
      <exception cref="T:System.ArgumentException">The name is already used for another style.</exception>
    </member>
    <member name="P:Aspose.Editor.Client.Style.Type">
      <summary>
            Gets the type of the style.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Style.ParagraphFormat">
      <summary>
            Gets the paragraph formatting of the style.
            </summary>
      <remarks>
        <p>This property is only applicable to paragraph styles.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.Style.Font">
      <summary>
            Gets the character formatting of the style.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Style.BaseStyleName">
      <summary>
            Gets or sets the name of a style on which this style is based.
            </summary>
      <remarks>
        <p>This will be an empty string if the style is not based on any other style
            and it can be set to an empty string.</p>
      </remarks>
    </member>
    <member name="T:Aspose.Editor.Client.Information">
      <summary>
            Provides statistics and counters about the current document in <see cref="T:Aspose.Editor.Client.EditorControl" />.
            </summary>
      <remarks>
        <p>You do not create instances of this class directly. Use the <see cref="P:Aspose.Editor.Client.EditorControl.Information" />
            property of <see cref="T:Aspose.Editor.Client.EditorControl" /> to access current information about the document.</p>
        <seealso cref="T:Aspose.Editor.Client.EditorControl" />
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.Information.PageCount">
      <summary>
            Gets total number of pages in the document.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Information.SectionCount">
      <summary>
            Gets total number of sections in the document.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Information.LineCount">
      <summary>
            Gets total number of lines in the main text story of the document, including lines in table cells.
            End of table row contains row break which is also counted.
            </summary>
      <remarks>This property goes through the document and counts rendered lines, 
            it has O(n) linear complexity. Caller should cache returned value.</remarks>
    </member>
    <member name="T:Aspose.Editor.Client.VerticalAlignment">
      <summary>
            Specifies vertical alignment of a floating shape, text frame or a floating table.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.VerticalAlignment.None">
      <summary>
            The object is explicitly positioned, usually using its <b>Top</b> property.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.VerticalAlignment.Top">
      <summary>
            The object is aligned to the top of the reference object.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.VerticalAlignment.Center">
      <summary>
            The object is centered relative to the reference object.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.VerticalAlignment.Bottom">
      <summary>
            The object is aligned to the right of the reference object.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.VerticalAlignment.Inside">
      <summary>
            Not documented.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.VerticalAlignment.Outside">
      <summary>
            Not documented.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.VerticalAlignment.Inline">
      <summary>
            Not documented. Seems to be a possible value for floating paragraphs and tables.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.PageRenderer">
      <summary>
             Renders document pages into a .NET <see cref="T:System.Drawing.Graphics" /> object.
             The rendered pages look like output from Microsoft Word.
             </summary>
      <remarks>
        <p>
          <see cref="T:Aspose.Editor.Client.PageRenderer" /> allows you to quickly and easily create thumbnails or images of
             individual document pages as well as implement print and preview. All this is possible thanks
             to the versatility of GDI+ and its main class <see cref="T:System.Drawing.Graphics" />.</p>
        <p>You can obtain or create a <see cref="T:System.Drawing.Graphics" /> object that represents a display,
             raster image, metafile, or a printer device. Pass this <see cref="T:System.Drawing.Graphics" /> object
             to <see cref="T:Aspose.Editor.Client.PageRenderer" /> and the document will be rendered on that device.</p>
        <p>The <b>Aspose.Editor.Demo</b> project with source code is included in the <b>Aspose.Editor</b> installer.
             The demo project shows how to use <see cref="T:Aspose.Editor.Client.PageRenderer" /> to create PNG, JPEG and EMF files of document
             pages (one page per file), as well as how to create a single multipage TIFF file that contains all
             pages of a document. You can also specify image scale or dimensions as well as desired resolution.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.PageRenderer.#ctor(Aspose.Editor.Client.Document)">
      <summary>
            Initializes a new instance of this class.
            </summary>
      <param name="document">The document to be rendered.</param>
    </member>
    <member name="M:Aspose.Editor.Client.PageRenderer.Render(System.Int32,System.Drawing.Graphics,System.Single,System.Single,System.Single)">
      <overloads>Renders a page into a <see cref="T:System.Drawing.Graphics" /> object.</overloads>
      <summary>
            Renders the specified page into a <see cref="T:System.Drawing.Graphics" /> object at the specified location and scale.
            </summary>
      <remarks>
        <p>Use this method when you want to draw a page at a specific scale factor.</p>
        <p>Any current transformations or settings specified in <see cref="T:System.Drawing.Graphics" /> are taken into account.</p>
      </remarks>
      <param name="pageIndex">The zero based page number.</param>
      <param name="graphics">The Graphics object where to render to.</param>
      <param name="x">The X coordinate (in world units) where to render the page.</param>
      <param name="y">The Y coordinate (in world units) where to render the page.</param>
      <param name="scale">The scale for rendering the page. 1.0 means 100%.</param>
      <returns>The size (in world units) of the rendered page.</returns>
    </member>
    <member name="M:Aspose.Editor.Client.PageRenderer.Render(System.Int32,System.Drawing.Graphics,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Renders the specified page into a <see cref="T:System.Drawing.Graphics" /> object at the specified location and size.
            </summary>
      <remarks>
        <p>Use this method when you want to draw a page to fit an area of a certain size.</p>
        <p>Any current transformations or settings specified in <see cref="T:System.Drawing.Graphics" /> are taken into account.</p>
      </remarks>
      <param name="pageIndex">The zero based page number.</param>
      <param name="graphics">The Graphics object where to render to.</param>
      <param name="x">The X coordinate (in world units) where to render the page.</param>
      <param name="y">The Y coordinate (in world units) where to render the page.</param>
      <param name="width">The maximum width (in world units) that can be occupied by the rendered page.</param>
      <param name="height">The maximum height (in world units) that can be occupised by the rendered page.</param>
      <returns>The scale that was automatically calculated for the rendered page to fit the specified size.</returns>
    </member>
    <member name="M:Aspose.Editor.Client.PageRenderer.GetPageImageSize(System.Int32,System.Single,System.Single)">
      <summary>
            Gets the page size in pixels.
            </summary>
      <param name="pageIndex">The zero based page number.</param>
      <param name="scale">The zoom factor (1.0 is 100%).</param>
      <param name="resolution">DPI resolution used to convert from size in points to pixels.</param>
      <returns>The size of the page in pixels.</returns>
    </member>
    <member name="M:Aspose.Editor.Client.PageRenderer.GetPageInfo(System.Int32)">
      <summary>
            Gets page size and other information about a page.
            </summary>
      <param name="pageIndex">The zero based page number.</param>
    </member>
    <member name="P:Aspose.Editor.Client.PageRenderer.PageCount">
      <summary>
            Gets the number of pages in the document.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.PageRenderer.Options">
      <summary>
            Gets rendering options.
            </summary>
    </member>
    <member name="T:Aspose.Editor.PluginMember">
      <summary>
            Represents method or property of the plugin class. This class wraps member which has attached
            <see cref="T:Aspose.Editor.PluginMemberAttribute" /> attribute and uses reflection to invoke it.
            </summary>
      <remarks>
            Invocation is done through reflection and thus caller experiences performance penalty. If direct call
            is required then called shall instead reference plugin assembly directly.
            </remarks>
      <seealso cref="T:Aspose.Editor.PluginMemberAttribute" />
    </member>
    <member name="M:Aspose.Editor.PluginMember.Invoke(System.Object[])">
      <summary>
            Invokes this member using reflection.
            </summary>
      <param name="args">Arguments.
            <list type="bullet"><item>If member is method, then values in the list must match in type, position and number to the parameters
            found in the method signature,</item><item>If member is indexed property "this", then when Set first argument is value, remaining arguments
            are indices, returned is Null; when Get arguments are indices, returned is property value,</item><item>If member is regular property, then when Set single argument is value, returned is Null;
            when Get then no arguments must be specified (empty array or <c>Null</c>), returned is property value.</item></list></param>
      <returns>Result returned by member.</returns>
    </member>
    <member name="M:Aspose.Editor.PluginMember.GetCustomDelegate(System.Type)">
      <summary>
            Returns delegate of specified type which can be used to call this member.
            </summary>
      <param name="type">Type of the delegate.</param>
      <returns>Instance of the delegate which can be casted to the specified type.</returns>
      <remarks>
            This is a shortcut to <see cref="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String)" />.
            </remarks>
    </member>
    <member name="P:Aspose.Editor.PluginMember.Parent">
      <summary>
            Gets parent collection which contains this plugin member.
            </summary>
    </member>
    <member name="P:Aspose.Editor.PluginMember.Name">
      <summary>
            Name of the member.
            </summary>
    </member>
    <member name="P:Aspose.Editor.PluginMember.Description">
      <summary>
            Description of the member.
            </summary>
    </member>
    <member name="P:Aspose.Editor.PluginMember.Info">
      <summary>
            Member information.
            </summary>
    </member>
    <member name="P:Aspose.Editor.PluginMember.Delegate">
      <summary>
            Gets cached delegate which can be used to call this member. If member signature matches
            <see cref="T:Aspose.Editor.PluginMemberDelegate" /> then returned is direct delegate, otherwise returned
            is dynamic delegate which calls member through reflection (performance penalty).
            </summary>
    </member>
    <member name="T:Aspose.Editor.PluginMemberDelegate">
      <summary>
            Represents signature of the <see cref="M:Aspose.Editor.PluginMember.Invoke(System.Object[])" /> method.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.DocumentView">
      <summary>
            Control which displays document content.
            </summary>
      <remarks>You cannot create instances of this class use <see cref="P:Aspose.Editor.Client.EditorControl.ActiveView" /> property to obtain instance.</remarks>
    </member>
    <member name="M:Aspose.Editor.Client.DocumentView.ClientToPoint(System.Drawing.Rectangle)">
      <summary>
            Converts rectangle in client coordinates (pixels) to rectangle in document coordinates (points).
            </summary>
    </member>
    <member name="M:Aspose.Editor.Client.DocumentView.PointToClient(System.Drawing.RectangleF)">
      <summary>
            Converts rectangle in document coordinates (points) to rectangle in client coordinates (pixels).
            </summary>
    </member>
    <member name="M:Aspose.Editor.Client.DocumentView.GetGlyphMeasurements(System.Int32,System.Drawing.RectangleF@,System.Single@,System.Single@,System.Single@)">
      <summary>
            Returns document measurements including bounding rectangle and baseline of the glyph
            which corresponds to the content item at the specified document position.
            </summary>
      <param name="offset">Position of the content item in the document.</param>
      <param name="bounds">Bounding rectangle of the glyph.</param>
      <param name="glyphBaseline">Distance from the glyph top to glyph baseline.</param>
      <param name="lineBaseline">Distance from line content top to line baseline.</param>
      <param name="lineHeight">Distance from line content top to line content bottom.</param>
    </member>
    <member name="M:Aspose.Editor.Client.DocumentView.GetGlyphOffset(System.Drawing.PointF)">
      <summary>
            Returns document position which is rendered at the specified point.
            </summary>
      <param name="point">Point in document coordinates.</param>
      <returns>Document position of the content item which is rendered at the specified point.
            If there is no glyph at the specified point then returned is negative value.</returns>
    </member>
    <member name="P:Aspose.Editor.Client.DocumentView.Window">
      <summary>
            Gets rectangle which is displayed by the view (points).
            </summary>
      <remarks>This is a shortcut for <see cref="M:Aspose.Editor.Client.DocumentView.ClientToPoint(System.Drawing.Rectangle)" />
            (<see cref="P:System.Windows.Forms.Control.ClientRectangle" />).</remarks>
      <dev>
            Gets logical window of the layout. This is 'what is displayed' by view (points).
            </dev>
    </member>
    <member name="T:Aspose.Editor.Client.StandardStatusBar">
      <summary>
            Provides base class functionality for standard status bars.
            </summary>
      <remarks>
        <p>This class contains code which is required to properly integrate with
            <see cref="T:Aspose.Editor.Client.EditorControl" /> in order to enable dynamic updates to the tool bar buttons.</p>
        <p>Application can inherit this class to change default appearance and behavior if required.</p>
        <seealso cref="M:Aspose.Editor.Client.StandardControls.CreateStatusBar" />
      </remarks>
    </member>
    <member name="T:Aspose.Editor.Client.Paragraph">
      <summary>
            Represents a single paragraph of text in a <see cref="T:Aspose.Editor.Client.Range" />.
            </summary>
      <remarks>
        <p>You do not create instances of this class directly. You can create or obtain <see cref="T:Aspose.Editor.Client.Paragraph" /> 
            objects from the <see cref="T:Aspose.Editor.Client.Paragraphs" /> collection. The <see cref="T:Aspose.Editor.Client.Paragraphs" /> collection, in turn,
            is available from a <see cref="T:Aspose.Editor.Client.Range" /> object.</p>
        <p>A paragraph of text in a document and a <see cref="T:Aspose.Editor.Client.Paragraph" /> instance are distinct entities.
            Although a document consists of paragraphs of text, individual <see cref="T:Aspose.Editor.Client.Paragraph" /> objects
            are not automatically created for each and every paragraph of text when the document is loaded as 
            it would be a waste of system resources. Also, paragraphs of text are often joined and split because
            of the editing operations. Therefore, <see cref="T:Aspose.Editor.Client.Paragraph" /> objects are proxy-like objects 
            that are automatically created and maintained by Aspose.Editor on demand, to make it easier 
            for you to work with the document programmatically.</p>
        <seealso cref="T:Aspose.Editor.Client.Range" />
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.Paragraph.GetRange">
      <summary>
            Creates and returns a <see cref="T:Aspose.Editor.Client.Range" /> object that represents the portion 
            of a document contained in the paragraph.
            </summary>
      <returns>Returns a newly created <see cref="T:Aspose.Editor.Client.Range" /> object.</returns>
    </member>
    <member name="P:Aspose.Editor.Client.Paragraph.Format">
      <summary>
            Provides access to the formatting of the paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Paragraph.StyleName">
      <summary>
            Gets or sets the style applied to this paragraph by style name.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.Underline">
      <summary>
            Indicates type of the underline applied to a font.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.Underline.Undefined">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.Underline.None">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.Underline.Single">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.Underline.Words">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.Underline.Double">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.Underline.Dotted">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.Underline.Thick">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.Underline.Dash">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.Underline.DashLong">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.Underline.DotDash">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.Underline.DotDotDash">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.Underline.Wavy">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.Underline.DottedHeavy">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.Underline.DashHeavy">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.Underline.DashLongHeavy">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.Underline.DotDashHeavy">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.Underline.DotDotDashHeavy">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.Underline.WavyHeavy">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Editor.Client.Underline.WavyDouble">
      <summary>
      </summary>
    </member>
    <member name="T:Aspose.Editor.Client.ParagraphAlignment">
      <summary>
            Specifies text alignment in a paragraph.
            </summary>
      <remarks>
        <seealso cref="T:Aspose.Editor.Client.ParagraphFormat" />
      </remarks>
    </member>
    <member name="F:Aspose.Editor.Client.ParagraphAlignment.Left">
      <summary>
            Text is aligned to the left.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.ParagraphAlignment.Center">
      <summary>
            Text is centered horizontally.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.ParagraphAlignment.Right">
      <summary>
            Text is aligned to the right.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.ParagraphAlignment.Justify">
      <summary>
            Text is aligned to both left and right.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.ParagraphAlignment.Distributed">
      <summary>
            Text is evenly distributed.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.LineSpacingRule">
      <summary>
            Specifies line spacing type for a paragraph.
            </summary>
      <remarks>
        <seealso cref="T:Aspose.Editor.Client.ParagraphFormat" />
      </remarks>
    </member>
    <member name="F:Aspose.Editor.Client.LineSpacingRule.AtLeast">
      <summary>
            The line spacing can be greater than or equal to, but never less than,
            the value specified in the <see cref="P:Aspose.Editor.Client.ParagraphFormat.LineSpacing" /> property.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.LineSpacingRule.Exactly">
      <summary>
            The line spacing never changes from the value specified in the
            <see cref="P:Aspose.Editor.Client.ParagraphFormat.LineSpacing" /> property,
            even if a larger font is used within the paragraph.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.LineSpacingRule.Multiple">
      <summary>
            The line spacing is specified in the <see cref="P:Aspose.Editor.Client.ParagraphFormat.LineSpacing" />
            property as the number of lines. One line equals 12 points.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.Orientation">
      <summary>
             Specifies page orientation.
             </summary>
      <remarks>
        <p>Page orientation is specified in the <see cref="T:Aspose.Editor.Client.PageSetup" /> object.</p>
        <seealso cref="T:Aspose.Editor.Client.PageSetup" />
      </remarks>
    </member>
    <member name="F:Aspose.Editor.Client.Orientation.None">
      <summary>
            Default value. Do not use.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.Orientation.Portrait">
      <summary>
            Portrait page orientation (narrow and tall).
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.Orientation.Landscape">
      <summary>
            Landscape page orientation (wide and short).
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.PaperSize">
      <summary>
            Specifies paper size.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.PaperSize.A3">
      <summary>
            297 x 420 mm.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.PaperSize.A4">
      <summary>
            210 x 297 mm.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.PaperSize.A5">
      <summary>
            148 x 210 mm.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.PaperSize.B4">
      <summary>
            250 x 353 mm.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.PaperSize.B5">
      <summary>
            176 x 250 mm.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.PaperSize.Executive">
      <summary>
            7.25 x 10.5 inches.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.PaperSize.Folio">
      <summary>
            8 x 13 inches.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.PaperSize.Ledger">
      <summary>
            11 x 17 inches.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.PaperSize.Legal">
      <summary>
            8.5 x 14 inches.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.PaperSize.Letter">
      <summary>
            8.5 x 11 inches.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.PaperSize.EnvelopeDL">
      <summary>
            110 x 220 mm.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.PaperSize.Quarto">
      <summary>
            8 x 10 inches.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.PaperSize.Statement">
      <summary>
            8.5 x 5.5 inches.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.PaperSize.Tabloid">
      <summary>
            11 x 17 inches.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.PaperSize.Paper10x14">
      <summary>
            10 x 14 inches.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.PaperSize.Paper11x17">
      <summary>
            11 x 17 inches.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.PaperSize.Custom">
      <summary>
            Custom paper size.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.PropertyType">
      <summary>
            Specifies data type of a <see cref="T:Aspose.Editor.Client.DocumentProperty" />.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.PropertyType.Boolean">
      <summary>
            The property is a boolean value.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.PropertyType.DateTime">
      <summary>
            The property is a date time value.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.PropertyType.Double">
      <summary>
            The property is a floating number.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.PropertyType.Number">
      <summary>
            The property is an integer number.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.PropertyType.String">
      <summary>
            The property is a string value.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.PropertyType.Blob">
      <summary>
            The property is a byte array.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.ParagraphFormat">
      <summary>
             Represents all the formatting for a paragraph.
             </summary>
      <remarks>
        <p>You do not create instances of the <see cref="T:Aspose.Editor.Client.ParagraphFormat" /> class directly.
             You access <see cref="T:Aspose.Editor.Client.ParagraphFormat" /> as a property of objects that can have paragraph formatting,
             for example the <see cref="P:Aspose.Editor.Client.Paragraph.Format" /> property of the <see cref="T:Aspose.Editor.Client.Paragraph" /> or
             <see cref="T:Aspose.Editor.Client.Range" /> object.</p>
        <seealso cref="T:Aspose.Editor.Client.Paragraph" />
        <seealso cref="T:Aspose.Editor.Client.Range" />
      </remarks>
    </member>
    <member name="F:Aspose.Editor.Client.ParagraphFormat.AutoSpaceSize">
      <summary>
            Microsoft Word adds 14 points when auto space after or before is turned on.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.ParagraphFormat.Alignment">
      <summary>
            Gets or sets text alignment for the paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.ParagraphFormat.LeftIndent">
      <summary>
            Gets or sets the value (in points) that represents the left indent for paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.ParagraphFormat.RightIndent">
      <summary>
            Gets or sets the value (in points) that represents the right indent for paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.ParagraphFormat.FirstLineIndent">
      <summary>
            Gets or sets the value (in points) for a first line or hanging indent.
            Use a positive value to set a first-line indent, and use a negative value
            to set a hanging indent.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.ParagraphFormat.SpaceBeforeAuto">
      <summary>
            True if the amount of spacing before the paragraph is set automatically.
            </summary>
      <remarks>
        <p>When set to true, overrides the effect of <see cref="P:Aspose.Editor.Client.ParagraphFormat.SpaceBefore" />.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.ParagraphFormat.SpaceAfterAuto">
      <summary>
            True if the amount of spacing after the paragraph is set automatically.
            </summary>
      <remarks>
        <p>When set to true, overrides the effect of <see cref="P:Aspose.Editor.Client.ParagraphFormat.SpaceAfter" />.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.ParagraphFormat.SpaceBefore">
      <summary>
            Gets or sets the amount of spacing (in points) before the paragraph.
            </summary>
      <remarks>
        <p>Has no effect when <see cref="P:Aspose.Editor.Client.ParagraphFormat.SpaceBeforeAuto" /> is true.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.ParagraphFormat.SpaceAfter">
      <summary>
            Gets or sets the amount of spacing (in points) after the paragraph.
            </summary>
      <remarks>
        <p>Has no effect when <see cref="P:Aspose.Editor.Client.ParagraphFormat.SpaceAfterAuto" /> is true.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.ParagraphFormat.LineSpacingRule">
      <summary>
            Gets or sets the line spacing rule for the paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.ParagraphFormat.LineSpacing">
      <summary>
             Gets or sets the line spacing (in points) for the paragraph.
             </summary>
      <remarks>
        <p>When <see cref="P:Aspose.Editor.Client.ParagraphFormat.LineSpacingRule" /> is set to <see cref="F:Aspose.Editor.Client.LineSpacingRule.AtLeast" />,
             the line spacing can be greater than or equal to, but never less than the specified
             <see cref="P:Aspose.Editor.Client.ParagraphFormat.LineSpacing" /> value.</p>
        <p>When <see cref="P:Aspose.Editor.Client.ParagraphFormat.LineSpacingRule" /> is set to <see cref="F:Aspose.Editor.Client.LineSpacingRule.Exactly" />,
             the line spacing never changes from the specified <see cref="P:Aspose.Editor.Client.ParagraphFormat.LineSpacing" /> value, even if a larger
             font is used within the paragraph.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.ParagraphFormat.TabStops">
      <summary>
            Gets the collection of custom tab stops defined for this object.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.EditorOptions">
      <summary>
             Contains editor options which are not saved with the document.
             </summary>
      <remarks>
        <p>You do not create instances of this class directly. Use the <see cref="P:Aspose.Editor.Client.EditorControl.Options" />
             property of the <see cref="T:Aspose.Editor.Client.EditorControl" /> object to access options of the editor.</p>
        <seealso cref="T:Aspose.Editor.Client.EditorControl" />
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.EditorOptions.IsReadOnly">
      <summary>
            Gets or sets indication of whether user interface of the editor allows
            changing opened document.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.EditorOptions.IsShowFormattingMarks">
      <summary>
            Gets or sets indication of whether to display formatting marks (paragraph breaks, spaces etc).
            </summary>
      <remarks>
        <p>Default value is False.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.EditorOptions.IsShowUnknowns">
      <summary>
            Gets or sets indication of whether unknown document elements are
            always rendered as red question marks. If False then unknown elements
            are only rendered when <see cref="P:Aspose.Editor.Client.EditorOptions.IsShowFormattingMarks" /> is True.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.EditorOptions.IsShowTableGrid">
      <summary>
            Gets or sets indication of whether to render thin line border of a cell if actual border is invisible.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.EditorOptions.IsKeepPageInsideWindow">
      <summary>
            Gets or sets indication of whether scroll and zoom of the view must always keep document page visible.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.EditorOptions.IsTransparentSelection">
      <summary>
            Gets or sets indication of whether selection is rendered using transparent color
            instead of color inversion.
            </summary>
      <remarks>Default is <c>false</c> which results in better look but slow performance.
            If large documents are processed specify <c>true</c> to improve performance.
            </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.EditorOptions.PaperColor">
      <summary>
            Gets or sets color of the paper.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.EditorOptions.Culture">
      <summary>
            Gets or sets culture used for retrieving string resources.
            </summary>
      <remarks>Make sure this property is changed before control is disaplayed for
            the first time, otherwise changes may not be in effect.</remarks>
    </member>
    <member name="T:Aspose.Editor.Client.PageSetup">
      <summary>
             Represents page setup properties (left margin, bottom margin, paper size, and so on) of a section.
             </summary>
      <remarks>
        <p>You do not create instances of the <see cref="T:Aspose.Editor.Client.PageSetup" /> class directly.
             You access <see cref="T:Aspose.Editor.Client.PageSetup" /> as a property of objects that can have section formatting,
             for example <see cref="P:Aspose.Editor.Client.Section.PageSetup" /> of the <see cref="T:Aspose.Editor.Client.Section" /> or
             <see cref="T:Aspose.Editor.Client.Range" /> object.</p>
        <seealso cref="T:Aspose.Editor.Client.Section" />
        <seealso cref="T:Aspose.Editor.Client.Range" />
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.PageSetup.TextColumns">
      <summary>
            Returns the collection of text columns for current section.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.PageSetup.PageWidth">
      <summary>
            Returns or sets the width of the page in points.
            </summary>
      <remarks>
        <p>Changing <see cref="P:Aspose.Editor.Client.PageSetup.PageWidth" /> or <see cref="P:Aspose.Editor.Client.PageSetup.PageHeight" /> updates <see cref="P:Aspose.Editor.Client.PageSetup.PaperSize" /> accordingly.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.PageSetup.PageHeight">
      <summary>
            Returns or sets the height of the page in points.
            </summary>
      <remarks>
        <p>Changing <see cref="P:Aspose.Editor.Client.PageSetup.PageWidth" /> or <see cref="P:Aspose.Editor.Client.PageSetup.PageHeight" /> updates <see cref="P:Aspose.Editor.Client.PageSetup.PaperSize" /> accordingly.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.PageSetup.UseablePageWidth">
      <summary>
            Returns page width available for text.
            </summary>
      <remarks>
            Calculated as
            <see cref="P:Aspose.Editor.Client.PageSetup.PageWidth" /> - <see cref="P:Aspose.Editor.Client.PageSetup.LeftMargin" /> - <see cref="P:Aspose.Editor.Client.PageSetup.RightMargin" />.
            </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.PageSetup.PaperSize">
      <summary>
            Returns or sets the paper size.
            </summary>
      <remarks>
        <p>Changing <see cref="P:Aspose.Editor.Client.PageSetup.PaperSize" /> updates <see cref="P:Aspose.Editor.Client.PageSetup.PageWidth" /> and <see cref="P:Aspose.Editor.Client.PageSetup.PageHeight" /> accordingly.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.PageSetup.Orientation">
      <summary>
            Returns or sets the orientation of the page.
            </summary>
      <remarks>
        <p>Changing <see cref="P:Aspose.Editor.Client.PageSetup.Orientation" /> swaps <see cref="P:Aspose.Editor.Client.PageSetup.PageWidth" /> and <see cref="P:Aspose.Editor.Client.PageSetup.PageHeight" />.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.PageSetup.LeftMargin">
      <summary>
            Returns or sets the distance (in points) between the left edge of
            the page and the left boundary of the body text.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.PageSetup.RightMargin">
      <summary>
            Returns or sets the distance (in points) between the right edge of
            the page and the right boundary of the body text.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.PageSetup.TopMargin">
      <summary>
            Returns or sets the distance (in points) between the top edge of the page
            and the top boundary of the body text.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.PageSetup.BottomMargin">
      <summary>
            Returns or sets the distance (in points) between the bottom edge of the page
            and the bottom boundary of the body text.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.Zoom">
      <summary>
             Defines zoom options for <see cref="T:Aspose.Editor.Client.EditorControl" />.
             </summary>
      <remarks>
        <p>You do not create instances of this type directly. You specify zoom options via the
             <see cref="P:Aspose.Editor.Client.EditorControl.Zoom" /> property of the <see cref="T:Aspose.Editor.Client.EditorControl" /> class.</p>
        <seealso cref="T:Aspose.Editor.Client.EditorControl" />
        <seealso cref="T:Aspose.Editor.Core.Document.ViewOptions" />
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.Zoom.FromString(System.String)">
      <summary>
            Initializes zoom settings from the specified string.
            </summary>
      <remarks>
        <p>The string can be either numeric zoom percentage (e.g. 100%) or numeric factor (e.g. 0.75).</p>
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.Zoom.TypeToPercent(Aspose.Editor.Client.ZoomType)">
      <summary>
            Converts automatic zoom value to percent equivalent using current view and selection.
            This is used when it's required to display e.g. how many percents is in "full page".
            </summary>
    </member>
    <member name="M:Aspose.Editor.Client.Zoom.ToString">
      <summary>
            Gets the string representation of <see cref="P:Aspose.Editor.Client.Zoom.Percentage" /> value.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Zoom.ZoomType">
      <summary>
            Gets or sets the zoom type for a document inside the editor control.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Zoom.Percentage">
      <summary>
            Gets or sets magnification for a document inside the editor control.
            </summary>
      <remarks>
        <p>1.0f means 1%.</p>
        <p>Minimum value is 10, maximum value is 1000.</p>
        <p>Setting <see cref="P:Aspose.Editor.Client.Zoom.Percentage" /> changes the value of
            <see cref="P:Aspose.Editor.Client.Zoom.ZoomType" /> to <see cref="F:Aspose.Editor.Client.ZoomType.Custom" />.</p>
      </remarks>
    </member>
    <member name="T:Aspose.Editor.Client.RenderOptions">
      <summary>
            Options used by <see cref="T:Aspose.Editor.Client.PageRenderer" />.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.RenderOptions.IsShowControlCharacters">
      <summary>
            If True control characters are rendered. This is used to display white spaces, tabs, paragraph breaks, etc.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.RenderOptions.IsShowUnknowns">
      <summary>
            Gets or sets indication of whether unknown document elements are
            always rendered as red question marks. If False then unknown elements
            are only rendered when <see cref="P:Aspose.Editor.Client.RenderOptions.IsShowControlCharacters" /> is True.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.RenderOptions.PaperColor">
      <summary>
            Gets or sets color of the page background (paper).
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.RenderOptions.IsShowPageBorders">
      <summary>
            Gets or sets indication of whether page border is rendered.
            </summary>
      <remarks>Page background is always rendered, but you can assign
            transparent color to the <see cref="P:Aspose.Editor.Client.RenderOptions.PaperColor" />.</remarks>
    </member>
    <member name="P:Aspose.Editor.Client.RenderOptions.IsShowTextBounds">
      <summary>
            If True bounding rectangle for column and wrapped line is rendered.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.RenderOptions.IsShowTableGrid">
      <summary>
            If True then table cell renders thin line border if actual border is invisible.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.DocumentVariables">
      <summary>
             A collection of document variables.
             </summary>
      <remarks>
        <p>You do not create instances of this class directly. You access document variables via the
             <see cref="P:Aspose.Editor.Client.Document.Variables" /> property of the <see cref="T:Aspose.Editor.Client.Document" /> object.</p>
        <p>Variable names and values are strings.</p>
        <p>Variable names are case insensitive.</p>
        <seealso cref="T:Aspose.Editor.Client.Document" />
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.DocumentVariables.Item(System.String)">
      <summary>
            Gets or a sets a document variable by case-insensitive name.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.ZoomType">
      <summary>
            Specifies zoom type for a document inside the editor control.
            </summary>
      <remarks>
        <seealso cref="T:Aspose.Editor.Client.Zoom" />
        <seealso cref="T:Aspose.Editor.Client.EditorControl" />
      </remarks>
    </member>
    <member name="F:Aspose.Editor.Client.ZoomType.Custom">
      <summary>
            Zoom factor is set explicitly. It is not recalculated automatically when control size changes.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.ZoomType.WholePage">
      <summary>
            Zoom factor is automatically recalculated to fit one full page.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.ZoomType.PageWidth">
      <summary>
            Zoom factor is automatically recalculated to fit page width.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.ZoomType.TextWidth">
      <summary>
            Zoom factor is automatically recalculated to fit text width.
            </summary>
    </member>
    <member name="T:Aspose.Editor.PluginMemberAttribute">
      <summary>
            This attribute is applied to the method or property which shall be exposed by the plugin through <see cref="T:Aspose.Editor.PluginMember" />.
            </summary>
    </member>
    <member name="M:Aspose.Editor.PluginMemberAttribute.#ctor">
      <summary>
            Initializes new instance of this class.
            </summary>
    </member>
    <member name="M:Aspose.Editor.PluginMemberAttribute.#ctor(System.String)">
      <summary>
            Initializes new instance of this class.
            </summary>
      <param name="name">Name of the member.</param>
    </member>
    <member name="M:Aspose.Editor.PluginMemberAttribute.#ctor(System.String,System.String)">
      <summary>
            Initializes new instance of this class.
            </summary>
      <param name="name">Name of the member.</param>
      <param name="description">Description.</param>
    </member>
    <member name="P:Aspose.Editor.PluginMemberAttribute.Name">
      <summary>
            Gets full name of the plugin.
            </summary>
    </member>
    <member name="P:Aspose.Editor.PluginMemberAttribute.Description">
      <summary>
            Gets description of the plugin.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.EditorDialogs">
      <summary>
             Provides methods to invoke standard editor dialogs, such as Font, Paragraph Format, Page Setup etc.
             </summary>
      <remarks>
        <p>You do not create instances of this class directly. Use the <see cref="P:Aspose.Editor.Client.EditorControl.Dialogs" />
             property of <see cref="T:Aspose.Editor.Client.EditorControl" /> to execute the dialogs.</p>
        <p>The dialogs modify formatting of the current selection in <see cref="T:Aspose.Editor.Client.EditorControl" />.</p>
        <seealso cref="T:Aspose.Editor.Client.EditorControl" />
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.EditorDialogs.About">
      <summary>
            Shows the About dialog with information about the editor control.
            </summary>
    </member>
    <member name="M:Aspose.Editor.Client.EditorDialogs.Columns">
      <summary>
            Shows the Columns dialog which allows to specify columns and their width.
            </summary>
    </member>
    <member name="M:Aspose.Editor.Client.EditorDialogs.PageSetup">
      <summary>
            Shows the Page Setup dialog which allows to specify page size, orientation and margins.
            </summary>
    </member>
    <member name="M:Aspose.Editor.Client.EditorDialogs.Paragraph">
      <summary>
            Shows the Paragraph Format dialog which allows to specify paragraph indents, alignment etc.
            </summary>
    </member>
    <member name="M:Aspose.Editor.Client.EditorDialogs.Font">
      <summary>
            Shows the Font dialog which allows to specify font name, size, color etc.
            </summary>
    </member>
    <member name="M:Aspose.Editor.Client.EditorDialogs.Find">
      <summary>
            Shows the Find and Replace dialog.
            </summary>
    </member>
    <member name="M:Aspose.Editor.Client.EditorDialogs.Break">
      <summary>
            Shows the Insert Break dialog which allows to insert line, page, column or section breaks.
            </summary>
    </member>
    <member name="M:Aspose.Editor.Client.EditorDialogs.StyleList">
      <summary>
            Shows the Style List dialog which allows to create and delete styles.
            It also invokes Style Modify dialog which allows to modify selected style.
            </summary>
    </member>
    <member name="M:Aspose.Editor.Client.EditorDialogs.TableInsert">
      <summary>
            Shows the Insert Table dialog which allows to specify number of
            columns and rows for the new table.
            </summary>
    </member>
    <member name="M:Aspose.Editor.Client.EditorDialogs.TableProperties">
      <summary>
            Shows the Table properties dialog which allows to change properties
            of the table, rows and columns.
            </summary>
    </member>
    <member name="M:Aspose.Editor.Client.EditorDialogs.BordersAndShading">
      <summary>
            Shows the Borders and shading dialog which allows to specify
            borders and shading properties.
            </summary>
    </member>
    <member name="M:Aspose.Editor.Client.EditorDialogs.Zoom">
      <summary>
            Shows the Zoom dialog which allows to modify zoom settings.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.ProgressEventHandler">
      <summary>
            Raised to indicate progress of some lengthly task.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.ProgressEventArgs">
      <summary>
            Provides data for the Progress event.
            </summary>
    </member>
    <member name="M:Aspose.Editor.Client.ProgressEventArgs.#ctor(System.String,System.Single,System.Single)">
      <summary>
            Ctor. I'm using the "a" prefixes for parameters here, otherwise automatic conversion to VB.NET
            complains parameter names clash with field names.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.ProgressEventArgs.Message">
      <summary>
            Gets or sets optional additional information regarding the operation's progress.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.ProgressEventArgs.Total">
      <summary>
            Gets the total amount of work required to be done.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.ProgressEventArgs.Current">
      <summary>
            Gets the current amount of work done by the operation.
            </summary>
    </member>
    <member name="T:Aspose.Editor.PluginMembers">
      <summary>
            Collection of the <see cref="T:Aspose.Editor.PluginMember" /> objects found for the <see cref="P:Aspose.Editor.PluginMembers.Plugin" />.
            </summary>
      <seealso cref="T:Aspose.Editor.PluginMember" />
    </member>
    <member name="M:Aspose.Editor.PluginMembers.Get(System.Int32)">
      <summary>
            Returns plugin member.
            </summary>
      <param name="index">Member index.</param>
    </member>
    <member name="M:Aspose.Editor.PluginMembers.Get(System.String)">
      <summary>
            Returns plugin member.
            </summary>
      <param name="name">Member name.</param>
      <remarks>This method returns first member which has specified name. If there are two or more members with the same
            name then 2nd, 3rd, etc. names are prepended with ".Index", where Index is the index of the member in this collection.</remarks>
    </member>
    <member name="M:Aspose.Editor.PluginMembers.GetEnumerator">
      <summary>
            Returns enumerator over the plugin members.
            </summary>
    </member>
    <member name="P:Aspose.Editor.PluginMembers.Count">
      <summary>
            Gets number of plugin methods.
            </summary>
    </member>
    <member name="P:Aspose.Editor.PluginMembers.Item(System.Int32)">
      <summary>
            Gets delegate which can be used to invoke plugin member.
            </summary>
    </member>
    <member name="P:Aspose.Editor.PluginMembers.Item(System.String)">
      <summary>
            Gets delegate which can be used to invoke plugin member.
            </summary>
    </member>
    <member name="P:Aspose.Editor.PluginMembers.Plugin">
      <summary>
            Gets plugin.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.Font">
      <summary>
             Represents character formatting attributes (font name, font size, color, and so on) of an object.
             </summary>
      <remarks>
        <p>You do not create instances of the <see cref="T:Aspose.Editor.Client.Font" /> class directly.
             You access <see cref="T:Aspose.Editor.Client.Font" /> as a property of objects that can have character formatting,
             for example <see cref="P:Aspose.Editor.Client.Range.Font" /> of the <see cref="T:Aspose.Editor.Client.Range" /> object.</p>
        <p>A consecutive series of characters in a document that have same character formatting is called a "run".
A single <see cref="T:Aspose.Editor.Client.Range" /> or <see cref="T:Aspose.Editor.Client.Selection" /> can encompass a number of runs with different
formatting, but a single <see cref="T:Aspose.Editor.Client.Font" /> is always returned.</p>
        <p>For example, a single <see cref="T:Aspose.Editor.Client.Range" /> can include characters of two runs, first run is bold
and second run is not bold. In this case, properties of the <see cref="T:Aspose.Editor.Client.Font" /> object return the value 
from the first run in the range, that is <see cref="P:Aspose.Editor.Client.Font.Bold" /> will return <b>true</b>.</p>
        <p>When setting any of the <see cref="T:Aspose.Editor.Client.Font" /> properties for a range that contains multiple runs,
the new value is applied to all characters within the range. In the above case, setting
<see cref="P:Aspose.Editor.Client.Font.Bold" /> to <b>true</b>, will make all characters in the range bold.</p>
        <seealso cref="T:Aspose.Editor.Client.Range" />
        <seealso cref="T:Aspose.Editor.Client.ParagraphFormat" />
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.Font.ToString">
      <summary>
            Returns the name of the font and font size as a string.
            </summary>
      <returns>A simple font decription.</returns>
    </member>
    <member name="P:Aspose.Editor.Client.Font.Name">
      <summary>
            Gets or sets the name of the font.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Font.Size">
      <summary>
            Gets or sets the font size in points. One point is 1/72 of an inch.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Font.Bold">
      <summary>
        <b>True</b> if the font is formatted as bold.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Font.Italic">
      <summary>
        <b>True</b> if the font is formatted as italic.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Font.Hidden">
      <summary>
            True if the font is formatted as hidden text.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Font.Underline">
      <summary>
            Gets or sets the type of underline applied to the font.
            </summary>
      <remarks>
        <p>The type of the property is <see cref="P:Aspose.Editor.Client.Font.Underline" />.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.Font.UnderlineColor">
      <summary>
            Gets or sets the color of the underline applied to the font.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Font.Color">
      <summary>
            Gets or sets the color of the font.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Font.Superscript">
      <summary>
        <b>True</b> if the font is formatted as superscript.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Font.Subscript">
      <summary>
        <b>True</b> if the font is formatted as subscript.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Font.SmallCaps">
      <summary>
        <b>True</b> if the font is formatted as small capital letters.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Font.AllCaps">
      <summary>
        <b>True</b> if the font is formatted as all capital letters.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Font.Position">
      <summary>
            Gets or sets the position of text (in points) relative to the base line.
            A positive number raises the text, and a negative number lowers it.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Font.LocaleId">
      <summary>
            Gets or sets the locale identifier (language) of the formatted characters.
            </summary>
      <remarks>
        <p>
          <see cref="P:Aspose.Editor.Client.Font.LocaleId" /> influences the language that spellchecker inside
            Microsoft Word uses when spellchecking this text.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.Font.Emboss">
      <summary>
            True if the font is formatted as embossed.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Font.Engrave">
      <summary>
            True if the font is formatted as engraved.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.PageInfo">
      <summary>
             Contains information about a particular page of the document.
             </summary>
      <remarks>
        <p>A Microsoft Word document can have many sections, each section has its own page setup
             settings include paper size, orientation margins etc, therefore there could be pages of
             different sizes within a single document.</p>
        <p>When you render individual pages of the document using <see cref="T:Aspose.Editor.Client.PageRenderer" />,
             you might wish to obtain the page size using the <see cref="T:Aspose.Editor.Client.PageInfo" /> structure before
             creating an <see cref="T:System.Drawing.Image" /> or <see cref="T:System.Drawing.Graphics" /> for rendering the page.</p>
        <p>You do not create instances of <see cref="T:Aspose.Editor.Client.PageInfo" /> directly. <see cref="T:Aspose.Editor.Client.PageInfo" />
             objects are returned from the <see cref="M:Aspose.Editor.Client.PageRenderer.GetPageInfo(System.Int32)" /> method.</p>
        <seealso cref="T:Aspose.Editor.Client.PageRenderer" />
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.PageInfo.Width">
      <summary>
            Gets the width of the page in points.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.PageInfo.Height">
      <summary>
            Gets the height of the page in points.
            </summary>
    </member>
    <member name="T:Aspose.Editor.PluginClassAttribute">
      <summary>
            This attribute is applied to the class which shall be loaded into the editor control
            upon startup. You can list assemblies containing such classes in the application
            configuration file in 'appSettings' section. Please consult the guide for the details.
            </summary>
    </member>
    <member name="M:Aspose.Editor.PluginClassAttribute.#ctor(System.String)">
      <summary>
            Initializes new instance of this class.
            </summary>
      <param name="name">Name of the plugin.</param>
    </member>
    <member name="M:Aspose.Editor.PluginClassAttribute.#ctor(System.String,System.String)">
      <summary>
            Initializes new instance of this class.
            </summary>
      <param name="name">Name of the plugin.</param>
      <param name="description">Description.</param>
    </member>
    <member name="M:Aspose.Editor.PluginClassAttribute.#ctor(System.String,System.String,System.String)">
      <summary>
            Initializes new instance of this class.
            </summary>
      <param name="name">Name of the plugin.</param>
      <param name="description">Description.</param>
      <param name="method">Name of the method which returns structured list of currently available commands for the plugin.</param>
    </member>
    <member name="P:Aspose.Editor.PluginClassAttribute.Name">
      <summary>
            Gets full name of the plugin.
            </summary>
    </member>
    <member name="P:Aspose.Editor.PluginClassAttribute.Description">
      <summary>
            Gets description of the plugin.
            </summary>
    </member>
    <member name="P:Aspose.Editor.PluginClassAttribute.Method">
      <summary>
            Gets name of the "string[] Name()" method which returns structured list of currently available commands.
            Each string is either name of the command or empty (used as separator). Name of the commands can be prepended
            by the submenu path. For example,
            "Command1Name", "MenuName/SubMenuName/Command2Name", "" /*Separator*/, "Command3Name"
            </summary>
    </member>
    <member name="T:Aspose.Editor.Plugin">
      <summary>
            Represents editor plugin. This class exposes various plugin properties and allows to call exported methods using reflection.
            <seealso cref="T:Aspose.Editor.EditorPlugins" /><seealso cref="T:Aspose.Editor.PluginClassAttribute" /></summary>
    </member>
    <member name="P:Aspose.Editor.Plugin.Parent">
      <summary>
            Gets parent collection which contains this plugin.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Plugin.Type">
      <summary>
            Gets type of the class of the plugin.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Plugin.Name">
      <summary>
            Gets name of the plugin. This is the string specified in the <see cref="T:Aspose.Editor.PluginClassAttribute" />.
            It is used as a text of the UI element which corresponds to the plugin.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Plugin.Description">
      <summary>
            Gets description of the plugin. This is the string specified in the <see cref="T:Aspose.Editor.PluginClassAttribute" />.
            It is used as a comment for the plugin.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Plugin.StatusText">
      <summary>
            Gets status text. This value is typically set by the plugin itself.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Plugin.StatusCode">
      <summary>
            Gets status code. This value is typically set by the plugin itself.
            </summary>
      <remarks>In general negative values are errors, other are success. Each plugin uses its own error codes.</remarks>
      <seealso cref="T:Aspose.Editor.PluginStatus" />
    </member>
    <member name="P:Aspose.Editor.Plugin.Instance">
      <summary>
            Gets instance of the plugin class. If plugin isn't loaded returns <c>Null</c>.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Plugin.Entry">
      <summary>
            Gets fully qualified value of the plugin configuration entry used to load this plugin.
            </summary>
      <remarks>
            Plugin entries specified in the configuration file may not be fully qualified or may describe only the assembly.
            However before plugins are loaded entries need to be expanded into fully qualified ones. In this process
            each configuration entry is replaced with one or more fully qualified entries.
            </remarks>
    </member>
    <member name="P:Aspose.Editor.Plugin.Members">
      <summary>
            Gets exported members of this plugin class.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Plugin.Item(System.String)">
      <summary>
            Gets delegate which can be used to invoke plugin member.
            </summary>
      <remarks>
            This is a shortcut for <see cref="!:PluginMembers.Item(string)" />.
            </remarks>
    </member>
    <member name="E:Aspose.Editor.Plugin.StatusChanged">
      <summary>
            Occurs after plugin status has changed. This event is typically triggered by plugin itself.
            </summary>
      <remarks>Plugins use <see cref="P:Aspose.Editor.EditorPlugins.StatusSink" /> property to access status properties.</remarks>
    </member>
    <member name="T:Aspose.Editor.PluginStatusDelegate">
      <summary>
            Represents the method which is used by plugin class to notify of status change.
            Reference to this delegate is available only during construction of the plugin class through <see cref="P:Aspose.Editor.EditorPlugins.StatusSink" />.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.Paragraphs">
      <summary>
            A collection of <see cref="T:Aspose.Editor.Client.Paragraph" /> objects in a <see cref="T:Aspose.Editor.Client.Range" />.
            </summary>
      <remarks>
        <p>Use the <see cref="P:Aspose.Editor.Client.Range.Paragraphs" /> property of the <see cref="T:Aspose.Editor.Client.Range" /> object to return
            a <see cref="T:Aspose.Editor.Client.Paragraphs" /> collection. You do not create instances of the <see cref="T:Aspose.Editor.Client.Paragraphs" />
            class directly.</p>
        <p>Use the <see cref="M:Aspose.Editor.Client.Paragraphs.Add(Aspose.Editor.Client.Range)" /> method to add a new paragraph to a document. Alternatively use
            the <see cref="M:Aspose.Editor.Client.Range.InsertParagraph" />, <see cref="M:Aspose.Editor.Client.Range.InsertParagraphBefore" /> or 
            <see cref="M:Aspose.Editor.Client.Range.InsertParagraphAfter" /> methods of the <see cref="T:Aspose.Editor.Client.Range" /> object to add
            new paragraphs to a document.</p>
        <p>Use the <see cref="P:Aspose.Editor.Client.Paragraphs.Item(System.Int32)" /> property to return a single <see cref="T:Aspose.Editor.Client.Paragraph" /> object.</p>
        <p>A <see cref="T:Aspose.Editor.Client.Paragraphs" /> collection is always "live". Any changes made to the document
            (possibly via other <see cref="T:Aspose.Editor.Client.Paragraphs" /> collections) are reflected in all existing 
            <see cref="T:Aspose.Editor.Client.Paragraphs" /> collections.</p>
        <p>This is a "live" collection of document elements so getting <see cref="P:Aspose.Editor.Client.Paragraphs.Count" /> might sometimes have 
to recalculate the number of items. Consider caching the value of <see cref="P:Aspose.Editor.Client.Paragraphs.Count" /> in time-critical loops.</p>
        <seealso cref="T:Aspose.Editor.Client.Range" />
        <seealso cref="T:Aspose.Editor.Client.Paragraph" />
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.Paragraphs.Add(Aspose.Editor.Client.Range)">
      <summary>
            Returns a <see cref="T:Aspose.Editor.Client.Paragraph" /> object that represents a new, 
            blank paragraph added to the document.
            </summary>
      <param name="range">
            The range before which you want the new paragraph to be added. 
            The new paragraph doesn't replace the range.</param>
      <remarks>
        <p>If you specify null for the <paramref name="range" /> parameter, 
            the new paragraph is added after the <see cref="T:Aspose.Editor.Client.Range" /> that 
            owns this <see cref="T:Aspose.Editor.Client.Paragraphs" /> collection.</p>
            If the end of the specified range matches the document end then new paragraph break 
            will be added before the end of the document.
            </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.Paragraphs.Add">
      <summary>
            Returns a <see cref="T:Aspose.Editor.Client.Paragraph" /> object that represents a new, 
            blank paragraph added to the document.
            </summary>
      <remarks>
        <p>The new <see cref="T:Aspose.Editor.Client.Paragraph" /> is added after the <see cref="T:Aspose.Editor.Client.Range" /> 
            that owns this <see cref="T:Aspose.Editor.Client.Paragraphs" /> collection.</p>
            If the end of the specified range matches the document end then new paragraph break 
            will be added before the end of the document.
            </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.Paragraphs.Item(System.Int32)">
      <summary>
            Returns a paragraph at the specified index in the collection.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Paragraphs.Count">
      <summary>
            Returns the number of paragraphs in the collection.
            </summary>
      <remarks>
        <p>This is a "live" collection of document elements so getting <see cref="P:Aspose.Editor.Client.Paragraphs.Count" /> might sometimes have 
to recalculate the number of items. Consider caching the value of <see cref="P:Aspose.Editor.Client.Paragraphs.Count" /> in time-critical loops.</p>
      </remarks>
    </member>
    <member name="T:Aspose.Editor.Client.TextColumn">
      <summary>
            Represents a single text column. <see cref="T:Aspose.Editor.Client.TextColumn" /> is a member of the
             <see cref="T:Aspose.Editor.Client.TextColumns" /> collection. 
            </summary>
      <remarks>
        <p>You do not create instances of this class directly. <see cref="T:Aspose.Editor.Client.TextColumn" /> objects are
            automatically created and maintained by the <see cref="T:Aspose.Editor.Client.TextColumns" /> collection. 
            Use the <see cref="P:Aspose.Editor.Client.TextColumns.Item(System.Int32)" /> property of the <see cref="T:Aspose.Editor.Client.TextColumns" /> collection
            to return a single <see cref="T:Aspose.Editor.Client.TextColumn" /> object. </p>
        <p>
          <see cref="T:Aspose.Editor.Client.TextColumn" /> objects are used to specify columns with custom 
            width and spacing. If you want the columns in the document to be of equal 
            width, set <see cref="P:Aspose.Editor.Client.TextColumns.EvenlySpaced" /> to <b>true</b>.</p>
        <seealso cref="T:Aspose.Editor.Client.TextColumns" />
        <seealso cref="T:Aspose.Editor.Client.PageSetup" />
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.TextColumn.Width">
      <summary>
            Gets or sets the width of the text column in points.
            </summary>
      <remarks>
        <p>Width cannot be set if there is only one column. Either <see cref="P:Aspose.Editor.Client.PageSetup.PageWidth" />
            or <see cref="P:Aspose.Editor.Client.PageSetup.LeftMargin" /> or <see cref="P:Aspose.Editor.Client.PageSetup.RightMargin" /> can be set instead.</p>
        <p>Use <see cref="P:Aspose.Editor.Client.TextColumns.Width" /> to get and set width of all evenly spaced columns simultaneously.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.TextColumn.SpaceAfter">
      <summary>
            Gets or sets the space between this column and the next column in points. 
            Not required for the last column.
            </summary>
      <remarks>
        <p>Space after the last text column cannot be get or set and is always 0.</p>
        <p>Use <see cref="P:Aspose.Editor.Client.TextColumns.Spacing" /> to get and set spacing of evenly spaced columns.</p>
      </remarks>
    </member>
    <member name="T:Aspose.Editor.Client.MoveUnitVertical">
      <summary>
            Movement unit used in <see cref="M:Aspose.Editor.Client.Selection.Move(Aspose.Editor.Client.MoveUnitVertical,System.Int32,System.Boolean)" /> methods for programmatic movements over a document.
            </summary>
      <remarks>
        <seealso cref="T:Aspose.Editor.Client.Selection" />
      </remarks>
    </member>
    <member name="F:Aspose.Editor.Client.MoveUnitVertical.Line">
      <summary>
            Movement is made to the specified line.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.MoveUnitVertical.Paragraph">
      <summary>
            Movement is made to the first line of the paragraph.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.MoveUnitVertical.Screen">
      <summary>
            Movement is made to the line which is specified number 
            of screens away from active end of selection.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.MoveUnitHorizontal">
      <summary>
            Movement unit used in <see cref="M:Aspose.Editor.Client.Selection.Move(Aspose.Editor.Client.MoveUnitVertical,System.Int32,System.Boolean)" /> methods for programmatic movements over a document.
            </summary>
      <remarks>
        <seealso cref="T:Aspose.Editor.Client.Selection" />
      </remarks>
    </member>
    <member name="F:Aspose.Editor.Client.MoveUnitHorizontal.Character">
      <summary>
            Movement is made to the specified character.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.Caret">
      <summary>
            Represents text insertion point (flashing vertical line) in the editor control.
            </summary>
      <remarks>
        <p>You do not create instances of this class directly. You access caret using the
            <see cref="P:Aspose.Editor.Client.EditorControl.Caret" /> property of the <see cref="T:Aspose.Editor.Client.EditorControl" /> object.</p>
        <seealso cref="T:Aspose.Editor.Client.EditorControl" />
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.Caret.Interval">
      <summary>
            Gets or sets milliseconds between caret flashes. 
            </summary>
      <remarks>
        <p>0 value renders caret steadily visible. Negative value renders caret invisible.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.Caret.IsEnabled">
      <summary>
            Gets or sets the state of the caret. Disabled caret is not visible.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Caret.Color">
      <summary>
            Gets or sets the color of the caret. Default value is <see cref="P:System.Drawing.SystemColors.Highlight" />.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.Commands">
      <summary>
            Represets collection of the commands registered with the editor control.
            Commands exist for convenience and in order to expose predefined set of methods
            application can use.
            </summary>
      <remarks>
        <p>You do not create instances of this class directly. Use the
            <see cref="P:Aspose.Editor.Client.EditorControl.Commands" /> property to access commands list.</p>
        <p>Commands added to the collection will work only with the instance of the
            <see cref="T:Aspose.Editor.Client.EditorControl" /> which was used to obtain this collection.</p>
        <seealso cref="T:Aspose.Editor.Client.Command" />
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.Commands.Add(System.String,Aspose.Editor.Client.CommandHandler)">
      <summary>
            Adds command to the collection.
            </summary>
      <param name="name">Value of the <see cref="P:Aspose.Editor.Client.Command.Name" /> property.</param>
      <param name="method">Value of the <see cref="P:Aspose.Editor.Client.Command.InvokeHandler" /> property.</param>
      <returns>Created <see cref="T:Aspose.Editor.Client.Command" /> object.</returns>
    </member>
    <member name="M:Aspose.Editor.Client.Commands.Add(System.String,System.String,System.String,Aspose.Editor.Client.CommandHandler)">
      <summary>
            Adds command to the collection.
            </summary>
      <param name="name">Value of the <see cref="P:Aspose.Editor.Client.Command.Name" /> property.</param>
      <param name="method">Value of the <see cref="P:Aspose.Editor.Client.Command.InvokeHandler" /> property.</param>
      <param name="text">Value of the <see cref="P:Aspose.Editor.Client.Command.Text" /> property.</param>
      <param name="description">Value of the <see cref="P:Aspose.Editor.Client.Command.Description" /> property.</param>
      <returns>Created <see cref="T:Aspose.Editor.Client.Command" /> object.</returns>
    </member>
    <member name="M:Aspose.Editor.Client.Commands.Add(System.String,System.String,System.String,Aspose.Editor.Client.CommandHandler,System.Drawing.Image)">
      <summary>
            Adds command to the collection.
            </summary>
      <param name="name">Value of the <see cref="P:Aspose.Editor.Client.Command.Name" /> property.</param>
      <param name="method">Value of the <see cref="P:Aspose.Editor.Client.Command.InvokeHandler" /> property.</param>
      <param name="text">Value of the <see cref="P:Aspose.Editor.Client.Command.Text" /> property.</param>
      <param name="description">Value of the <see cref="P:Aspose.Editor.Client.Command.Description" /> property.</param>
      <param name="icon">Value of the <see cref="P:Aspose.Editor.Client.Command.Icon" /> property.</param>
      <returns>Created <see cref="T:Aspose.Editor.Client.Command" /> object.</returns>
    </member>
    <member name="M:Aspose.Editor.Client.Commands.Add(System.String,System.String,System.String,Aspose.Editor.Client.CommandHandler,System.Drawing.Image,Aspose.Editor.Client.ConditionHandler)">
      <summary>
            Adds command to the collection.
            </summary>
      <param name="name">Value of the <see cref="P:Aspose.Editor.Client.Command.Name" /> property.</param>
      <param name="method">Value of the <see cref="P:Aspose.Editor.Client.Command.InvokeHandler" /> property.</param>
      <param name="text">Value of the <see cref="P:Aspose.Editor.Client.Command.Text" /> property.</param>
      <param name="description">Value of the <see cref="P:Aspose.Editor.Client.Command.Description" /> property.</param>
      <param name="icon">Value of the <see cref="P:Aspose.Editor.Client.Command.Icon" /> property.</param>
      <param name="isEnabledMethod">Value of the <see cref="P:Aspose.Editor.Client.Command.EnabledHandler" /> property.</param>
      <returns>Created <see cref="T:Aspose.Editor.Client.Command" /> object.</returns>
    </member>
    <member name="M:Aspose.Editor.Client.Commands.Add(System.String,System.String,System.String,Aspose.Editor.Client.CommandHandler,System.Drawing.Image,Aspose.Editor.Client.ConditionHandler,Aspose.Editor.Client.ConditionHandler)">
      <summary>
            Adds command to the collection.
            </summary>
      <param name="name">Value of the <see cref="P:Aspose.Editor.Client.Command.Name" /> property.</param>
      <param name="method">Value of the <see cref="P:Aspose.Editor.Client.Command.InvokeHandler" /> property.</param>
      <param name="text">Value of the <see cref="P:Aspose.Editor.Client.Command.Text" /> property.</param>
      <param name="description">Value of the <see cref="P:Aspose.Editor.Client.Command.Description" /> property.</param>
      <param name="icon">Value of the <see cref="P:Aspose.Editor.Client.Command.Icon" /> property.</param>
      <param name="isEnabledMethod">Value of the <see cref="P:Aspose.Editor.Client.Command.EnabledHandler" /> property.</param>
      <param name="isPushedMethod">Value of the <see cref="P:Aspose.Editor.Client.Command.PushedHandler" /> property.</param>
      <returns>Created <see cref="T:Aspose.Editor.Client.Command" /> object.</returns>
    </member>
    <member name="M:Aspose.Editor.Client.Commands.Add(System.String,System.String,System.String,Aspose.Editor.Client.Shortcut,Aspose.Editor.Client.CommandHandler,System.Drawing.Image,Aspose.Editor.Client.ConditionHandler)">
      <summary>
            Adds command to the collection.
            </summary>
      <param name="name">Value of the <see cref="P:Aspose.Editor.Client.Command.Name" /> property.</param>
      <param name="method">Value of the <see cref="P:Aspose.Editor.Client.Command.InvokeHandler" /> property.</param>
      <param name="text">Value of the <see cref="P:Aspose.Editor.Client.Command.Text" /> property.</param>
      <param name="description">Value of the <see cref="P:Aspose.Editor.Client.Command.Description" /> property.</param>
      <param name="shortcut">Value of the <see cref="P:Aspose.Editor.Client.Command.Shortcut" /> property.</param>
      <param name="icon">Value of the <see cref="P:Aspose.Editor.Client.Command.Icon" /> property.</param>
      <param name="isEnabledMethod">Value of the <see cref="P:Aspose.Editor.Client.Command.EnabledHandler" /> property.</param>
      <returns>Created <see cref="T:Aspose.Editor.Client.Command" /> object.</returns>
    </member>
    <member name="M:Aspose.Editor.Client.Commands.Add(System.String,System.String,System.String,Aspose.Editor.Client.Shortcut,Aspose.Editor.Client.CommandHandler,System.Drawing.Image,Aspose.Editor.Client.ConditionHandler,Aspose.Editor.Client.ConditionHandler)">
      <summary>
            Adds command to the collection.
            </summary>
      <param name="name">Value of the <see cref="P:Aspose.Editor.Client.Command.Name" /> property.</param>
      <param name="method">Value of the <see cref="P:Aspose.Editor.Client.Command.InvokeHandler" /> property.</param>
      <param name="text">Value of the <see cref="P:Aspose.Editor.Client.Command.Text" /> property.</param>
      <param name="description">Value of the <see cref="P:Aspose.Editor.Client.Command.Description" /> property.</param>
      <param name="shortcut">Value of the <see cref="P:Aspose.Editor.Client.Command.Shortcut" /> property.</param>
      <param name="icon">Value of the <see cref="P:Aspose.Editor.Client.Command.Icon" /> property.</param>
      <param name="isEnabledMethod">Value of the <see cref="P:Aspose.Editor.Client.Command.EnabledHandler" /> property.</param>
      <param name="isPushedMethod">Value of the <see cref="P:Aspose.Editor.Client.Command.PushedHandler" /> property.</param>
      <returns>Created <see cref="T:Aspose.Editor.Client.Command" /> object.</returns>
    </member>
    <member name="M:Aspose.Editor.Client.Commands.Remove(System.String)">
      <summary>
            Removes command from the list.
            </summary>
      <param name="name">Name of the command.</param>
    </member>
    <member name="M:Aspose.Editor.Client.Commands.IsContained(System.String)">
      <summary>
            Gets indication of whether specified command exists in the collection.
            </summary>
      <param name="commandName">Name of the command.</param>
      <returns>
        <b>True</b> if command exists in the collection.</returns>
    </member>
    <member name="M:Aspose.Editor.Client.Commands.GetEnumerator">
      <summary>
            Gets enumerator over the commands list.
            </summary>
    </member>
    <member name="M:Aspose.Editor.Client.Commands.RemoveShortcut(Aspose.Editor.Client.Shortcut,System.EventHandler)">
      <summary>
            Removes shortcut for the specified handler.
            </summary>
    </member>
    <member name="M:Aspose.Editor.Client.Commands.AddShortcut(Aspose.Editor.Client.Shortcut,System.EventHandler)">
      <summary>
            Adds shortcut for the specified handler.
            </summary>
      <param name="shortcut">The shortcut.</param>
      <param name="handler">The handler, cannot be Null.</param>
    </member>
    <member name="P:Aspose.Editor.Client.Commands.Item(System.String)">
      <summary>
            Gets command by name.
            </summary>
      <remarks>
        <p>This method uses linear search in the list.</p>
        <p>If command with the specified name is not stored in the collection then returned is <b>null</b>.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.Commands.ImageList">
      <summary>
            Gets or sets image list which contains icons used by commands.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.EditorControl">
      <summary>
             This is the word processor control that runs inside Microsoft Internet Explorer.
             </summary>
      <remarks>
        <p>To build an ASP.NET application with Aspose.Editor you need to use both: the client
             part and the server part of the control. <b>Aspose.Editor.Client.EditorControl</b> (this class)
             represents the client part of the control and it is defined in the Aspose.Editor.Client.dll assembly.
             <b>Aspose.Editor.Server.EditorControl</b> represents the server part of the control and it is
             defined in the Aspose.Editor.Server.dll assembly.</p>
        <p>When building an ASP.NET application, you need to add <b>Aspose.Editor.Server.EditorControl</b>
             to an ASP.NET web form. When the user requests that web page, the server control generates HTML with
             an &lt;object&gt; tag, that specifies the URL to Aspose.Editor.Client.dll and the name of the
             client control class <b>Aspose.Editor.Client.EditorControl</b>. When Microsoft Internet Explorer renders
             this page, it downloads Aspose.Editor.Client.dll and invokes <b>Aspose.Editor.Client.EditorControl</b>
             inside the browser on the client machine.</p>
        <p>See Aspose.Editor Programmer's Guide for more information about how to use Aspose.Editor in
             an ASP.NET application to achieve WYSIWIG word processing inside the browser.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.EditorControl.#ctor">
      <remarks>
        <p>You do not normally create instance of <see cref="T:Aspose.Editor.Client.EditorControl" />, this is done by
             the browser for you. Normally, server <b>EditorControl</b> is used server-side and embedds
             the 'object' tag into the HTML page.</p>
        <p>From within the scipt on the HTML page, you can use the <see cref="M:Aspose.Editor.Client.EditorControl.Receive(System.String,System.String)" /> and <see cref="M:Aspose.Editor.Client.EditorControl.Send(System.String,System.String)" />
             methods to exchange documents with server.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.EditorControl.Open">
      <summary>
             Creates a blank document and opens it in the editor.
             </summary>
      <remarks>
        <p>This is a shortcut for <c>EditorControl.Document = new Aspose.Editor.Document()</c>.</p>
        <p>If there is another document already open in the editor, it is discarded.</p>
        <seealso cref="P:Aspose.Editor.Client.EditorControl.Document" />
        <seealso cref="M:Aspose.Editor.Client.EditorControl.Close" />
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.EditorControl.Open(System.String)">
      <overloads>Opens a document for editing.</overloads>
      <summary>
             Loads a document from a file and opens it in the editor.
             </summary>
      <remarks>
        <p>This is a shortcut for <c>EditorControl.Document = new Aspose.Editor.Document(fileName)</c>.</p>
        <p>If there is another document already open in the editor, it is discarded.</p>
        <p>The document is loaded into memory completely. The file is closed.</p>
        <p>Aspose.Editor supports documents in the following formats:</p>
        <list type="bullet">
          <item>Microsoft Office Open XML (DOCX)</item>
          <item>DOC - Microsoft Office Word 97 - 2007 Document</item>
          <item>WordprocessingML - Microsoft Office Word 2003 XML</item>
          <item>HTML/XHTML - XHTML 1.0 Transitional</item>
          <item>RTF - Rich Text Format</item>
          <item>Plain Text (TXT)</item>
        </list>
        <seealso cref="P:Aspose.Editor.Client.EditorControl.Document" />
        <seealso cref="M:Aspose.Editor.Client.EditorControl.Save(System.String)" />
        <seealso cref="M:Aspose.Editor.Client.EditorControl.Close" />
      </remarks>
      <param name="fileName">File name of the document to open.</param>
    </member>
    <member name="M:Aspose.Editor.Client.EditorControl.Save(System.String)">
      <overloads>Saves the current document.</overloads>
      <summary>
             Saves the current document to a file in the WordprocessingML format.
             </summary>
      <param name="fileName">The name for the document.</param>
      <remarks>
        <p>This is a shortcut for <c>EditorControl.Document.Save(fileName)</c>.</p>
        <p>If a document with the specified file name already exists, the existing document is overwritten.</p>
        <seealso cref="P:Aspose.Editor.Client.EditorControl.Document" />
        <seealso cref="M:Aspose.Editor.Client.EditorControl.Open" />
      </remarks>
      <exception cref="T:System.InvalidOperationException">Thrown if <see cref="P:Aspose.Editor.Client.EditorControl.Document" /> is <c>null</c>.</exception>
    </member>
    <member name="M:Aspose.Editor.Client.EditorControl.Open(System.IO.Stream)">
      <summary>
             Loads a document from a stream and opens it in the editor.
             </summary>
      <remarks>
        <p>This is a shortcut for <c>EditorControl.Document = new Aspose.Editor.Document(stream)</c>.</p>
        <p>If there is another document already open in the editor, it is discarded.</p>
        <p>The stream must be open and the position in the stream should be properly set to the
beginning of the document.</p>
        <p>The document is loaded into memory completely. The stream is not needed and can be closed
after the document is loaded. It is the caller's responsibility to close/dispose the stream.</p>
        <p>This operation does not close the stream and leaves the position at the end of the stream.</p>
        <p>Aspose.Editor supports documents in the following formats:</p>
        <list type="bullet">
          <item>Microsoft Office Open XML (DOCX)</item>
          <item>DOC - Microsoft Office Word 97 - 2007 Document</item>
          <item>WordprocessingML - Microsoft Office Word 2003 XML</item>
          <item>HTML/XHTML - XHTML 1.0 Transitional</item>
          <item>RTF - Rich Text Format</item>
          <item>Plain Text (TXT)</item>
        </list>
        <seealso cref="P:Aspose.Editor.Client.EditorControl.Document" />
        <seealso cref="M:Aspose.Editor.Client.EditorControl.Save(System.String)" />
        <seealso cref="M:Aspose.Editor.Client.EditorControl.Close" />
      </remarks>
      <param name="stream">Stream containing the document.</param>
    </member>
    <member name="M:Aspose.Editor.Client.EditorControl.Save(System.IO.Stream)">
      <exception cref="T:System.InvalidOperationException">Thrown if <see cref="P:Aspose.Editor.Client.EditorControl.Document" /> is <c>null</c>.</exception>
    </member>
    <member name="M:Aspose.Editor.Client.EditorControl.Close">
      <summary>
             Closes the current document in the editor without saving changes.
             </summary>
      <remarks>
        <p>This is a shortcut for <c>EditorControl.Document = null</c>.</p>
        <seealso cref="M:Aspose.Editor.Client.EditorControl.Open" />
        <seealso cref="M:Aspose.Editor.Client.EditorControl.Save(System.String)" />
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.EditorControl.Receive(System.String,System.String)">
      <summary>
             Retrieves a document from the specified URL.
             </summary>
      <param name="url">The server URL.</param>
      <param name="param">A custom parameter which is passed to the server along with the request.
             It is typically used to identify the document.</param>
      <example>Shows how page script is used to receive document from the server.
             <code lang="JScript">
                 param = 'Welcome.xml';
                 clientControl.Receive('http://www.mysite.com/myapp/default.aspx', param);
             </code></example>
      <remarks>
        <p>If there is another document already open in the editor, it is discarded.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.EditorControl.Receive(System.String)">
      <summary>
            Retrieves a document from the URL set in <see cref="P:Aspose.Editor.Client.EditorControl.ServerUrl" />.
            </summary>
      <param name="param">A custom parameter which is passed to the server along with the request.
            It is typically used to identify the document.</param>
    </member>
    <member name="M:Aspose.Editor.Client.EditorControl.Send(System.String,System.String)">
      <summary>
            Sends the current document to the specified URL.
            </summary>
      <param name="url">Server URL.</param>
      <param name="param">A custom parameter which is passed to the server along with the document.
            It is typically used to identify the document.</param>
      <example>Shows how page script is used to send document to the server
            <code lang="JScript">
                param = 'Welcome.xml';
                clientControl.Send('http://www.mysite.com/myapp/default.aspx', param);
            </code></example>
      <exception cref="T:System.InvalidOperationException">Thrown if <see cref="P:Aspose.Editor.Client.EditorControl.Document" /> is <c>null</c>.</exception>
    </member>
    <member name="M:Aspose.Editor.Client.EditorControl.Send(System.String)">
      <summary>
            Sends the current document to the URL set in <see cref="P:Aspose.Editor.Client.EditorControl.ServerUrl" />.
            </summary>
      <param name="param">A custom parameter which is passed to the server along with the document.
            It is typically used to identify the document.</param>
      <exception cref="T:System.InvalidOperationException">Thrown if <see cref="P:Aspose.Editor.Client.EditorControl.Document" /> is <c>null</c>.</exception>
    </member>
    <member name="M:Aspose.Editor.Client.EditorControl.OpenChannel(System.Byte[])">
      <summary>
            Reads a document from a byte array.
            </summary>
      <param name="bytes">Document content.</param>
      <remarks>
        <p>An application can use this method with custom send/receive channels.</p>
        <p>If <paramref name="bytes" /> is empty this method does nothing.</p>
      </remarks>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="bytes" /> is <c>null</c>.</exception>
    </member>
    <member name="M:Aspose.Editor.Client.EditorControl.OpenBase64(System.String)">
      <summary>
            Reads a document from the base64 encoded string.
            </summary>
      <param name="base64">Document content.</param>
      <remarks>
        <p>Application can use this method with custom send/receive channels.</p>
        <p>If <paramref name="base64" /> is empty this method does nothing.</p>
      </remarks>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="base64" /> is <c>null</c>.</exception>
    </member>
    <member name="M:Aspose.Editor.Client.EditorControl.SaveChannel">
      <summary>
            Saves the currently opened document into a byte array.
            </summary>
      <returns>Document content.</returns>
      <remarks>
        <p>An application can use this method with custom send/receive channels.</p>
      </remarks>
      <exception cref="T:System.InvalidOperationException">Thrown if <see cref="P:Aspose.Editor.Client.EditorControl.Document" /> is <c>null</c>.</exception>
    </member>
    <member name="M:Aspose.Editor.Client.EditorControl.SaveBase64">
      <summary>
            Saves the currently opened document into a base64 encoded string.
            </summary>
      <returns>Document content.</returns>
      <remarks>
        <p>Application can use this method with custom send/receive channels.</p>
      </remarks>
      <exception cref="T:System.InvalidOperationException">Thrown if <see cref="P:Aspose.Editor.Client.EditorControl.Document" /> is <c>null</c>.</exception>
    </member>
    <member name="M:Aspose.Editor.Client.EditorControl.Recover(System.Exception)">
      <summary>
            Recovers control after internal error.
            </summary>
      <param name="e">Exception caught.</param>
      <returns>Positive value if recovered, in this case application can ignore exception
            and continue using control. Zero if failed, in this case application must either
            terminate or re-create control. Negative value if exception wasn't thrown by control.
            </returns>
      <remarks>
            This method must be called from within catch clause when exception is caught
            by the application.
            </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.EditorControl.ServerUrl">
      <summary>
            URL of the server control page.
            </summary>
      <remarks>
        <p>The URL is set automatically when control loads on the page. Normally there is no need to set this property.
            However using this property page script can change destination for the <see cref="M:Aspose.Editor.Client.EditorControl.Send(System.String)" /> command and
            thus documents will get sent to the server different from the one which issued the page.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.EditorControl.LoadArgs">
      <exclude />
      <summary>
            Reserved for internal use.
            </summary>
      <dev>
            Sets initialization arguments of client control. This property is managed
            by server control automatically and is not intended for application use.
            </dev>
    </member>
    <member name="P:Aspose.Editor.Client.EditorControl.Cookie">
      <summary>
             Gets or sets a cookie string value for the current page.
             </summary>
      <remarks>
        <p>Cookies are set automatically when control loads on the page. Normally there is no need to set this property.
             However using this property page script can override cookies which can be useful if, for example, documents are
             sent to the server different from the web server where page is.</p>
        <p>If a cookie is set, then it will be sent along with the document request to the server.</p>
        <p>ASP.NET applications which use cookies for managing session state can use
             this property to assign <c>document.cookie</c> from script. In this case,
             the document request will come to the server in the same session as the page hosting it.</p>
      </remarks>
      <example>Shows how you can pass a page cookie with the document request to the server.
             <code lang="JScript">
                 // Since ASP.NET application maintains session states through cookies by default,
                 // client script typically passes document cookie to the control, so it can send it
                 // along with the document request.
                 control.Cookie = document.cookie;
                 control.Send(ServerUrl, param);
             </code></example>
    </member>
    <member name="P:Aspose.Editor.Client.EditorControl.Credentials">
      <summary>
            Gets or sets credentials used for document requests.
            </summary>
      <remarks>
        <p>By default, when credentials are not specified, <see cref="P:System.Net.CredentialCache.DefaultCredentials" /> are used.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.EditorControl.Zoom">
      <summary>
            Provides access to the zoom options.
            </summary>
      <remarks>
        <p>Zoom options are persisted in the <see cref="T:Aspose.Editor.Client.Document" />.
            When a document is opened in the editor, the editor takes on the zoom options specified in the document.
            When a document is saved, the zoom options are stored in the document.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.EditorControl.Origin">
      <summary>
            Gets or sets origin of the rendered document (points). This is the logical
            coordinate which corresponds to the upper left corner of the client window.
            </summary>
      <remarks>If there is no opened document in the editor this property returns
            <see cref="F:System.Drawing.PointF.Empty" />, if set has no effect.</remarks>
    </member>
    <member name="P:Aspose.Editor.Client.EditorControl.Caret">
      <summary>
            Provides access to the caret (text insertion point) properties.
            </summary>
      <dev>Stored here, shared by views.</dev>
    </member>
    <member name="P:Aspose.Editor.Client.EditorControl.Document">
      <summary>
             Gets or sets the document currently opened in the editor.
             </summary>
      <remarks>
        <p>Returns null if no document is opened. Set to null if you want to close the document.</p>
        <seealso cref="M:Aspose.Editor.Client.EditorControl.Open" />
        <seealso cref="M:Aspose.Editor.Client.EditorControl.Save(System.String)" />
        <seealso cref="M:Aspose.Editor.Client.EditorControl.Close" />
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.EditorControl.Options">
      <summary>
            Gets the editor control options. These options are not stored in the document.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.EditorControl.Selection">
      <summary>
            Gets the selection object associated with the current document.
            </summary>
      <remarks>
        <p>If there is no open document in the editor then returned is <b>null</b>.</p>
        <seealso cref="P:Aspose.Editor.Client.EditorControl.Document" />
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.EditorControl.Dialogs">
      <summary>
            Provides access to the standard editor dialogs, such as font, paragraph format, page setup etc.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.EditorControl.Information">
      <summary>
            Gets information properties related to the document currently opened in the editor control.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.EditorControl.Commands">
      <summary>
            Gets list of commands.
            </summary>
      <remarks>
        <p>Commands are used in UI implementation, they are bind to menus, toolbars and shortcuts.
            Each command has name, description and function which is invoked when command is executed.</p>
        <p>Purpose of commands is that they are accessible using string names, can be easilly
            browsed, dynamically added, removed and invoked.</p>
        <p>Application code can add and remove commands as required.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.EditorControl.Bars">
      <summary>
            Gets control bars of the editor.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.EditorControl.Plugins">
      <summary>
            Gets editor plugins collection. Returns <c>null</c> if plugin entries in the configuration file haven't been processed yet.
            </summary>
      <remarks>Plugins are loaded either when this property is get for the first time, or when <see cref="M:Aspose.Editor.Client.EditorControl.OnCreateControl" />
            is invoked.
            </remarks>
    </member>
    <member name="E:Aspose.Editor.Client.EditorControl.ContentChanged">
      <summary>
            Occurs when text in the document is inserted or removed.
            </summary>
      <remarks>
        <p>This event is fired when content is inserted, removed or replaced in the document.</p>
        <p>The event provides three integer values: Start, EndBefore and EndAfter. These values
            describe the changed range in the document in the following way:</p>
        <list type="bullet">
          <item>If <c>Start = EndBefore</c> then range (Start, EndAfter) was inserted,</item>
          <item>If <c>Start = EndAfter</c> then range (Start, EndBefore) was removed,</item>
          <item>Otherwise range (Start, EndBefore) was replaced with range (Start, EndAfter).</item>
        </list>
        <note>The event is fired after the change has been already applied. There is no way for
            the application to get the text which has been removed or replaced.</note>
        <p>This event is not fired when formatting in the document is changed.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.EditorControl.ActiveView">
      <summary>
            Gets current active view control of the editor. If there is no opened document in the
            editor this property returns <b>null</b>.
            </summary>
    </member>
    <member name="E:Aspose.Editor.Client.EditorControl.Idle">
      <summary>
            Occurs when control has just finished processing and now is idle.
            </summary>
      <remarks>
        <p>This event is not guaranteed to occur after each action performed, instead it occurs
            after 10-100ms interval elapses since the last action has been performed.</p>
        <p>This event is usually used to update state of the interface elements like menu items
            and tool bar buttons.</p>
      </remarks>
    </member>
    <member name="E:Aspose.Editor.Client.EditorControl.AttributesChanged">
      <summary>
            Occurs when text attributes change.
            </summary>
      <remarks>
        <p>This event is fired when formatting of the document range is changed.</p>
        <note>The event is fired after the change has been already applied. There is no
            way for the application to get attributes which have been changed.</note>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.EditorControl.Variables">
      <summary>
            Gets collection of custom editor variables. This can be used for two purposes,
            first, to set properties on the editor in ASP.NET and, second, to store values
            shared by plugins.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.EditorControl.Focused">
      <exclude />
      <summary>
            Gets a value indicating whether the control has input focus.
            </summary>
    </member>
    <member name="E:Aspose.Editor.Client.EditorControl.DocumentChanged">
      <summary>
            Occurs when the <see cref="P:Aspose.Editor.Client.EditorControl.Document" /> property has been changed.
            </summary>
    </member>
    <member name="E:Aspose.Editor.Client.EditorControl.CommandInvoked">
      <summary>
            Occurs when a command from <see cref="P:Aspose.Editor.Client.EditorControl.Commands" /> collection has been invoked.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.CustomDocumentProperties">
      <summary>
             A collection of custom document properties.
             </summary>
      <remarks>
        <p>A document can have a number of custom (user defined) properties. These properties
             can be accessed via the <see cref="T:Aspose.Editor.Client.CustomDocumentProperties" /> collection.</p>
        <p>You do not create instances of this class directly. You access custom document properties
             via the <see cref="P:Aspose.Editor.Client.Document.CustomDocumentProperties" /> property.</p>
        <p>Each item in this collection is a <see cref="T:Aspose.Editor.Client.DocumentProperty" /> object that represents
             a custom property of the container document.</p>
        <seealso cref="T:Aspose.Editor.Client.Document" />
        <seealso cref="T:Aspose.Editor.Client.BuiltInDocumentProperties" />
        <seealso cref="T:Aspose.Editor.Client.DocumentProperty" />
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.CustomDocumentProperties.Add(System.String,System.String)">
      <overloads>Creates a new custom document property.</overloads>
      <summary>
            Creates a new custom document property of the <see cref="F:Aspose.Editor.Client.PropertyType.String" /> data type.
            </summary>
      <param name="name">The name of the property.</param>
      <param name="value">The value of the property.</param>
      <returns>The newly created property object.</returns>
    </member>
    <member name="M:Aspose.Editor.Client.CustomDocumentProperties.Add(System.String,System.Int32)">
      <summary>
            Creates a new custom document property of the <see cref="F:Aspose.Editor.Client.PropertyType.Number" /> data type.
            </summary>
      <param name="name">The name of the property.</param>
      <param name="value">The value of the property.</param>
      <returns>The newly created property object.</returns>
    </member>
    <member name="M:Aspose.Editor.Client.CustomDocumentProperties.Add(System.String,System.DateTime)">
      <summary>
            Creates a new custom document property of the <see cref="F:Aspose.Editor.Client.PropertyType.DateTime" /> data type.
            </summary>
      <param name="name">The name of the property.</param>
      <param name="value">The value of the property.</param>
      <returns>The newly created property object.</returns>
    </member>
    <member name="M:Aspose.Editor.Client.CustomDocumentProperties.Add(System.String,System.Boolean)">
      <summary>
            Creates a new custom document property of the <see cref="F:Aspose.Editor.Client.PropertyType.Boolean" /> data type.
            </summary>
      <param name="name">The name of the property.</param>
      <param name="value">The value of the property.</param>
      <returns>The newly created property object.</returns>
    </member>
    <member name="M:Aspose.Editor.Client.CustomDocumentProperties.Add(System.String,System.Double)">
      <summary>
            Creates a new custom document property of the <see cref="F:Aspose.Editor.Client.PropertyType.Double" /> data type.
            </summary>
      <param name="name">The name of the property.</param>
      <param name="value">The value of the property.</param>
      <returns>The newly created property object.</returns>
    </member>
    <member name="M:Aspose.Editor.Client.CustomDocumentProperties.Remove(System.String)">
      <summary>
            Removes a property with the specified name from the collection.
            </summary>
      <param name="name">The case-sensitive name of the property to remove.</param>
    </member>
    <member name="P:Aspose.Editor.Client.CustomDocumentProperties.Count">
      <summary>
            Gets number of items in the collection.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.CustomDocumentProperties.Item(System.String)">
      <overloads>Returns a <see cref="T:Aspose.Editor.Client.DocumentProperty" /> object.</overloads>
      <summary>
            Returns a <see cref="T:Aspose.Editor.Client.DocumentProperty" /> object by the name of the property.
            </summary>
      <remarks>
        <p>Returns null if a property with the specified name is not found.</p>
      </remarks>
      <param name="name">The case-sensitive name of the property to retrieve.</param>
    </member>
    <member name="P:Aspose.Editor.Client.CustomDocumentProperties.Item(System.Int32)">
      <summary>
            Returns a <see cref="T:Aspose.Editor.Client.DocumentProperty" /> object by index.
            </summary>
      <param name="index">Zero-based index of the
            <see cref="T:Aspose.Editor.Client.DocumentProperty" /> to retrieve.</param>
    </member>
    <member name="T:Aspose.Editor.PluginStatus">
      <summary>
            Represents plugin status value.
            </summary>
      <remarks>
            Plugins shall use negative values to report errors.
            </remarks>
    </member>
    <member name="F:Aspose.Editor.PluginStatus.Error">
      <summary>
            Module wasn't loaded or cannot be started.
            </summary>
    </member>
    <member name="F:Aspose.Editor.PluginStatus.None">
      <summary>
            Default value. This value is interpreted in the same way as <see cref="F:Aspose.Editor.PluginStatus.Started" />.
            It is used to support plugins which don't update status.
            </summary>
    </member>
    <member name="F:Aspose.Editor.PluginStatus.Read">
      <summary>
            Configuration entry for the plugin is read, plugin is not yet loaded.
            </summary>
    </member>
    <member name="F:Aspose.Editor.PluginStatus.Loaded">
      <summary>
            Plugin is loaded, but not yet started.
            </summary>
    </member>
    <member name="F:Aspose.Editor.PluginStatus.Started">
      <summary>
            Plugin is loaded and started.
            </summary>
    </member>
    <member name="M:Aspose.Editor.PluginStatus.op_Implicit(Aspose.Editor.PluginStatus)~System.Int32">
      <summary>
            Converts <see cref="T:Aspose.Editor.PluginStatus" /> to <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="M:Aspose.Editor.PluginStatus.ToInt(Aspose.Editor.PluginStatus)">
      <summary>
            Converts <see cref="T:Aspose.Editor.PluginStatus" /> to <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="M:Aspose.Editor.PluginStatus.op_Implicit(System.Int32)~Aspose.Editor.PluginStatus">
      <summary>
            Converts <see cref="T:System.Int32" /> to <see cref="T:Aspose.Editor.PluginStatus" />.
            </summary>
    </member>
    <member name="M:Aspose.Editor.PluginStatus.FromInt(System.Int32)">
      <summary>
            Converts <see cref="T:System.Int32" /> to <see cref="T:Aspose.Editor.PluginStatus" />.
            </summary>
    </member>
    <member name="M:Aspose.Editor.PluginStatus.#ctor(System.Int32)">
      <summary>
            Initializes new instance of this type.
            </summary>
    </member>
    <member name="M:Aspose.Editor.PluginStatus.IsStarted(System.Int32)">
      <summary>
            Returns True if status is <see cref="F:Aspose.Editor.PluginStatus.None" /> or <see cref="F:Aspose.Editor.PluginStatus.Started" />.
            </summary>
    </member>
    <member name="M:Aspose.Editor.PluginStatus.IsError(System.Int32)">
      <summary>
            Returns True if specified code is negative.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.TabLeader">
      <summary>
            Specifies the type of the leader line displayed under the tab character.
            </summary>
      <remarks>
        <seealso cref="T:Aspose.Editor.Client.TabStop" />
      </remarks>
    </member>
    <member name="F:Aspose.Editor.Client.TabLeader.None">
      <summary>
            No leader line is displayed.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.TabLeader.Dots">
      <summary>
            The leader line is made up from dots.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.TabLeader.Dashes">
      <summary>
            The leader line is made up from dashes.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.TabLeader.Line">
      <summary>
            The leader line is a single line.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.TabLeader.Heavy">
      <summary>
            The leader line is a single thick line.
            </summary>
    </member>
    <member name="F:Aspose.Editor.Client.TabLeader.MiddleDot">
      <summary>
            The leader line is made up from middle-dots.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.DocumentProperty">
      <summary>
            Represents a custom or built-in document property.
            </summary>
      <remarks>
        <p>You do not create instances of this class directly. You access <see cref="T:Aspose.Editor.Client.DocumentProperty" />
            objects via the <see cref="T:Aspose.Editor.Client.BuiltInDocumentProperties" /> and <see cref="T:Aspose.Editor.Client.CustomDocumentProperties" />
            collections.</p>
        <seealso cref="T:Aspose.Editor.Client.BuiltInDocumentProperties" />
        <seealso cref="T:Aspose.Editor.Client.CustomDocumentProperties" />
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.DocumentProperty.ToString">
      <summary>
            Returns the property value as a string.
            </summary>
      <remarks>
        <p>Converts a number property using <see cref="M:System.Object.ToString" />.
            Converts a boolean property into "Y" or "N". Converts
            a date property into a short date string.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.DocumentProperty.ToInt">
      <summary>
            Returns the property value as integer.
            </summary>
      <remarks>
            Throws an exception if the property type is not <see cref="F:Aspose.Editor.Client.PropertyType.Number" />.
            </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.DocumentProperty.ToDouble">
      <summary>
            Returns the property value as double.
            </summary>
      <remarks>
            Throws an exception if the property type is not <see cref="F:Aspose.Editor.Client.PropertyType.Double" />.
            </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.DocumentProperty.ToDateTime">
      <summary>
            Returns the property value as DateTime in local timezone.
            </summary>
      <remarks>
        <p>Throws an exception if the property type is not <see cref="F:Aspose.Editor.Client.PropertyType.DateTime" />.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.DocumentProperty.ToBool">
      <summary>
            Returns the property value as bool.
            </summary>
      <remarks>
        <p>Throws an exception if the property type is not <see cref="F:Aspose.Editor.Client.PropertyType.Boolean" />.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.DocumentProperty.Name">
      <summary>
            Returns the name of the property.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.DocumentProperty.Value">
      <summary>
            Gets or sets the value of the property.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.DocumentProperty.Type">
      <summary>
            Gets the data type of the property.
            </summary>
      <remarks>
        <p>The type of the property is
            <see cref="T:Aspose.Editor.Client.PropertyType" />.</p>
      </remarks>
    </member>
    <member name="T:Aspose.Editor.Client.NamespaceDoc">
      <summary>
        <p>The <b>Aspose.Editor.Client</b> namespace contains classes of the word processor control
            that runs on an HTML page inside Microsoft Internet Explorer. The following are the main classes:</p>
        <list type="bullet">
          <item>
            <see cref="T:Aspose.Editor.Client.EditorControl" /> is a word processor embedded into a web page in the client browser.</item>
          <item>
            <see cref="T:Aspose.Editor.Client.Document" /> represents a Microsoft Word document that can be opened inside the editor control.</item>
          <item>
            <see cref="T:Aspose.Editor.Client.Range" /> allows to programmatically (without user interface) manipulate content and formatting of the document.</item>
          <item>
            <see cref="T:Aspose.Editor.Client.Selection" /> represents selected text in the editor.</item>
          <item>
            <see cref="T:Aspose.Editor.Client.PageRenderer" /> renders pages of a document to a .NET <see cref="T:System.Drawing.Graphics" /> object
            to create thumbnails or print.</item>
        </list>
        <p>Aspose.Editor is written completely in C#, CLS compliant and contains 
            only safe managed code. Microsoft Word is not required in order to use Aspose.Editor.</p>
      </summary>
    </member>
    <member name="T:Aspose.Editor.Variables">
      <summary>
            Collection of custom variables. It serves two purposes, first, plugins use it to share values,
            second, server control use this collection to access client properties remotely.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Variables.Item(System.String,System.Object[])">
      <summary>
            Gets or sets values in the collection.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.StandardToolBar">
      <summary>
            Provides base class functionality for standard tool bars.
            </summary>
      <remarks>
        <p>This class contains code which is required to properly integrate with
            <see cref="T:Aspose.Editor.Client.EditorControl" /> in order to enable dynamic updates to the tool bar buttons.</p>
        <p>Application can inherit this class to change default appearance and behavior if required.</p>
        <seealso cref="M:Aspose.Editor.Client.StandardControls.CreateToolBar(Aspose.Editor.Client.ToolBarType,Aspose.Editor.Client.EditorControl)" />
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.StandardToolBar.#ctor(Aspose.Editor.Client.EditorControl,System.String[])">
      <summary>
            Initializes a new instance of the class bound to specified editor and populated
            with specified tool bar buttons.
            </summary>
      <param name="editor">An <see cref="T:Aspose.Editor.Client.EditorControl" /> object which shall host this tool bar.</param>
      <param name="commands">An array of command names used to create tool bar buttons.</param>
    </member>
    <member name="T:Aspose.Editor.Client.MenuItem">
      <summary>
            Represents an individual item that is displayed within a <see cref="T:Aspose.Editor.Client.StandardMenuBar" />.
            </summary>
    </member>
    <member name="M:Aspose.Editor.Client.MenuItem.#ctor(System.String,Aspose.Editor.Client.Command)">
      <summary>
            Initializes a new instance of the class with a specified caption
            and a command assigned for the menu item.
            </summary>
      <param name="text">The caption for the menu item.</param>
      <param name="command">A <see cref="T:Aspose.Editor.Client.Command" /> object to be
            assigned for the menu item.</param>
    </member>
    <member name="M:Aspose.Editor.Client.MenuItem.#ctor(System.String,Aspose.Editor.Client.MenuItem[])">
      <summary>
            Initializes a new instance of the class with a specified caption
            and an array of submenu items defined for the menu item.
            </summary>
      <param name="text">The caption for the menu item.</param>
      <param name="items">An array of <see cref="T:Aspose.Editor.Client.MenuItem" /> objects that contains
            the submenu items for this menu item.</param>
    </member>
    <member name="M:Aspose.Editor.Client.MenuItem.#ctor(System.String)">
      <summary>
            Constructor.
            </summary>
      <param name="text">The caption for the menu item.</param>
    </member>
    <member name="P:Aspose.Editor.Client.MenuItem.Separator">
      <summary>
            Gets a <see cref="T:Aspose.Editor.Client.MenuItem" /> object representing a menu bar separator.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.MenuItem.MenuItems">
      <summary>
            Gets collection of MenuItem objects associated with the menu.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.StandardMenuBar">
      <summary>
            Implements standard menu bar populated with standard menu items.
            </summary>
      <remarks>
        <p>This class contains code which is required to properly integrate with
            <see cref="T:Aspose.Editor.Client.EditorControl" /> in order to enable dynamic updates to the menu items.</p>
        <p>Application can inherit this class to change default appearance and behavior if required.</p>
        <seealso cref="M:Aspose.Editor.Client.StandardControls.CreateMenuBar(Aspose.Editor.Client.EditorControl)" />
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.StandardMenuBar.#ctor(Aspose.Editor.Client.EditorControl,Aspose.Editor.Client.MenuItem[])">
      <summary>
            Initializes a new instance of the class bound to specified editor
            and populated with specified menu items.
            </summary>
      <param name="editor">An <see cref="T:Aspose.Editor.Client.EditorControl" /> object which shall host this menu.</param>
      <param name="items">An array of <see cref="T:Aspose.Editor.Client.MenuItem" /> objects which represent menu structure.</param>
    </member>
    <member name="M:Aspose.Editor.Client.StandardMenuBar.GetItemAt(System.Int32)">
      <summary>
            Gets menu item at specified index.
            </summary>
      <param name="index">Menu item index.</param>
      <returns>A <see cref="T:Aspose.Editor.Client.MenuItem" /> that represents the
            item at specified index.</returns>
    </member>
    <member name="M:Aspose.Editor.Client.StandardMenuBar.AddItem(Aspose.Editor.Client.MenuItem)">
      <summary>
            Adds specified item to the menu.
            </summary>
      <param name="item">Item to add.</param>
    </member>
    <member name="M:Aspose.Editor.Client.StandardMenuBar.RemoveItemAt(System.Int32)">
      <summary>
            Removes an item from the menu at specified index.
            </summary>
      <param name="index">An index of an item to be removed.</param>
    </member>
    <member name="M:Aspose.Editor.Client.StandardMenuBar.RemoveItem(Aspose.Editor.Client.MenuItem)">
      <summary>
            Removes specified item from the menu.
            </summary>
      <param name="item">A reference to the item to be removed.</param>
    </member>
    <member name="M:Aspose.Editor.Client.StandardMenuBar.InsertItem(Aspose.Editor.Client.MenuItem,System.Int32)">
      <summary>
            Inserts specified item to the menu at specified index.
            </summary>
      <param name="item">A <see cref="T:Aspose.Editor.Client.MenuItem" /> object to be inserted.</param>
      <param name="index">A position to insert item.</param>
    </member>
    <member name="P:Aspose.Editor.Client.StandardMenuBar.ItemCount">
      <summary>
            Gets number of menu items.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.AttachedEventArgs">
      <summary>
            Provides data for the <see cref="M:Aspose.Editor.Client.IAttachable.OnAttached(System.Object,Aspose.Editor.Client.AttachedEventArgs)" /> event.
            </summary>
    </member>
    <member name="M:Aspose.Editor.Client.AttachedEventArgs.#ctor(Aspose.Editor.Client.EditorControl)">
      <summary>
            Initializes new instance of this class.
            </summary>
      <param name="editor">Editor control.</param>
    </member>
    <member name="P:Aspose.Editor.Client.AttachedEventArgs.Editor">
      <summary>
            Gets instance of the <see cref="T:Aspose.Editor.Client.EditorControl" /> object to which control is attached.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.FindResult">
      <summary>
            Represents the result of the Find and Replace operation.
            </summary>
    </member>
    <member name="M:Aspose.Editor.Client.FindResult.Apply">
      <summary>
            Replaces the current match with replace text and moves to the next match.
            </summary>
      <returns>
        <b>True</b> if moved successfully, <b>false</b> if no more matches are available.</returns>
    </member>
    <member name="M:Aspose.Editor.Client.FindResult.ApplyAll">
      <summary>
            Replaces all found matches.
            </summary>
      <returns>
        <b>True</b> if at least a single match was found, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:Aspose.Editor.Client.FindResult.Skip">
      <summary>
            Moves to the next match.
            </summary>
      <returns>
        <b>True</b> if moved successfully, <b>false</b> if there are no more matches.</returns>
    </member>
    <member name="M:Aspose.Editor.Client.FindResult.GetMatch">
      <summary>
            Gets the range of the current match, or <b>null</b> if there is no current match.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.PleaseReportException">
      <summary>
             The exception that is thrown when an unexpected situation occurs during processing of a document.
             </summary>
      <remarks>
        <p>When this exception is thrown, it is not likely that you did something wrong.
             Most likely causes of this exception are: badly damaged document file, unexpected elements or values
             in the document that cannot be safely ignored or an Aspose.Editor internal error.</p>
        <p>Therefore, the message of the exception suggests that you report it in the Aspose.Editor Support Forums
             (http://www.aspose.com/Community/Forums/Default.aspx) along with the document that caused the problem
             for Aspose.Editor developers to investigate and fix.</p>
      </remarks>
    </member>
    <member name="T:Aspose.Editor.Client.ContentChangedEventHandler">
      <summary>
            Represents the method that will handle the <see cref="E:Aspose.Editor.Client.EditorControl.ContentChanged" /> event.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.ContentChangedEventArgs">
      <summary>
            Provides data for the <see cref="E:Aspose.Editor.Client.EditorControl.ContentChanged" /> event.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.ContentChangedEventArgs.Start">
      <summary>
            Gets range start. 
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.ContentChangedEventArgs.EndBefore">
      <summary>
            Gets range end before change has occured.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.ContentChangedEventArgs.EndAfter">
      <summary>
            Gets range end after change has occured.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.UnsupportedFileFormatException">
      <summary>
            Thrown during document load, when the document format is not recognized or not supported by Aspose.Words.
            </summary>
    </member>
    <member name="T:Aspose.Editor.Client.Sections">
      <summary>
            A collection of <see cref="T:Aspose.Editor.Client.Section" /> objects in a <see cref="T:Aspose.Editor.Client.Range" />.
            </summary>
      <remarks>
        <p>Use the <see cref="P:Aspose.Editor.Client.Range.Sections" /> property of the <see cref="T:Aspose.Editor.Client.Range" /> object to return
            a <see cref="T:Aspose.Editor.Client.Sections" /> collection. You do not create instances of the <see cref="T:Aspose.Editor.Client.Sections" />
            class directly.</p>
        <p>Use the <see cref="P:Aspose.Editor.Client.Sections.Item(System.Int32)" /> property to return a single <see cref="T:Aspose.Editor.Client.Section" /> object.</p>
        <p>In the current version, it is not possible to add new sections to the
            <see cref="T:Aspose.Editor.Client.Sections" /> collection.</p>
        <p>A <see cref="T:Aspose.Editor.Client.Sections" /> collection is always "live". Any changes made to the document
            are reflected in all existing <see cref="T:Aspose.Editor.Client.Sections" /> collections.</p>
        <p>This is a "live" collection of document elements so getting <see cref="P:Aspose.Editor.Client.Sections.Count" /> might sometimes have 
to recalculate the number of items. Consider caching the value of <see cref="P:Aspose.Editor.Client.Sections.Count" /> in time-critical loops.</p>
        <seealso cref="T:Aspose.Editor.Client.Range" />
        <seealso cref="T:Aspose.Editor.Client.Section" />
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.Sections.Item(System.Int32)">
      <summary>
            Returns a <see cref="T:Aspose.Editor.Client.Section" /> at the specified index.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Sections.Count">
      <summary>
            Returns the number of items in the collection.
            </summary>
      <remarks>
        <p>This is a "live" collection of document elements so getting <see cref="P:Aspose.Editor.Client.Sections.Count" /> might sometimes have 
to recalculate the number of items. Consider caching the value of <see cref="P:Aspose.Editor.Client.Sections.Count" /> in time-critical loops.</p>
      </remarks>
    </member>
    <member name="T:Aspose.Editor.Client.Document">
      <summary>
             Represents a Microsoft Word document.
             </summary>
      <remarks>
        <p>To load an existing document, pass a file name or a stream into one of the <see cref="T:Aspose.Editor.Client.Document" />
             constructors. To create a blank document, call the constructor without parameters.</p>
        <p>Use one of the <see cref="M:Aspose.Editor.Client.Document.Save(System.String)" /> method overloads to save the document into a file or stream.</p>
        <p>After a document is loaded, you can open the document for editing inside an <see cref="T:Aspose.Editor.Client.EditorControl" />
             by setting the <see cref="P:Aspose.Editor.Client.EditorControl.Document" /> property of the <see cref="T:Aspose.Editor.Client.EditorControl" /> object.</p>
        <p>A <see cref="T:Aspose.Editor.Client.Document" /> can be opened, saved and programmatically modified without being made visible
             to the user in the editor control. The <see cref="T:Aspose.Editor.Client.Document" /> class provides methods and properties
             to programmatically manipulate content of the document via the <see cref="T:Aspose.Editor.Client.Range" /> object in a manner,
             similar to Microsoft Word Automation. Use <see cref="M:Aspose.Editor.Client.Document.GetRange(System.Int32,System.Int32)" /> methods to obtain <see cref="T:Aspose.Editor.Client.Range" />
             objects.</p>
        <p>All editing and formatting operations you perform on a <see cref="T:Aspose.Editor.Client.Document" /> are logged
             into the undo list and can be undone using the <see cref="M:Aspose.Editor.Client.Document.Undo" /> method and redone using
             the <see cref="M:Aspose.Editor.Client.Document.Redo" /> method.</p>
        <p>Aspose.Editor supports documents in the following formats:</p>
        <list type="bullet">
          <item>Microsoft Office Open XML (DOCX)</item>
          <item>DOC - Microsoft Office Word 97 - 2007 Document</item>
          <item>WordprocessingML - Microsoft Office Word 2003 XML</item>
          <item>HTML/XHTML - XHTML 1.0 Transitional</item>
          <item>RTF - Rich Text Format</item>
          <item>Plain Text (TXT)</item>
        </list>
        <seealso cref="T:Aspose.Editor.Client.EditorControl" />
        <seealso cref="T:Aspose.Editor.Client.Range" />
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.Document.#ctor">
      <overloads>Creates or loads a document.</overloads>
      <summary>
             Creates a blank document.
             </summary>
      <remarks>
        <p>The document paper size is Letter by default. If you want to
             change page setup, use the <see cref="P:Aspose.Editor.Client.Section.PageSetup" /> property
             of the <see cref="T:Aspose.Editor.Client.Section" /> object.</p>
        <seealso cref="T:Aspose.Editor.Client.PageSetup" />
        <seealso cref="T:Aspose.Editor.Client.Section" />
        <seealso cref="M:Aspose.Editor.Client.Document.Save(System.String)" />
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.Document.#ctor(System.String)">
      <summary>
             Loads an existing WordprocessingML document from a file.
             </summary>
      <remarks>
        <p>The document is loaded into memory completely. The file is closed.</p>
        <p>Aspose.Editor supports documents in the following formats:</p>
        <list type="bullet">
          <item>Microsoft Office Open XML (DOCX)</item>
          <item>DOC - Microsoft Office Word 97 - 2007 Document</item>
          <item>WordprocessingML - Microsoft Office Word 2003 XML</item>
          <item>HTML/XHTML - XHTML 1.0 Transitional</item>
          <item>RTF - Rich Text Format</item>
          <item>Plain Text (TXT)</item>
        </list>
        <seealso cref="M:Aspose.Editor.Client.Document.Save(System.String)" />
      </remarks>
      <param name="fileName">File name of the document to open.</param>
    </member>
    <member name="M:Aspose.Editor.Client.Document.#ctor(System.IO.Stream)">
      <summary>
             Loads an existing WordprocessingML document from a stream.
             </summary>
      <remarks>
        <p>The stream must be open and the position in the stream should be properly set to the
beginning of the document.</p>
        <p>The document is loaded into memory completely. The stream is not needed and can be closed
after the document is loaded. It is the caller's responsibility to close/dispose the stream.</p>
        <p>This operation does not close the stream and leaves the position at the end of the stream.</p>
        <p>Aspose.Editor supports documents in the following formats:</p>
        <list type="bullet">
          <item>Microsoft Office Open XML (DOCX)</item>
          <item>DOC - Microsoft Office Word 97 - 2007 Document</item>
          <item>WordprocessingML - Microsoft Office Word 2003 XML</item>
          <item>HTML/XHTML - XHTML 1.0 Transitional</item>
          <item>RTF - Rich Text Format</item>
          <item>Plain Text (TXT)</item>
        </list>
        <seealso cref="M:Aspose.Editor.Client.Document.Save(System.String)" />
      </remarks>
      <param name="stream">Stream containing the document.</param>
    </member>
    <member name="M:Aspose.Editor.Client.Document.Save(System.String)">
      <overloads>Saves the document.</overloads>
      <summary>
            Saves the document to a file.
            </summary>
      <param name="fileName">The name for the document.</param>
      <remarks>
        <p>Document is saved in <see cref="P:Aspose.Editor.Client.Document.Format" /> document format.</p>
        <p>If a document with the specified file name already exists, the existing document is overwritten.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.Document.Save(System.String,Aspose.Editor.Client.DocumentFormat)">
      <overloads>Saves the document.</overloads>
      <summary>
            Saves the document to a file in the specified format.
            </summary>
      <remarks>
        <p>If a document with the specified file name already exists, the existing document is overwritten.</p>
      </remarks>
      <param name="fileName">The name for the document.</param>
      <param name="documentFormat">A <see cref="T:Aspose.Editor.Client.DocumentFormat" /> value that specifies the format
            in which the document is saved. If <see cref="F:Aspose.Editor.Client.DocumentFormat.None" /> is specified then
            <see cref="P:Aspose.Editor.Client.Document.Format" /> is used instead.</param>
    </member>
    <member name="M:Aspose.Editor.Client.Document.Save(System.IO.Stream)">
      <overloads>Saves the document.</overloads>
      <summary>
            Saves the document to a stream.
            </summary>
      <param name="stream">Stream to write document to.</param>
      <remarks>
        <p>Document is saved in <see cref="P:Aspose.Editor.Client.Document.Format" /> document format.</p>
        <p>The stream must be open and the position in the stream must be properly set (typically at 
the beginning of the stream).</p>
        <p>This operation does not close the stream and leaves the position at the end of the stream.
It is the caller's responsibility to close/dispose the stream.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.Document.Save(System.IO.Stream,Aspose.Editor.Client.DocumentFormat)">
      <overloads>Saves the document.</overloads>
      <summary>
            Saves the document to a stream in the specified format.
            </summary>
      <remarks>
        <p>The stream must be open and the position in the stream must be properly set (typically at 
the beginning of the stream).</p>
        <p>This operation does not close the stream and leaves the position at the end of the stream.
It is the caller's responsibility to close/dispose the stream.</p>
      </remarks>
      <param name="stream">The stream to write the document to.</param>
      <param name="documentFormat">A <see cref="T:Aspose.Editor.Client.DocumentFormat" /> value that specifies the format
            in which the document is saved. If <see cref="F:Aspose.Editor.Client.DocumentFormat.None" /> is specified then
            <see cref="P:Aspose.Editor.Client.Document.Format" /> is used instead.</param>
    </member>
    <member name="M:Aspose.Editor.Client.Document.Undo">
      <summary>
             Undoes the last document modification.
             </summary>
      <remarks>
        <p>If there is nothing to undo, simply returns.</p>
        <p>Unlimited number of undo and redo operations are supported.</p>
        <seealso cref="M:Aspose.Editor.Client.Document.Redo" />
        <seealso cref="P:Aspose.Editor.Client.Document.CanUndo" />
        <seealso cref="P:Aspose.Editor.Client.Document.CanRedo" />
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.Document.Redo">
      <summary>
             Reverses the effect of the last call to <see cref="M:Aspose.Editor.Client.Document.Undo" />.
             </summary>
      <remarks>
        <p>If there is nothing to redo, simply returns.</p>
        <p>Unlimited number of undo and redo operations are supported.</p>
        <seealso cref="M:Aspose.Editor.Client.Document.Undo" />
        <seealso cref="P:Aspose.Editor.Client.Document.CanUndo" />
        <seealso cref="P:Aspose.Editor.Client.Document.CanRedo" />
      </remarks>
    </member>
    <member name="M:Aspose.Editor.Client.Document.UndoClear">
      <summary>
            Clears the list of actions that can be undone for this document.
            </summary>
    </member>
    <member name="M:Aspose.Editor.Client.Document.CanPaste(System.Windows.Forms.IDataObject)">
      <summary>
             Returns <b>True</b> if the specified data object can be pasted into the document.
             </summary>
      <remarks>
        <p>To perform the paste operation, use the <see cref="M:Aspose.Editor.Client.Range.Paste" /> method
             of the <see cref="T:Aspose.Editor.Client.Range" /> object.</p>
        <seealso cref="T:Aspose.Editor.Client.Range" />
      </remarks>
      <param name="data">Clipboard data object.</param>
    </member>
    <member name="M:Aspose.Editor.Client.Document.GetRange">
      <overloads>Creates and returns a <see cref="T:Aspose.Editor.Client.Range" /> object
            that allows programmatic access to text and formatting.</overloads>
      <summary>
            Creates and returns a <see cref="T:Aspose.Editor.Client.Range" /> object that represents the
            complete document.
            </summary>
      <returns>The newly created <see cref="T:Aspose.Editor.Client.Range" /> object.</returns>
    </member>
    <member name="M:Aspose.Editor.Client.Document.GetRange(System.Int32,System.Int32)">
      <summary>
            Creates and returns a <see cref="T:Aspose.Editor.Client.Range" /> object with the specifed start and length.
            </summary>
      <param name="start">Zero-based index of the start character position.</param>
      <param name="length">Length of the range.</param>
      <returns>The newly created <see cref="T:Aspose.Editor.Client.Range" /> object.</returns>
    </member>
    <member name="M:Aspose.Editor.Client.Document.ToString">
      <summary>
            Returns content of the main text story of the document as a string.
            All formating information is ignored.
            </summary>
      <returns>Plain text of the document.</returns>
    </member>
    <member name="P:Aspose.Editor.Client.Document.IsModified">
      <summary>
            Returns <b>True</b> if the document was modified since last save operation.
            </summary>
      <remarks>
        <seealso cref="M:Aspose.Editor.Client.Document.Save(System.String)" />
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.Document.CanRedo">
      <summary>
            Returns <b>True</b> if the document can perform a <see cref="M:Aspose.Editor.Client.Document.Redo" /> opertaion.
            </summary>
      <remarks>
        <seealso cref="P:Aspose.Editor.Client.Document.CanUndo" />
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.Document.CanUndo">
      <summary>
            Returns <b>True</b> if the document can perform an <see cref="M:Aspose.Editor.Client.Document.Undo" /> opertaion.
            </summary>
      <remarks>
        <seealso cref="P:Aspose.Editor.Client.Document.CanRedo" />
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.Document.BuiltInDocumentProperties">
      <summary>
            Provides access to the built-in properties of the document.
            </summary>
      <remarks>
        <seealso cref="P:Aspose.Editor.Client.Document.CustomDocumentProperties" />
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.Document.CustomDocumentProperties">
      <summary>
            Provides access to the custom properties of the document.
            </summary>
      <remarks>
        <seealso cref="P:Aspose.Editor.Client.Document.BuiltInDocumentProperties" />
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.Document.Variables">
      <summary>
            Provides access to the collection of document variables.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Document.Styles">
      <summary>
            A collection of <see cref="T:Aspose.Editor.Client.Style" /> objects that represents both
            the built-in and user-defined styles in a document.
            </summary>
    </member>
    <member name="P:Aspose.Editor.Client.Document.Name">
      <summary>
            Gets the name of the document file.
            </summary>
      <remarks>
        <p>If document wasn't opened from a file then value is <see cref="F:System.String.Empty" />.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Editor.Client.Document.Format">
      <summary>
            Gets format of the stream used to read or write the document.
            </summary>
      <remarks>
        <p>Default value is <see cref="F:Aspose.Editor.Client.DocumentFormat.WordML" />.</p>
        <p>Property value is updated when <see cref="M:Aspose.Editor.Client.Document.Save(System.String)" /> is called.</p>
        <seealso cref="T:System.Text.Encoding" />
      </remarks>
    </member>
  </members>
</doc>